[{"code":[],"body":"This guide focuses on the interaction between Controller and View in the Model-View-Controller triangle. As you know, the Controller is responsible for orchestrating the whole process of handling a request in Rails, though it normally hands off any heavy code to the Model. But then, when it's time to send a response back to the user, the Controller hands things off to the View. It's that handoff that is the subject of this guide.In broad strokes, this involves deciding what should be sent as the response and calling an appropriate method to create that response. If the response is a full-blown view, Rails also does some extra work to wrap the view in a layout and possibly to pull in partial views. You'll see all of those paths later in this guide.","title":"1 Overview: How the Pieces Fit Together","anchor":"#overview-how-the-pieces-fit-together"},{"title":"2 Creating Responses","anchor":"#creating-responses","code":[],"body":"From the controller's point of view, there are three ways to create an HTTP response:"},{"code":["\nclass BooksController < ApplicationController\nend\n\nclass BooksController < ApplicationController\nend\n\nCopy\n","\nresources :books\n\nresources :books\n\nCopy\n","\n<h1>Books are coming soon!</h1>\n\n<h1>Books are coming soon!</h1>\n\nCopy\n","\nclass BooksController < ApplicationController\n  def index\n    @books = Book.all\n  end\nend\n\nclass BooksController < ApplicationController\n  def index\n    @books = Book.all\n  end\nend\n\nCopy\n","\n<h1>Listing Books</h1>\n\n<table>\n  <thead>\n    <tr>\n      <th>Title</th>\n      <th>Content</th>\n      <th colspan=\"3\"></th>\n    </tr>\n  </thead>\n\n  <tbody>\n    <% @books.each do |book| %>\n      <tr>\n        <td><%= book.title %></td>\n        <td><%= book.content %></td>\n        <td><%= link_to \"Show\", book %></td>\n        <td><%= link_to \"Edit\", edit_book_path(book) %></td>\n        <td><%= link_to \"Destroy\", book, method: :delete, data: { confirm: \"Are you sure?\" } %></td>\n      </tr>\n    <% end %>\n  </tbody>\n</table>\n\n<br>\n\n<%= link_to \"New book\", new_book_path %>\n\n<h1>Listing Books</h1>\n\n<table>\n  <thead>\n    <tr>\n      <th>Title</th>\n      <th>Content</th>\n      <th colspan=\"3\"></th>\n    </tr>\n  </thead>\n\n  <tbody>\n    <% @books.each do |book| %>\n      <tr>\n        <td><%= book.title %></td>\n        <td><%= book.content %></td>\n        <td><%= link_to \"Show\", book %></td>\n        <td><%= link_to \"Edit\", edit_book_path(book) %></td>\n        <td><%= link_to \"Destroy\", book, method: :delete, data: { confirm: \"Are you sure?\" } %></td>\n      </tr>\n    <% end %>\n  </tbody>\n</table>\n\n<br>\n\n<%= link_to \"New book\", new_book_path %>\n\nCopy\n"],"body":"You've heard that Rails promotes \"convention over configuration\". Default rendering is an excellent example of this. By default, controllers in Rails automatically render views with names that correspond to valid routes. For example, if you have this code in your BooksController class:And the following in your routes file:And you have a view file app/views/books/index.html.erb:Rails will automatically render app/views/books/index.html.erb when you navigate to /books and you will see \"Books are coming soon!\" on your screen.However, a coming soon screen is only minimally useful, so you will soon create your Book model and add the index action to BooksController:Note that we don't have explicit render at the end of the index action in accordance with \"convention over configuration\" principle. The rule is that if you do not explicitly render something at the end of a controller action, Rails will automatically look for the action_name.html.erb template in the controller's view path and render it. So in this case, Rails will render the app/views/books/index.html.erb file.If we want to display the properties of all the books in our view, we can do so with an ERB template like this:","title":"2.1 Rendering by Default: Convention Over Configuration in Action","anchor":"#rendering-by-default-convention-over-configuration-in-action"},{"title":"2.2 Using render","anchor":"#using-render","code":[],"body":"In most cases, the ActionController::Base#render method does the heavy lifting of rendering your application's content for use by a browser. There are a variety of ways to customize the behavior of render. You can render the default view for a Rails template, or a specific template, or a file, or inline code, or nothing at all. You can render text, JSON, or XML. You can specify the content type or HTTP status of the rendered response as well."},{"title":"2.2.1 Rendering an Action's View","anchor":"#rendering-an-action-s-view","code":["\ndef update\n  @book = Book.find(params[:id])\n  if @book.update(book_params)\n    redirect_to(@book)\n  else\n    render \"edit\"\n  end\nend\n\ndef update\n  @book = Book.find(params[:id])\n  if @book.update(book_params)\n    redirect_to(@book)\n  else\n    render \"edit\"\n  end\nend\n\nCopy\n","\ndef update\n  @book = Book.find(params[:id])\n  if @book.update(book_params)\n    redirect_to(@book)\n  else\n    render :edit\n  end\nend\n\ndef update\n  @book = Book.find(params[:id])\n  if @book.update(book_params)\n    redirect_to(@book)\n  else\n    render :edit\n  end\nend\n\nCopy\n"],"body":"If you want to render the view that corresponds to a different template within the same controller, you can use render with the name of the view:If the call to update fails, calling the update action in this controller will render the edit.html.erb template belonging to the same controller.If you prefer, you can use a symbol instead of a string to specify the action to render:"},{"code":["\nrender \"products/show\"\n\nrender \"products/show\"\n\nCopy\n","\nrender template: \"products/show\"\n\nrender template: \"products/show\"\n\nCopy\n"],"body":"What if you want to render a template from an entirely different controller from the one that contains the action code? You can also do that with render, which accepts the full path (relative to app/views) of the template to render. For example, if you're running code in an AdminProductsController that lives in app/controllers/admin, you can render the results of an action to a template in app/views/products this way:Rails knows that this view belongs to a different controller because of the embedded slash character in the string. If you want to be explicit, you can use the :template option (which was required on Rails 2.2 and earlier):","title":"2.2.2 Rendering an Action's Template from Another Controller","anchor":"#rendering-an-action-s-template-from-another-controller"},{"code":["\nrender :edit\nrender action: :edit\nrender \"edit\"\nrender action: \"edit\"\nrender \"books/edit\"\nrender template: \"books/edit\"\n\nrender :edit\nrender action: :edit\nrender \"edit\"\nrender action: \"edit\"\nrender \"books/edit\"\nrender template: \"books/edit\"\n\nCopy\n"],"body":"The above two ways of rendering (rendering the template of another action in the same controller, and rendering the template of another action in a different controller) are actually variants of the same operation.In fact, in the BooksController class, inside of the update action where we want to render the edit template if the book does not update successfully, all of the following render calls would all render the edit.html.erb template in the views/books directory:Which one you use is really a matter of style and convention, but the rule of thumb is to use the simplest one that makes sense for the code you are writing.","title":"2.2.3 Wrapping it up","anchor":"#wrapping-it-up"},{"title":"2.2.4 Using render with :inline","anchor":"#using-render-with-inline","code":["\nrender inline: \"<% products.each do |p| %><p><%= p.name %></p><% end %>\"\n\nrender inline: \"<% products.each do |p| %><p><%= p.name %></p><% end %>\"\n\nCopy\n","\nrender inline: \"xml.p {'Horrid coding practice!'}\", type: :builder\n\nrender inline: \"xml.p {'Horrid coding practice!'}\", type: :builder\n\nCopy\n"],"body":"The render method can do without a view completely, if you're willing to use the :inline option to supply ERB as part of the method call. This is perfectly valid:By default, inline rendering uses ERB. You can force it to use Builder instead with the :type option:"},{"code":["\nrender plain: \"OK\"\n\nrender plain: \"OK\"\n\nCopy\n"],"body":"You can send plain text - with no markup at all - back to the browser by using\nthe :plain option to render:","title":"2.2.5 Rendering Text","anchor":"#rendering-text"},{"title":"2.2.6 Rendering HTML","anchor":"#rendering-html","code":["\nrender html: helpers.tag.strong('Not Found')\n\nrender html: helpers.tag.strong('Not Found')\n\nCopy\n"],"body":"You can send an HTML string back to the browser by using the :html option to\nrender:"},{"title":"2.2.7 Rendering JSON","anchor":"#rendering-json","code":["\nrender json: @product\n\nrender json: @product\n\nCopy\n"],"body":"JSON is a JavaScript data format used by many Ajax libraries. Rails has built-in support for converting objects to JSON and rendering that JSON back to the browser:"},{"title":"2.2.8 Rendering XML","anchor":"#rendering-xml","code":["\nrender xml: @product\n\nrender xml: @product\n\nCopy\n"],"body":"Rails also has built-in support for converting objects to XML and rendering that XML back to the caller:"},{"title":"2.2.9 Rendering Vanilla JavaScript","anchor":"#rendering-vanilla-javascript","code":["\nrender js: \"alert('Hello Rails');\"\n\nrender js: \"alert('Hello Rails');\"\n\nCopy\n"],"body":"Rails can render vanilla JavaScript:This will send the supplied string to the browser with a MIME type of text/javascript."},{"title":"2.2.10 Rendering raw body","anchor":"#rendering-raw-body","code":["\nrender body: \"raw\"\n\nrender body: \"raw\"\n\nCopy\n"],"body":"You can send a raw content back to the browser, without setting any content\ntype, by using the :body option to render:"},{"title":"2.2.11 Rendering raw file","anchor":"#rendering-raw-file","code":["\nrender file: \"#{Rails.root}/public/404.html\", layout: false\n\nrender file: \"#{Rails.root}/public/404.html\", layout: false\n\nCopy\n"],"body":"Rails can render a raw file from an absolute path. This is useful for\nconditionally rendering static files like error pages.This renders the raw file (it doesn't support ERB or other handlers). By\ndefault it is rendered within the current layout."},{"title":"2.2.12 Rendering objects","anchor":"#rendering-objects","code":["\nrender MyRenderable.new\n\nrender MyRenderable.new\n\nCopy\n"],"body":"Rails can render objects responding to :render_in.This calls render_in on the provided object with the current view context."},{"title":"2.2.13 Options for render","anchor":"#options-for-render","code":["\nrender template: \"feed\", content_type: \"application/rss\"\n\nrender template: \"feed\", content_type: \"application/rss\"\n\nCopy\n","\nrender layout: \"special_layout\"\n\nrender layout: \"special_layout\"\n\nCopy\n","\nrender layout: false\n\nrender layout: false\n\nCopy\n","\nrender xml: photo, location: photo_url(photo)\n\nrender xml: photo, location: photo_url(photo)\n\nCopy\n","\nrender status: 500\nrender status: :forbidden\n\nrender status: 500\nrender status: :forbidden\n\nCopy\n","\nrender formats: :xml\nrender formats: [:json, :xml]\n\nrender formats: :xml\nrender formats: [:json, :xml]\n\nCopy\n","\n# called in HomeController#index\nrender variants: [:mobile, :desktop]\n\n# called in HomeController#index\nrender variants: [:mobile, :desktop]\n\nCopy\n","\ndef index\n  request.variant = determine_variant\nend\n\nprivate\n\ndef determine_variant\n  variant = nil\n  # some code to determine the variant(s) to use\n  variant = :mobile if session[:use_mobile]\n\n  variant\nend\n\ndef index\n  request.variant = determine_variant\nend\n\nprivate\n\ndef determine_variant\n  variant = nil\n  # some code to determine the variant(s) to use\n  variant = :mobile if session[:use_mobile]\n\n  variant\nend\n\nCopy\n"],"body":"Calls to the render method generally accept six options:By default, Rails will serve the results of a rendering operation with the MIME content-type of text/html (or application/json if you use the :json option, or application/xml for the :xml option.). There are times when you might like to change this, and you can do so by setting the :content_type option:With most of the options to render, the rendered content is displayed as part of the current layout. You'll learn more about layouts and how to use them later in this guide.You can use the :layout option to tell Rails to use a specific file as the layout for the current action:You can also tell Rails to render with no layout at all:You can use the :location option to set the HTTP Location header:Rails will automatically generate a response with the correct HTTP status code (in most cases, this is 200 OK). You can use the :status option to change this:Rails understands both numeric status codes and the corresponding symbols shown below.Rails uses the format specified in the request (or :html by default). You can\nchange this passing the :formats option with a symbol or an array:If a template with the specified format does not exist an ActionView::MissingTemplate error is raised.This tells Rails to look for template variations of the same format.\nYou can specify a list of variants by passing the :variants option with a symbol or an array.An example of use would be this.With this set of variants Rails will look for the following set of templates and use the first that exists.If a template with the specified format does not exist an ActionView::MissingTemplate error is raised.Instead of setting the variant on the render call you may also set it on the request object in your controller action."},{"code":["\nclass ProductsController < ApplicationController\n  layout \"inventory\"\n  #...\nend\n\nclass ProductsController < ApplicationController\n  layout \"inventory\"\n  #...\nend\n\nCopy\n","\nclass ApplicationController < ActionController::Base\n  layout \"main\"\n  #...\nend\n\nclass ApplicationController < ActionController::Base\n  layout \"main\"\n  #...\nend\n\nCopy\n","\nclass ProductsController < ApplicationController\n  layout :products_layout\n\n  def show\n    @product = Product.find(params[:id])\n  end\n\n  private\n    def products_layout\n      @current_user.special? ? \"special\" : \"products\"\n    end\n\nend\n\nclass ProductsController < ApplicationController\n  layout :products_layout\n\n  def show\n    @product = Product.find(params[:id])\n  end\n\n  private\n    def products_layout\n      @current_user.special? ? \"special\" : \"products\"\n    end\n\nend\n\nCopy\n","\nclass ProductsController < ApplicationController\n  layout Proc.new { |controller| controller.request.xhr? ? \"popup\" : \"application\" }\nend\n\nclass ProductsController < ApplicationController\n  layout Proc.new { |controller| controller.request.xhr? ? \"popup\" : \"application\" }\nend\n\nCopy\n","\nclass ProductsController < ApplicationController\n  layout \"product\", except: [:index, :rss]\nend\n\nclass ProductsController < ApplicationController\n  layout \"product\", except: [:index, :rss]\nend\n\nCopy\n","\n# app/controllers/application_controller.rb\nclass ApplicationController < ActionController::Base\nend\n\n# app/controllers/application_controller.rb\nclass ApplicationController < ActionController::Base\nend\n\nCopy\n","\n# app/controllers/admin_controller.rb\nclass AdminController < ApplicationController\nend\n\n# app/controllers/admin_controller.rb\nclass AdminController < ApplicationController\nend\n\nCopy\n","\n# app/controllers/admin/products_controller.rb\nclass Admin::ProductsController < AdminController\n  def index\n  end\nend\n\n# app/controllers/admin/products_controller.rb\nclass Admin::ProductsController < AdminController\n  def index\n  end\nend\n\nCopy\n","\n<%# app/views/admin/products/index.html.erb %>\n<%= render @products || \"empty_list\" %>\n\n<%# app/views/application/_empty_list.html.erb %>\nThere are no items in this list <em>yet</em>.\n\n<%# app/views/admin/products/index.html.erb %>\n<%= render @products || \"empty_list\" %>\n\n<%# app/views/application/_empty_list.html.erb %>\nThere are no items in this list <em>yet</em>.\n\nCopy\n"],"body":"To find the current layout, Rails first looks for a file in app/views/layouts with the same base name as the controller. For example, rendering actions from the PhotosController class will use app/views/layouts/photos.html.erb (or app/views/layouts/photos.builder). If there is no such controller-specific layout, Rails will use app/views/layouts/application.html.erb or app/views/layouts/application.builder. If there is no .erb layout, Rails will use a .builder layout if one exists. Rails also provides several ways to more precisely assign specific layouts to individual controllers and actions.You can override the default layout conventions in your controllers by using the layout declaration. For example:With this declaration, all of the views rendered by the ProductsController will use app/views/layouts/inventory.html.erb as their layout.To assign a specific layout for the entire application, use a layout declaration in your ApplicationController class:With this declaration, all of the views in the entire application will use app/views/layouts/main.html.erb for their layout.You can use a symbol to defer the choice of layout until a request is processed:Now, if the current user is a special user, they'll get a special layout when viewing a product.You can even use an inline method, such as a Proc, to determine the layout. For example, if you pass a Proc object, the block you give the Proc will be given the controller instance, so the layout can be determined based on the current request:Layouts specified at the controller level support the :only and :except options. These options take either a method name, or an array of method names, corresponding to method names within the controller:With this declaration, the product layout would be used for everything but the rss and index methods.Layout declarations cascade downward in the hierarchy, and more specific layout declarations always override more general ones. For example:In this application:Similar to the Layout Inheritance logic, if a template or partial is not found in the conventional path, the controller will look for a template or partial to render in its inheritance chain. For example:The lookup order for an admin/products#index action will be:This makes app/views/application/ a great place for your shared partials, which can then be rendered in your ERB as such:","title":"2.2.14 Finding Layouts","anchor":"#finding-layouts"},{"code":["\ndef show\n  @book = Book.find(params[:id])\n  if @book.special?\n    render action: \"special_show\"\n  end\n  render action: \"regular_show\"\nend\n\ndef show\n  @book = Book.find(params[:id])\n  if @book.special?\n    render action: \"special_show\"\n  end\n  render action: \"regular_show\"\nend\n\nCopy\n","\ndef show\n  @book = Book.find(params[:id])\n  if @book.special?\n    render action: \"special_show\" and return\n  end\n  render action: \"regular_show\"\nend\n\ndef show\n  @book = Book.find(params[:id])\n  if @book.special?\n    render action: \"special_show\" and return\n  end\n  render action: \"regular_show\"\nend\n\nCopy\n","\ndef show\n  @book = Book.find(params[:id])\n  if @book.special?\n    render action: \"special_show\"\n  end\nend\n\ndef show\n  @book = Book.find(params[:id])\n  if @book.special?\n    render action: \"special_show\"\n  end\nend\n\nCopy\n"],"body":"Sooner or later, most Rails developers will see the error message \"Can only render or redirect once per action\". While this is annoying, it's relatively easy to fix. Usually it happens because of a fundamental misunderstanding of the way that render works.For example, here's some code that will trigger this error:If @book.special? evaluates to true, Rails will start the rendering process to dump the @book variable into the special_show view. But this will not stop the rest of the code in the show action from running, and when Rails hits the end of the action, it will start to render the regular_show view - and throw an error. The solution is simple: make sure that you have only one call to render or redirect in a single code path. One thing that can help is and return. Here's a patched version of the method:Make sure to use and return instead of && return because && return will not work due to the operator precedence in the Ruby Language.Note that the implicit render done by ActionController detects if render has been called, so the following will work without errors:This will render a book with special? set with the special_show template, while other books will render with the default show template.","title":"2.2.15 Avoiding Double Render Errors","anchor":"#avoiding-double-render-errors"},{"title":"2.3 Using redirect_to","anchor":"#using-redirect-to","code":["\nredirect_to photos_url\n\nredirect_to photos_url\n\nCopy\n","\nredirect_back(fallback_location: root_path)\n\nredirect_back(fallback_location: root_path)\n\nCopy\n"],"body":"Another way to handle returning responses to an HTTP request is with redirect_to. As you've seen, render tells Rails which view (or other asset) to use in constructing a response. The redirect_to method does something completely different: it tells the browser to send a new request for a different URL. For example, you could redirect from wherever you are in your code to the index of photos in your application with this call:You can use redirect_back to return the user to the page they just came from.\nThis location is pulled from the HTTP_REFERER header which is not guaranteed\nto be set by the browser, so you must provide the fallback_location\nto use in this case."},{"title":"2.3.1 Getting a Different Redirect Status Code","anchor":"#getting-a-different-redirect-status-code","code":["\nredirect_to photos_path, status: 301\n\nredirect_to photos_path, status: 301\n\nCopy\n"],"body":"Rails uses HTTP status code 302, a temporary redirect, when you call redirect_to. If you'd like to use a different status code, perhaps 301, a permanent redirect, you can use the :status option:Just like the :status option for render, :status for redirect_to accepts both numeric and symbolic header designations."},{"title":"2.3.2 The Difference Between render and redirect_to","anchor":"#the-difference-between-render-and-redirect-to","code":["\ndef index\n  @books = Book.all\nend\n\ndef show\n  @book = Book.find_by(id: params[:id])\n  if @book.nil?\n    render action: \"index\"\n  end\nend\n\ndef index\n  @books = Book.all\nend\n\ndef show\n  @book = Book.find_by(id: params[:id])\n  if @book.nil?\n    render action: \"index\"\n  end\nend\n\nCopy\n","\ndef index\n  @books = Book.all\nend\n\ndef show\n  @book = Book.find_by(id: params[:id])\n  if @book.nil?\n    redirect_to action: :index\n  end\nend\n\ndef index\n  @books = Book.all\nend\n\ndef show\n  @book = Book.find_by(id: params[:id])\n  if @book.nil?\n    redirect_to action: :index\n  end\nend\n\nCopy\n","\ndef index\n  @books = Book.all\nend\n\ndef show\n  @book = Book.find_by(id: params[:id])\n  if @book.nil?\n    @books = Book.all\n    flash.now[:alert] = \"Your book was not found\"\n    render \"index\"\n  end\nend\n\ndef index\n  @books = Book.all\nend\n\ndef show\n  @book = Book.find_by(id: params[:id])\n  if @book.nil?\n    @books = Book.all\n    flash.now[:alert] = \"Your book was not found\"\n    render \"index\"\n  end\nend\n\nCopy\n"],"body":"Sometimes inexperienced developers think of redirect_to as a sort of goto command, moving execution from one place to another in your Rails code. This is not correct. Your code stops running and waits for a new request from the browser. It just happens that you've told the browser what request it should make next, by sending back an HTTP 302 status code.Consider these actions to see the difference:With the code in this form, there will likely be a problem if the @book variable is nil. Remember, a render :action doesn't run any code in the target action, so nothing will set up the @books variable that the index view will probably require. One way to fix this is to redirect instead of rendering:With this code, the browser will make a fresh request for the index page, the code in the index method will run, and all will be well.The only downside to this code is that it requires a round trip to the browser: the browser requested the show action with /books/1 and the controller finds that there are no books, so the controller sends out a 302 redirect response to the browser telling it to go to /books/, the browser complies and sends a new request back to the controller asking now for the index action, the controller then gets all the books in the database and renders the index template, sending it back down to the browser which then shows it on your screen.While in a small application, this added latency might not be a problem, it is something to think about if response time is a concern. We can demonstrate one way to handle this with a contrived example:This would detect that there are no books with the specified ID, populate the @books instance variable with all the books in the model, and then directly render the index.html.erb template, returning it to the browser with a flash alert message to tell the user what happened."},{"title":"2.4 Using head To Build Header-Only Responses","anchor":"#using-head-to-build-header-only-responses","code":["\nhead :bad_request\n\nhead :bad_request\n\nCopy\n","\nHTTP/1.1 400 Bad Request\nConnection: close\nDate: Sun, 24 Jan 2010 12:15:53 GMT\nTransfer-Encoding: chunked\nContent-Type: text/html; charset=utf-8\nX-Runtime: 0.013483\nSet-Cookie: _blog_session=...snip...; path=/; HttpOnly\nCache-Control: no-cache\n\nHTTP/1.1 400 Bad Request\nConnection: close\nDate: Sun, 24 Jan 2010 12:15:53 GMT\nTransfer-Encoding: chunked\nContent-Type: text/html; charset=utf-8\nX-Runtime: 0.013483\nSet-Cookie: _blog_session=...snip...; path=/; HttpOnly\nCache-Control: no-cache\n\nCopy\n","\nhead :created, location: photo_path(@photo)\n\nhead :created, location: photo_path(@photo)\n\nCopy\n","\nHTTP/1.1 201 Created\nConnection: close\nDate: Sun, 24 Jan 2010 12:16:44 GMT\nTransfer-Encoding: chunked\nLocation: /photos/1\nContent-Type: text/html; charset=utf-8\nX-Runtime: 0.083496\nSet-Cookie: _blog_session=...snip...; path=/; HttpOnly\nCache-Control: no-cache\n\nHTTP/1.1 201 Created\nConnection: close\nDate: Sun, 24 Jan 2010 12:16:44 GMT\nTransfer-Encoding: chunked\nLocation: /photos/1\nContent-Type: text/html; charset=utf-8\nX-Runtime: 0.083496\nSet-Cookie: _blog_session=...snip...; path=/; HttpOnly\nCache-Control: no-cache\n\nCopy\n"],"body":"The head method can be used to send responses with only headers to the browser. The head method accepts a number or symbol (see reference table) representing an HTTP status code. The options argument is interpreted as a hash of header names and values. For example, you can return only an error header:This would produce the following header:Or you can use other HTTP headers to convey other information:Which would produce:"},{"code":[],"body":"When Rails renders a view as a response, it does so by combining the view with the current layout, using the rules for finding the current layout that were covered earlier in this guide. Within a layout, you have access to three tools for combining different bits of output to form the overall response:","title":"3 Structuring Layouts","anchor":"#structuring-layouts"},{"code":[],"body":"Asset tag helpers provide methods for generating HTML that link views to feeds, JavaScript, stylesheets, images, videos, and audios. There are six asset tag helpers available in Rails:You can use these tags in layouts or other views, although the auto_discovery_link_tag, javascript_include_tag, and stylesheet_link_tag, are most commonly used in the <head> section of a layout.","title":"3.1 Asset Tag Helpers","anchor":"#asset-tag-helpers"},{"title":"3.1.1 Linking to Feeds with the auto_discovery_link_tag","anchor":"#linking-to-feeds-with-the-auto-discovery-link-tag","code":["\n<%= auto_discovery_link_tag(:rss, {action: \"feed\"},\n  {title: \"RSS Feed\"}) %>\n\n<%= auto_discovery_link_tag(:rss, {action: \"feed\"},\n  {title: \"RSS Feed\"}) %>\n\nCopy\n"],"body":"The auto_discovery_link_tag helper builds HTML that most browsers and feed readers can use to detect the presence of RSS, Atom, or JSON feeds. It takes the type of the link (:rss, :atom, or :json), a hash of options that are passed through to url_for, and a hash of options for the tag:There are three tag options available for the auto_discovery_link_tag:"},{"code":["\n<%= javascript_include_tag \"main\" %>\n\n<%= javascript_include_tag \"main\" %>\n\nCopy\n","\n<script src='/assets/main.js'></script>\n\n<script src='/assets/main.js'></script>\n\nCopy\n","\n<%= javascript_include_tag \"main\", \"columns\" %>\n\n<%= javascript_include_tag \"main\", \"columns\" %>\n\nCopy\n","\n<%= javascript_include_tag \"main\", \"/photos/columns\" %>\n\n<%= javascript_include_tag \"main\", \"/photos/columns\" %>\n\nCopy\n","\n<%= javascript_include_tag \"http://example.com/main.js\" %>\n\n<%= javascript_include_tag \"http://example.com/main.js\" %>\n\nCopy\n"],"body":"The javascript_include_tag helper returns an HTML script tag for each source provided.If you are using Rails with the Asset Pipeline enabled, this helper will generate a link to /assets/javascripts/ rather than public/javascripts which was used in earlier versions of Rails. This link is then served by the asset pipeline.A JavaScript file within a Rails application or Rails engine goes in one of three locations: app/assets, lib/assets or vendor/assets. These locations are explained in detail in the Asset Organization section in the Asset Pipeline Guide.You can specify a full path relative to the document root, or a URL, if you prefer. For example, to link to a JavaScript file that is inside a directory called javascripts inside of one of app/assets, lib/assets or vendor/assets, you would do this:Rails will then output a script tag such as this:The request to this asset is then served by the Sprockets gem.To include multiple files such as app/assets/javascripts/main.js and app/assets/javascripts/columns.js at the same time:To include app/assets/javascripts/main.js and app/assets/javascripts/photos/columns.js:To include http://example.com/main.js:","title":"3.1.2 Linking to JavaScript Files with the javascript_include_tag","anchor":"#linking-to-javascript-files-with-the-javascript-include-tag"},{"code":["\n<%= stylesheet_link_tag \"main\" %>\n\n<%= stylesheet_link_tag \"main\" %>\n\nCopy\n","\n<%= stylesheet_link_tag \"main\", \"columns\" %>\n\n<%= stylesheet_link_tag \"main\", \"columns\" %>\n\nCopy\n","\n<%= stylesheet_link_tag \"main\", \"photos/columns\" %>\n\n<%= stylesheet_link_tag \"main\", \"photos/columns\" %>\n\nCopy\n","\n<%= stylesheet_link_tag \"http://example.com/main.css\" %>\n\n<%= stylesheet_link_tag \"http://example.com/main.css\" %>\n\nCopy\n","\n<%= stylesheet_link_tag \"main_print\", media: \"print\" %>\n\n<%= stylesheet_link_tag \"main_print\", media: \"print\" %>\n\nCopy\n"],"body":"The stylesheet_link_tag helper returns an HTML <link> tag for each source provided.If you are using Rails with the \"Asset Pipeline\" enabled, this helper will generate a link to /assets/stylesheets/. This link is then processed by the Sprockets gem. A stylesheet file can be stored in one of three locations: app/assets, lib/assets or vendor/assets.You can specify a full path relative to the document root, or a URL. For example, to link to a stylesheet file that is inside a directory called stylesheets inside of one of app/assets, lib/assets or vendor/assets, you would do this:To include app/assets/stylesheets/main.css and app/assets/stylesheets/columns.css:To include app/assets/stylesheets/main.css and app/assets/stylesheets/photos/columns.css:To include http://example.com/main.css:By default, the stylesheet_link_tag creates links with media=\"screen\" rel=\"stylesheet\". You can override any of these defaults by specifying an appropriate option (:media, :rel):","title":"3.1.3 Linking to CSS Files with the stylesheet_link_tag","anchor":"#linking-to-css-files-with-the-stylesheet-link-tag"},{"code":["\n<%= image_tag \"header.png\" %>\n\n<%= image_tag \"header.png\" %>\n\nCopy\n","\n<%= image_tag \"icons/delete.gif\" %>\n\n<%= image_tag \"icons/delete.gif\" %>\n\nCopy\n","\n<%= image_tag \"icons/delete.gif\", {height: 45} %>\n\n<%= image_tag \"icons/delete.gif\", {height: 45} %>\n\nCopy\n","\n<%= image_tag \"home.gif\" %>\n<%= image_tag \"home.gif\", alt: \"Home\" %>\n\n<%= image_tag \"home.gif\" %>\n<%= image_tag \"home.gif\", alt: \"Home\" %>\n\nCopy\n","\n<%= image_tag \"home.gif\", size: \"50x20\" %>\n\n<%= image_tag \"home.gif\", size: \"50x20\" %>\n\nCopy\n","\n<%= image_tag \"home.gif\", alt: \"Go Home\",\n                          id: \"HomeImage\",\n                          class: \"nav_bar\" %>\n\n<%= image_tag \"home.gif\", alt: \"Go Home\",\n                          id: \"HomeImage\",\n                          class: \"nav_bar\" %>\n\nCopy\n"],"body":"The image_tag helper builds an HTML <img /> tag to the specified file. By default, files are loaded from public/images.You can supply a path to the image if you like:You can supply a hash of additional HTML options:You can supply alternate text for the image which will be used if the user has images turned off in their browser. If you do not specify an alt text explicitly, it defaults to the file name of the file, capitalized and with no extension. For example, these two image tags would return the same code:You can also specify a special size tag, in the format \"{width}x{height}\":In addition to the above special tags, you can supply a final hash of standard HTML options, such as :class, :id or :name:","title":"3.1.4 Linking to Images with the image_tag","anchor":"#linking-to-images-with-the-image-tag"},{"code":["\n<%= video_tag \"movie.ogg\" %>\n\n<%= video_tag \"movie.ogg\" %>\n\nCopy\n","\n<video src=\"/videos/movie.ogg\" />\n\n<video src=\"/videos/movie.ogg\" />\n\nCopy\n","\n<%= video_tag [\"trailer.ogg\", \"movie.ogg\"] %>\n\n<%= video_tag [\"trailer.ogg\", \"movie.ogg\"] %>\n\nCopy\n","\n<video>\n  <source src=\"/videos/trailer.ogg\">\n  <source src=\"/videos/movie.ogg\">\n</video>\n\n<video>\n  <source src=\"/videos/trailer.ogg\">\n  <source src=\"/videos/movie.ogg\">\n</video>\n\nCopy\n"],"body":"The video_tag helper builds an HTML 5 <video> tag to the specified file. By default, files are loaded from public/videos.ProducesLike an image_tag you can supply a path, either absolute, or relative to the public/videos directory. Additionally you can specify the size: \"#{width}x#{height}\" option just like an image_tag. Video tags can also have any of the HTML options specified at the end (id, class et al).The video tag also supports all of the <video> HTML options through the HTML options hash, including:You can also specify multiple videos to play by passing an array of videos to the video_tag:This will produce:","title":"3.1.5 Linking to Videos with the video_tag","anchor":"#linking-to-videos-with-the-video-tag"},{"code":["\n<%= audio_tag \"music.mp3\" %>\n\n<%= audio_tag \"music.mp3\" %>\n\nCopy\n","\n<%= audio_tag \"music/first_song.mp3\" %>\n\n<%= audio_tag \"music/first_song.mp3\" %>\n\nCopy\n"],"body":"The audio_tag helper builds an HTML 5 <audio> tag to the specified file. By default, files are loaded from public/audios.You can supply a path to the audio file if you like:You can also supply a hash of additional options, such as :id, :class, etc.Like the video_tag, the audio_tag has special options:","title":"3.1.6 Linking to Audio Files with the audio_tag","anchor":"#linking-to-audio-files-with-the-audio-tag"},{"code":["\n<html>\n  <head>\n  </head>\n  <body>\n  <%= yield %>\n  </body>\n</html>\n\n<html>\n  <head>\n  </head>\n  <body>\n  <%= yield %>\n  </body>\n</html>\n\nCopy\n","\n<html>\n  <head>\n  <%= yield :head %>\n  </head>\n  <body>\n  <%= yield %>\n  </body>\n</html>\n\n<html>\n  <head>\n  <%= yield :head %>\n  </head>\n  <body>\n  <%= yield %>\n  </body>\n</html>\n\nCopy\n"],"body":"Within the context of a layout, yield identifies a section where content from the view should be inserted. The simplest way to use this is to have a single yield, into which the entire contents of the view currently being rendered is inserted:You can also create a layout with multiple yielding regions:The main body of the view will always render into the unnamed yield. To render content into a named yield, you use the content_for method.","title":"3.2 Understanding yield","anchor":"#understanding-yield"},{"title":"3.3 Using the content_for Method","anchor":"#using-the-content-for-method","code":["\n<% content_for :head do %>\n  <title>A simple page</title>\n<% end %>\n\n<p>Hello, Rails!</p>\n\n<% content_for :head do %>\n  <title>A simple page</title>\n<% end %>\n\n<p>Hello, Rails!</p>\n\nCopy\n","\n<html>\n  <head>\n  <title>A simple page</title>\n  </head>\n  <body>\n  <p>Hello, Rails!</p>\n  </body>\n</html>\n\n<html>\n  <head>\n  <title>A simple page</title>\n  </head>\n  <body>\n  <p>Hello, Rails!</p>\n  </body>\n</html>\n\nCopy\n"],"body":"The content_for method allows you to insert content into a named yield block in your layout. For example, this view would work with the layout that you just saw:The result of rendering this page into the supplied layout would be this HTML:The content_for method is very helpful when your layout contains distinct regions such as sidebars and footers that should get their own blocks of content inserted. It's also useful for inserting tags that load page-specific JavaScript or css files into the header of an otherwise generic layout."},{"title":"3.4 Using Partials","anchor":"#using-partials","code":[],"body":"Partial templates - usually just called \"partials\" - are another device for breaking the rendering process into more manageable chunks. With a partial, you can move the code for rendering a particular piece of a response to its own file."},{"title":"3.4.1 Naming Partials","anchor":"#naming-partials","code":["\n<%= render \"menu\" %>\n\n<%= render \"menu\" %>\n\nCopy\n","\n<%= render \"shared/menu\" %>\n\n<%= render \"shared/menu\" %>\n\nCopy\n"],"body":"To render a partial as part of a view, you use the render method within the view:This will render a file named _menu.html.erb at that point within the view being rendered. Note the leading underscore character: partials are named with a leading underscore to distinguish them from regular views, even though they are referred to without the underscore. This holds true even when you're pulling in a partial from another folder:That code will pull in the partial from app/views/shared/_menu.html.erb."},{"title":"3.4.2 Using Partials to Simplify Views","anchor":"#using-partials-to-simplify-views","code":["\n<%= render \"shared/ad_banner\" %>\n\n<h1>Products</h1>\n\n<p>Here are a few of our fine products:</p>\n...\n\n<%= render \"shared/footer\" %>\n\n<%= render \"shared/ad_banner\" %>\n\n<h1>Products</h1>\n\n<p>Here are a few of our fine products:</p>\n...\n\n<%= render \"shared/footer\" %>\n\nCopy\n"],"body":"One way to use partials is to treat them as the equivalent of subroutines: as a way to move details out of a view so that you can grasp what's going on more easily. For example, you might have a view that looked like this:Here, the _ad_banner.html.erb and _footer.html.erb partials could contain\ncontent that is shared by many pages in your application. You don't need to see\nthe details of these sections when you're concentrating on a particular page.As seen in the previous sections of this guide, yield is a very powerful tool\nfor cleaning up your layouts. Keep in mind that it's pure Ruby, so you can use\nit almost everywhere. For example, we can use it to DRY up form layout\ndefinitions for several similar resources:"},{"title":"3.4.3 Partial Layouts","anchor":"#partial-layouts","code":["\n<%= render partial: \"link_area\", layout: \"graybar\" %>\n\n<%= render partial: \"link_area\", layout: \"graybar\" %>\n\nCopy\n"],"body":"A partial can use its own layout file, just as a view can use a layout. For example, you might call a partial like this:This would look for a partial named _link_area.html.erb and render it using the layout _graybar.html.erb. Note that layouts for partials follow the same leading-underscore naming as regular partials, and are placed in the same folder with the partial that they belong to (not in the master layouts folder).Also note that explicitly specifying :partial is required when passing additional options such as :layout."},{"title":"3.4.4 Passing Local Variables","anchor":"#passing-local-variables","code":["\n<%= render partial: \"customer\", object: @new_customer %>\n\n<%= render partial: \"customer\", object: @new_customer %>\n\nCopy\n","\n<%= render @customer %>\n\n<%= render @customer %>\n\nCopy\n"],"body":"You can also pass local variables into partials, making them even more powerful and flexible. For example, you can use this technique to reduce duplication between new and edit pages, while still keeping a bit of distinct content:Although the same partial will be rendered into both views, Action View's submit helper will return \"Create Zone\" for the new action and \"Update Zone\" for the edit action.To pass a local variable to a partial in only specific cases use the local_assigns.This way it is possible to use the partial without the need to declare all local variables.Every partial also has a local variable with the same name as the partial (minus the leading underscore). You can pass an object in to this local variable via the :object option:Within the customer partial, the customer variable will refer to @new_customer from the parent view.If you have an instance of a model to render into a partial, you can use a shorthand syntax:Assuming that the @customer instance variable contains an instance of the Customer model, this will use _customer.html.erb to render it and will pass the local variable customer into the partial which will refer to the @customer instance variable in the parent view."},{"title":"3.4.5 Rendering Collections","anchor":"#rendering-collections","code":["\n<h1>Products</h1>\n<%= render @products %>\n\n<h1>Products</h1>\n<%= render @products %>\n\nCopy\n","\n<h1>Products</h1>\n<%= render(@products) || \"There are no products available.\" %>\n\n<h1>Products</h1>\n<%= render(@products) || \"There are no products available.\" %>\n\nCopy\n"],"body":"Partials are very useful in rendering collections. When you pass a collection to a partial via the :collection option, the partial will be inserted once for each member in the collection:When a partial is called with a pluralized collection, then the individual instances of the partial have access to the member of the collection being rendered via a variable named after the partial. In this case, the partial is _product, and within the _product partial, you can refer to product to get the instance that is being rendered.There is also a shorthand for this. Assuming @products is a collection of Product instances, you can simply write this in the index.html.erb to produce the same result:Rails determines the name of the partial to use by looking at the model name in the collection. In fact, you can even create a heterogeneous collection and render it this way, and Rails will choose the proper partial for each member of the collection:In this case, Rails will use the customer or employee partials as appropriate for each member of the collection.In the event that the collection is empty, render will return nil, so it should be fairly simple to provide alternative content."},{"code":["\n<%= render partial: \"product\", collection: @products, as: :item %>\n\n<%= render partial: \"product\", collection: @products, as: :item %>\n\nCopy\n","\n<%= render partial: \"product\", collection: @products,\n           as: :item, locals: {title: \"Products Page\"} %>\n\n<%= render partial: \"product\", collection: @products,\n           as: :item, locals: {title: \"Products Page\"} %>\n\nCopy\n"],"body":"To use a custom local variable name within the partial, specify the :as option in the call to the partial:With this change, you can access an instance of the @products collection as the item local variable within the partial.You can also pass in arbitrary local variables to any partial you are rendering with the locals: {} option:In this case, the partial will have access to a local variable title with the value \"Products Page\".You can also specify a second partial to be rendered between instances of the main partial by using the :spacer_template option:","title":"3.4.6 Local Variables","anchor":"#local-variables"},{"title":"3.4.7 Spacer Templates","anchor":"#spacer-templates","code":["\n<%= render partial: @products, spacer_template: \"product_ruler\" %>\n\n<%= render partial: @products, spacer_template: \"product_ruler\" %>\n\nCopy\n"],"body":"Rails will render the _product_ruler partial (with no data passed in to it) between each pair of _product partials."},{"title":"3.4.8 Collection Partial Layouts","anchor":"#collection-partial-layouts","code":["\n<%= render partial: \"product\", collection: @products, layout: \"special_layout\" %>\n\n<%= render partial: \"product\", collection: @products, layout: \"special_layout\" %>\n\nCopy\n"],"body":"When rendering collections it is also possible to use the :layout option:The layout will be rendered together with the partial for each item in the collection. The current object and object_counter variables will be available in the layout as well, the same way they are within the partial."},{"title":"3.5 Using Nested Layouts","anchor":"#using-nested-layouts","code":[],"body":"You may find that your application requires a layout that differs slightly from your regular application layout to support one particular controller. Rather than repeating the main layout and editing it, you can accomplish this by using nested layouts (sometimes called sub-templates). Here's an example:Suppose you have the following ApplicationController layout:On pages generated by NewsController, you want to hide the top menu and add a right menu:That's it. The News views will use the new layout, hiding the top menu and adding a new right menu inside the \"content\" div.There are several ways of getting similar results with different sub-templating schemes using this technique. Note that there is no limit in nesting levels. One can use the ActionView::render method via render template: 'layouts/news' to base a new layout on the News layout. If you are sure you will not subtemplate the News layout, you can replace the content_for?(:news_content) ? yield(:news_content) : yield with simply yield."}]