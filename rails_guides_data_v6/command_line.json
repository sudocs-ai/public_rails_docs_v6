[{"code":["\n$ rails --help\nUsage: rails COMMAND [ARGS]\n\nThe most common rails commands are:\n generate    Generate new code (short-cut alias: \"g\")\n console     Start the Rails console (short-cut alias: \"c\")\n server      Start the Rails server (short-cut alias: \"s\")\n ...\n\nAll commands can be run with -h (or --help) for more information.\n\nIn addition to those commands, there are:\n about                               List versions of all Rails ...\n assets:clean[keep]                  Remove old compiled assets\n assets:clobber                      Remove compiled assets\n assets:environment                  Load asset compile environment\n assets:precompile                   Compile all the assets ...\n ...\n db:fixtures:load                    Loads fixtures into the ...\n db:migrate                          Migrate the database ...\n db:migrate:status                   Display status of migrations\n db:rollback                         Rolls the schema back to ...\n db:schema:cache:clear               Clears a db/schema_cache.yml file\n db:schema:cache:dump                Creates a db/schema_cache.yml file\n db:schema:dump                      Creates a database schema file (either db/schema.rb or db/structure.sql ...\n db:schema:load                      Loads a database schema file (either db/schema.rb or db/structure.sql ...\n db:seed                             Loads the seed data ...\n db:version                          Retrieves the current schema ...\n ...\n restart                             Restart app by touching ...\n tmp:create                          Creates tmp directories ...\n\nrails --help\n\nCopy\n"],"body":"There are a few commands that are absolutely critical to your everyday usage of Rails. In the order of how much you'll probably use them are:You can get a list of rails commands available to you, which will often depend on your current directory, by typing rails --help. Each command has a description, and should help you find the thing you need.Let's create a simple Rails application to step through each of these commands in context.","title":"1 Command Line Basics","anchor":"#command-line-basics"},{"title":"1.1 rails new","anchor":"#rails-new","code":["\n$ rails new commandsapp\n     create\n     create  README.md\n     create  Rakefile\n     create  config.ru\n     create  .gitignore\n     create  Gemfile\n     create  app\n     ...\n     create  tmp/cache\n     ...\n        run  bundle install\n\nrails new commandsapp\n\nCopy\n"],"body":"The first thing we'll want to do is create a new Rails application by running the rails new command after installing Rails.Rails will set you up with what seems like a huge amount of stuff for such a tiny command! You've got the entire Rails directory structure now with all the code you need to run our simple application right out of the box.If you wish to skip some files or components from being generated, you can append the following arguments to your rails new command:"},{"code":["\n$ cd commandsapp\n$ bin/rails server\n=> Booting Puma\n=> Rails 6.0.0 application starting in development\n=> Run `bin/rails server --help` for more startup options\nPuma starting in single mode...\n* Version 3.12.1 (ruby 2.5.7-p206), codename: Llamas in Pajamas\n* Min threads: 5, max threads: 5\n* Environment: development\n* Listening on tcp://localhost:3000\nUse Ctrl-C to stop\n\ncd commandsapp\nbin/rails server\n\nCopy\n","\n$ bin/rails server -e production -p 4000\n\nbin/rails server -e production -p 4000\n\nCopy\n"],"body":"The bin/rails server command launches a web server named Puma which comes bundled with Rails. You'll use this any time you want to access your application through a web browser.With no further work, bin/rails server will run our new shiny Rails app:With just three commands we whipped up a Rails server listening on port 3000. Go to your browser and open http://localhost:3000, you will see a basic Rails app running.The server can be run on a different port using the -p option. The default development environment can be changed using -e.The -b option binds Rails to the specified IP, by default it is localhost. You can run a server as a daemon by passing a -d option.","title":"1.2 bin/rails server","anchor":"#bin-rails-server"},{"title":"1.3 bin/rails generate","anchor":"#bin-rails-generate","code":["\n$ bin/rails generate\nUsage: rails generate GENERATOR [args] [options]\n\n...\n...\n\nPlease choose a generator below.\n\nRails:\n  assets\n  channel\n  controller\n  generator\n  ...\n  ...\n\nbin/rails generate\n\nCopy\n","\n$ bin/rails generate controller\nUsage: bin/rails generate controller NAME [action action] [options]\n\n...\n...\n\nDescription:\n    ...\n\n    To create a controller within a module, specify the controller name as a path like 'parent_module/controller_name'.\n\n    ...\n\nExample:\n    `bin/rails generate controller CreditCards open debit credit close`\n\n    Credit card controller with URLs like /credit_cards/debit.\n        Controller: app/controllers/credit_cards_controller.rb\n        Test:       test/controllers/credit_cards_controller_test.rb\n        Views:      app/views/credit_cards/debit.html.erb [...]\n        Helper:     app/helpers/credit_cards_helper.rb\n\nbin/rails generate controller\n\nCopy\n","\n$ bin/rails generate controller Greetings hello\n     create  app/controllers/greetings_controller.rb\n      route  get 'greetings/hello'\n     invoke  erb\n     create    app/views/greetings\n     create    app/views/greetings/hello.html.erb\n     invoke  test_unit\n     create    test/controllers/greetings_controller_test.rb\n     invoke  helper\n     create    app/helpers/greetings_helper.rb\n     invoke    test_unit\n     invoke  assets\n     invoke    scss\n     create      app/assets/stylesheets/greetings.scss\n\nbin/rails generate controller Greetings hello\n\nCopy\n","\nclass GreetingsController < ApplicationController\n  def hello\n    @message = \"Hello, how are you today?\"\n  end\nend\n\nclass GreetingsController < ApplicationController\n  def hello\n    @message = \"Hello, how are you today?\"\n  end\nend\n\nCopy\n","\n<h1>A Greeting for You!</h1>\n<p><%= @message %></p>\n\n<h1>A Greeting for You!</h1>\n<p><%= @message %></p>\n\nCopy\n","\n$ bin/rails server\n=> Booting Puma...\n\nbin/rails server\n\nCopy\n","\n$ bin/rails generate model\nUsage:\n  bin/rails generate model NAME [field[:type][:index] field[:type][:index]] [options]\n\n...\n\nActiveRecord options:\n      [--migration], [--no-migration]        # Indicates when to generate migration\n                                             # Default: true\n\n...\n\nDescription:\n    Generates a new model. Pass the model name, either CamelCased or\n    under_scored, and an optional list of attribute pairs as arguments.\n\n...\n\nbin/rails generate model\n\nCopy\n","\n$ bin/rails generate scaffold HighScore game:string score:integer\n    invoke  active_record\n    create    db/migrate/20190416145729_create_high_scores.rb\n    create    app/models/high_score.rb\n    invoke    test_unit\n    create      test/models/high_score_test.rb\n    create      test/fixtures/high_scores.yml\n    invoke  resource_route\n     route    resources :high_scores\n    invoke  scaffold_controller\n    create    app/controllers/high_scores_controller.rb\n    invoke    erb\n    create      app/views/high_scores\n    create      app/views/high_scores/index.html.erb\n    create      app/views/high_scores/edit.html.erb\n    create      app/views/high_scores/show.html.erb\n    create      app/views/high_scores/new.html.erb\n    create      app/views/high_scores/_form.html.erb\n    invoke    test_unit\n    create      test/controllers/high_scores_controller_test.rb\n    create      test/system/high_scores_test.rb\n    invoke    helper\n    create      app/helpers/high_scores_helper.rb\n    invoke      test_unit\n    invoke    jbuilder\n    create      app/views/high_scores/index.json.jbuilder\n    create      app/views/high_scores/show.json.jbuilder\n    create      app/views/high_scores/_high_score.json.jbuilder\n    invoke  assets\n    invoke    scss\n    create      app/assets/stylesheets/high_scores.scss\n    invoke  scss\n    create    app/assets/stylesheets/scaffolds.scss\n\nbin/rails generate scaffold HighScore game:string score:integer\n\nCopy\n","\n$ bin/rails db:migrate\n==  CreateHighScores: migrating ===============================================\n-- create_table(:high_scores)\n   -> 0.0017s\n==  CreateHighScores: migrated (0.0019s) ======================================\n\nbin/rails db:migrate\n\nCopy\n","\n$ bin/rails server\n\nbin/rails server\n\nCopy\n"],"body":"The bin/rails generate command uses templates to create a whole lot of things. Running bin/rails generate by itself gives a list of available generators:Using generators will save you a large amount of time by writing boilerplate code, code that is necessary for the app to work.Let's make our own controller with the controller generator. But what command should we use? Let's ask the generator:The controller generator is expecting parameters in the form of generate controller ControllerName action1 action2. Let's make a Greetings controller with an action of hello, which will say something nice to us.What all did this generate? It made sure a bunch of directories were in our application, and created a controller file, a view file, a functional test file, a helper for the view, a JavaScript file, and a stylesheet file.Check out the controller and modify it a little (in app/controllers/greetings_controller.rb):Then the view, to display our message (in app/views/greetings/hello.html.erb):Fire up your server using bin/rails server.The URL will be http://localhost:3000/greetings/hello.Rails comes with a generator for data models too.But instead of generating a model directly (which we'll be doing later), let's set up a scaffold. A scaffold in Rails is a full set of model, database migration for that model, controller to manipulate it, views to view and manipulate the data, and a test suite for each of the above.We will set up a simple resource called \"HighScore\" that will keep track of our highest score on video games we play.The generator checks that there exist the directories for models, controllers, helpers, layouts, functional and unit tests, stylesheets, creates the views, controller, model and database migration for HighScore (creating the high_scores table and fields), takes care of the route for the resource, and new tests for everything.The migration requires that we migrate, that is, run some Ruby code (living in that 20130717151933_create_high_scores.rb) to modify the schema of our database. Which database? The SQLite3 database that Rails will create for you when we run the bin/rails db:migrate command. We'll talk more about that command below.Let's see the interface Rails created for us.Go to your browser and open http://localhost:3000/high_scores, now we can create new high scores (55,160 on Space Invaders!)"},{"title":"1.4 bin/rails console","anchor":"#bin-rails-console","code":["\n$ bin/rails console -e staging\n\nbin/rails console -e staging\n\nCopy\n","\n$ bin/rails console --sandbox\nLoading development environment in sandbox (Rails 5.1.0)\nAny modifications you make will be rolled back on exit\nirb(main):001:0>\n\nbin/rails console --sandbox\n\nCopy\n"],"body":"The console command lets you interact with your Rails application from the command line. On the underside, bin/rails console uses IRB, so if you've ever used it, you'll be right at home. This is useful for testing out quick ideas with code and changing data server-side without touching the website.You can specify the environment in which the console command should operate.If you wish to test out some code without changing any data, you can do that by invoking bin/rails console --sandbox."},{"code":["\nirb> app.root_path\n=> \"/\"\n\nirb> app.get _\nStarted GET \"/\" for 127.0.0.1 at 2014-06-19 10:41:57 -0300\n...\n\napp.root_path\napp.get _\n\nCopy\n","\nirb> helper.time_ago_in_words 30.days.ago\n=> \"about 1 month\"\n\nirb> helper.my_custom_helper\n=> \"my custom helper\"\n\nhelper.time_ago_in_words 30.days.ago\nhelper.my_custom_helper\n\nCopy\n"],"body":"Inside the bin/rails console you have access to the app and helper instances.With the app method you can access named route helpers, as well as do requests.With the helper method it is possible to access Rails and your application's helpers.","title":"1.4.1 The app and helper objects","anchor":"#the-app-and-helper-objects"},{"code":["\n$ bin/rails dbconsole --database=animals\n\nbin/rails dbconsole --database=animals\n\nCopy\n"],"body":"bin/rails dbconsole figures out which database you're using and drops you into whichever command line interface you would use with it (and figures out the command line parameters to give to it, too!). It supports MySQL (including MariaDB), PostgreSQL, and SQLite3.If you are using multiple databases, bin/rails dbconsole will connect to the primary database by default. You can specify which database to connect to using --database or --db:","title":"1.5 bin/rails dbconsole","anchor":"#bin-rails-dbconsole"},{"code":["\n$ bin/rails runner \"Model.long_running_method\"\n\nbin/rails runner \"Model.long_running_method\"\n\nCopy\n","\n$ bin/rails runner -e staging \"Model.long_running_method\"\n\nbin/rails runner -e staging \"Model.long_running_method\"\n\nCopy\n","\n$ bin/rails runner lib/code_to_be_run.rb\n\nbin/rails runner lib/code_to_be_run.rb\n\nCopy\n"],"body":"runner runs Ruby code in the context of Rails non-interactively. For instance:You can specify the environment in which the runner command should operate using the -e switch.You can even execute ruby code written in a file with runner.","title":"1.6 bin/rails runner","anchor":"#bin-rails-runner"},{"code":["\n$ bin/rails generate model Oops\n      invoke  active_record\n      create    db/migrate/20120528062523_create_oops.rb\n      create    app/models/oops.rb\n      invoke    test_unit\n      create      test/models/oops_test.rb\n      create      test/fixtures/oops.yml\n\nbin/rails generate model Oops\n\nCopy\n","\n$ bin/rails destroy model Oops\n      invoke  active_record\n      remove    db/migrate/20120528062523_create_oops.rb\n      remove    app/models/oops.rb\n      invoke    test_unit\n      remove      test/models/oops_test.rb\n      remove      test/fixtures/oops.yml\n\nbin/rails destroy model Oops\n\nCopy\n"],"body":"Think of destroy as the opposite of generate. It'll figure out what generate did, and undo it.","title":"1.7 bin/rails destroy","anchor":"#bin-rails-destroy"},{"code":["\n$ bin/rails about\nAbout your application's environment\nRails version             6.0.0\nRuby version              2.5.0 (x86_64-linux)\nRubyGems version          2.7.3\nRack version              2.0.4\nJavaScript Runtime        Node.js (V8)\nMiddleware:               Rack::Sendfile, ActionDispatch::Static, ActionDispatch::Executor, ActiveSupport::Cache::Strategy::LocalCache::Middleware, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, ActionDispatch::RemoteIp, Sprockets::Rails::QuietAssets, Rails::Rack::Logger, ActionDispatch::ShowExceptions, WebConsole::Middleware, ActionDispatch::DebugExceptions, ActionDispatch::Reloader, ActionDispatch::Callbacks, ActiveRecord::Migration::CheckPending, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, Rack::Head, Rack::ConditionalGet, Rack::ETag\nApplication root          /home/foobar/commandsapp\nEnvironment               development\nDatabase adapter          sqlite3\nDatabase schema version   20180205173523\n\nbin/rails about\n\nCopy\n"],"body":"bin/rails about gives information about version numbers for Ruby, RubyGems, Rails, the Rails subcomponents, your application's folder, the current Rails environment name, your app's database adapter, and schema version. It is useful when you need to ask for help, check if a security patch might affect you, or when you need some stats for an existing Rails installation.","title":"1.8 bin/rails about","anchor":"#bin-rails-about"},{"code":[],"body":"You can precompile the assets in app/assets using bin/rails assets:precompile, and remove older compiled assets using bin/rails assets:clean. The assets:clean command allows for rolling deploys that may still be linking to an old asset while the new assets are being built.If you want to clear public/assets completely, you can use bin/rails assets:clobber.","title":"1.9 bin/rails assets:","anchor":"#bin-rails-assets"},{"title":"1.10 bin/rails db:","anchor":"#bin-rails-db","code":[],"body":"The most common commands of the db: rails namespace are migrate and create, and it will pay off to try out all of the migration rails commands (up, down, redo, reset). bin/rails db:version is useful when troubleshooting, telling you the current version of the database.More information about migrations can be found in the Migrations guide."},{"title":"1.11 bin/rails notes","anchor":"#bin-rails-notes","code":["\n$ bin/rails notes\napp/controllers/admin/users_controller.rb:\n  * [ 20] [TODO] any other way to do this?\n  * [132] [FIXME] high priority for next deploy\n\nlib/school.rb:\n  * [ 13] [OPTIMIZE] refactor this code to make it faster\n  * [ 17] [FIXME]\n\nbin/rails notes\n\nCopy\n"],"body":"bin/rails notes searches through your code for comments beginning with a specific keyword. You can refer to bin/rails notes --help for information about usage.By default, it will search in app, config, db, lib, and test directories for FIXME, OPTIMIZE, and TODO annotations in files with extension .builder, .rb, .rake, .yml, .yaml, .ruby, .css, .js, and .erb."},{"code":["\n$ bin/rails notes --annotations FIXME RELEASE\napp/controllers/admin/users_controller.rb:\n  * [101] [RELEASE] We need to look at this before next release\n  * [132] [FIXME] high priority for next deploy\n\nlib/school.rb:\n  * [ 17] [FIXME]\n\nbin/rails notes --annotations FIXME RELEASE\n\nCopy\n"],"body":"You can pass specific annotations by using the --annotations argument. By default, it will search for FIXME, OPTIMIZE, and TODO.\nNote that annotations are case sensitive.","title":"1.11.1 Annotations","anchor":"#annotations"},{"code":["\nconfig.annotations.register_tags(\"DEPRECATEME\", \"TESTME\")\n\nconfig.annotations.register_tags(\"DEPRECATEME\", \"TESTME\")\n\nCopy\n","\n$ bin/rails notes\napp/controllers/admin/users_controller.rb:\n  * [ 20] [TODO] do A/B testing on this\n  * [ 42] [TESTME] this needs more functional tests\n  * [132] [DEPRECATEME] ensure this method is deprecated in next release\n\nbin/rails notes\n\nCopy\n"],"body":"You can add more default tags to search for by using config.annotations.register_tags. It receives a list of tags.","title":"1.11.2 Tags","anchor":"#tags"},{"code":["\nconfig.annotations.register_directories(\"spec\", \"vendor\")\n\nconfig.annotations.register_directories(\"spec\", \"vendor\")\n\nCopy\n","\n$ bin/rails notes\napp/controllers/admin/users_controller.rb:\n  * [ 20] [TODO] any other way to do this?\n  * [132] [FIXME] high priority for next deploy\n\nlib/school.rb:\n  * [ 13] [OPTIMIZE] Refactor this code to make it faster\n  * [ 17] [FIXME]\n\nspec/models/user_spec.rb:\n  * [122] [TODO] Verify the user that has a subscription works\n\nvendor/tools.rb:\n  * [ 56] [TODO] Get rid of this dependency\n\nbin/rails notes\n\nCopy\n"],"body":"You can add more default directories to search from by using config.annotations.register_directories. It receives a list of directory names.","title":"1.11.3 Directories","anchor":"#directories"},{"code":["\nconfig.annotations.register_extensions(\"scss\", \"sass\") { |annotation| /\\/\\/\\s*(#{annotation}):?\\s*(.*)$/ }\n\nconfig.annotations.register_extensions(\"scss\", \"sass\") { |annotation| /\\/\\/\\s*(#{annotation}):?\\s*(.*)$/ }\n\nCopy\n","\n$ bin/rails notes\napp/controllers/admin/users_controller.rb:\n  * [ 20] [TODO] any other way to do this?\n  * [132] [FIXME] high priority for next deploy\n\napp/assets/stylesheets/application.css.sass:\n  * [ 34] [TODO] Use pseudo element for this class\n\napp/assets/stylesheets/application.css.scss:\n  * [  1] [TODO] Split into multiple components\n\nlib/school.rb:\n  * [ 13] [OPTIMIZE] Refactor this code to make it faster\n  * [ 17] [FIXME]\n\nspec/models/user_spec.rb:\n  * [122] [TODO] Verify the user that has a subscription works\n\nvendor/tools.rb:\n  * [ 56] [TODO] Get rid of this dependency\n\nbin/rails notes\n\nCopy\n"],"body":"You can add more default file extensions to search from by using config.annotations.register_extensions. It receives a list of extensions with its corresponding regex to match it up.","title":"1.11.4 Extensions","anchor":"#extensions"},{"code":[],"body":"bin/rails routes will list all of your defined routes, which is useful for tracking down routing problems in your app, or giving you a good overview of the URLs in an app you're trying to get familiar with.","title":"1.12 bin/rails routes","anchor":"#bin-rails-routes"},{"title":"1.13 bin/rails test","anchor":"#bin-rails-test","code":[],"body":"Rails comes with a test framework called minitest. Rails owes its stability to the use of tests. The commands available in the test: namespace helps in running the different tests you will hopefully write."},{"title":"1.14 bin/rails tmp:","anchor":"#bin-rails-tmp","code":[],"body":"The Rails.root/tmp directory is, like the *nix /tmp directory, the holding place for temporary files like process id files and cached actions.The tmp: namespaced commands will help you clear and create the Rails.root/tmp directory:"},{"code":[],"body":"","title":"1.15 Miscellaneous","anchor":"#miscellaneous"},{"code":["\ndesc \"I am short, but comprehensive description for my cool task\"\ntask task_name: [:prerequisite_task, :another_task_we_depend_on] do\n  # All your magic here\n  # Any valid Ruby code is allowed\nend\n\ndesc \"I am short, but comprehensive description for my cool task\"\ntask task_name: [:prerequisite_task, :another_task_we_depend_on] do\n  # All your magic here\n  # Any valid Ruby code is allowed\nend\n\nCopy\n","\ntask :task_name, [:arg_1] => [:prerequisite_1, :prerequisite_2] do |task, args|\n  argument_1 = args.arg_1\nend\n\ntask :task_name, [:arg_1] => [:prerequisite_1, :prerequisite_2] do |task, args|\n  argument_1 = args.arg_1\nend\n\nCopy\n","\nnamespace :db do\n  desc \"This task does nothing\"\n  task :nothing do\n    # Seriously, nothing\n  end\nend\n\nnamespace :db do\n  desc \"This task does nothing\"\n  task :nothing do\n    # Seriously, nothing\n  end\nend\n\nCopy\n","\n$ bin/rails task_name\n$ bin/rails \"task_name[value 1]\" # entire argument string should be quoted\n$ bin/rails db:nothing\n\nbin/rails task_name\nbin/rails \"task_name[value 1]\" # entire argument string should be quoted\nbin/rails db:nothing\n\nCopy\n"],"body":"Custom rake tasks have a .rake extension and are placed in\nRails.root/lib/tasks. You can create these custom rake tasks with the\nbin/rails generate task command.To pass arguments to your custom rake task:You can group tasks by placing them in namespaces:Invocation of the tasks will look like:","title":"1.16 Custom Rake Tasks","anchor":"#custom-rake-tasks"},{"title":"2 The Rails Advanced Command Line","anchor":"#the-rails-advanced-command-line","code":[],"body":"More advanced use of the command line is focused around finding useful (even surprising at times) options in the utilities, and fitting those to your needs and specific work flow. Listed here are some tricks up Rails' sleeve."},{"title":"2.1 Rails with Databases and SCM","anchor":"#rails-with-databases-and-scm","code":["\n$ mkdir gitapp\n$ cd gitapp\n$ git init\nInitialized empty Git repository in .git/\n$ rails new . --git --database=postgresql\n      exists\n      create  app/controllers\n      create  app/helpers\n...\n...\n      create  tmp/cache\n      create  tmp/pids\n      create  Rakefile\nadd 'Rakefile'\n      create  README.md\nadd 'README.md'\n      create  app/controllers/application_controller.rb\nadd 'app/controllers/application_controller.rb'\n      create  app/helpers/application_helper.rb\n...\n      create  log/test.log\nadd 'log/test.log'\n\nmkdir gitapp\ncd gitapp\ngit init\nrails new . --git --database=postgresql\n\nCopy\n","\n$ cat config/database.yml\n# PostgreSQL. Versions 9.3 and up are supported.\n#\n# Install the pg driver:\n#   gem install pg\n# On macOS with Homebrew:\n#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config\n# On macOS with MacPorts:\n#   gem install pg -- --with-pg-config=/opt/local/lib/postgresql84/bin/pg_config\n# On Windows:\n#   gem install pg\n#       Choose the win32 build.\n#       Install PostgreSQL and put its /bin directory on your path.\n#\n# Configure Using Gemfile\n# gem 'pg'\n#\ndefault: &default\n  adapter: postgresql\n  encoding: unicode\n  # For details on connection pooling, see Rails configuration guide\n  # https://guides.rubyonrails.org/configuring.html#database-pooling\n  pool: <%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %>\n\ndevelopment:\n  <<: *default\n  database: gitapp_development\n...\n...\n\ncat config/database.yml\n\nCopy\n"],"body":"When creating a new Rails application, you have the option to specify what kind of database and what kind of source code management system your application is going to use. This will save you a few minutes, and certainly many keystrokes.Let's see what a --git option and a --database=postgresql option will do for us:We had to create the gitapp directory and initialize an empty git repository before Rails would add files it created to our repository. Let's see what it put in our database configuration:It also generated some lines in our database.yml configuration corresponding to our choice of PostgreSQL for database."}]