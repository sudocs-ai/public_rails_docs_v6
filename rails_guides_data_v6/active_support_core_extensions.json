[{"code":[],"body":"","title":"1 How to Load Core Extensions","anchor":"#how-to-load-core-extensions"},{"title":"1.1 Stand-Alone Active Support","anchor":"#stand-alone-active-support","code":["\nrequire \"active_support\"\n\nrequire \"active_support\"\n\nCopy\n"],"body":"In order to have a near-zero default footprint, Active Support does not load anything by default. It is broken in small pieces so that you can load just what you need, and also has some convenience entry points to load related extensions in one shot, even everything.Thus, after a simple require like:objects do not even respond to blank?. Let's see how to load its definition."},{"title":"1.1.1 Cherry-picking a Definition","anchor":"#cherry-picking-a-definition","code":["\nrequire \"active_support\"\nrequire \"active_support/core_ext/object/blank\"\n\nrequire \"active_support\"\nrequire \"active_support/core_ext/object/blank\"\n\nCopy\n"],"body":"The most lightweight way to get blank? is to cherry-pick the file that defines it.For every single method defined as a core extension this guide has a note that says where such a method is defined. In the case of blank? the note reads:That means that you can require it like this:Active Support has been carefully revised so that cherry-picking a file loads only strictly needed dependencies, if any."},{"title":"1.1.2 Loading Grouped Core Extensions","anchor":"#loading-grouped-core-extensions","code":["\nrequire \"active_support\"\nrequire \"active_support/core_ext/object\"\n\nrequire \"active_support\"\nrequire \"active_support/core_ext/object\"\n\nCopy\n"],"body":"The next level is to simply load all extensions to Object. As a rule of thumb, extensions to SomeClass are available in one shot by loading active_support/core_ext/some_class.Thus, to load all extensions to Object (including blank?):"},{"code":["\nrequire \"active_support\"\nrequire \"active_support/core_ext\"\n\nrequire \"active_support\"\nrequire \"active_support/core_ext\"\n\nCopy\n"],"body":"You may prefer just to load all core extensions, there is a file for that:","title":"1.1.3 Loading All Core Extensions","anchor":"#loading-all-core-extensions"},{"code":["\nrequire \"active_support/all\"\n\nrequire \"active_support/all\"\n\nCopy\n"],"body":"And finally, if you want to have all Active Support available just issue:That does not even put the entire Active Support in memory upfront indeed, some stuff is configured via autoload, so it is only loaded if used.","title":"1.1.4 Loading All Active Support","anchor":"#loading-all-active-support"},{"title":"1.2 Active Support Within a Ruby on Rails Application","anchor":"#active-support-within-a-ruby-on-rails-application","code":[],"body":"A Ruby on Rails application loads all Active Support unless config.active_support.bare is true. In that case, the application will only load what the framework itself cherry-picks for its own needs, and can still cherry-pick itself at any granularity level, as explained in the previous section."},{"title":"2 Extensions to All Objects","anchor":"#extensions-to-all-objects","code":[],"body":""},{"title":"2.1 blank? and present?","anchor":"#blank-questionmark-and-present-questionmark","code":["\ndef authenticate(controller, &login_procedure)\n  token, options = token_and_options(controller.request)\n  unless token.blank?\n    login_procedure.call(token, options)\n  end\nend\n\ndef authenticate(controller, &login_procedure)\n  token, options = token_and_options(controller.request)\n  unless token.blank?\n    login_procedure.call(token, options)\n  end\nend\n\nCopy\n","\ndef set_conditional_cache_control!\n  return if self[\"Cache-Control\"].present?\n  # ...\nend\n\ndef set_conditional_cache_control!\n  return if self[\"Cache-Control\"].present?\n  # ...\nend\n\nCopy\n"],"body":"The following values are considered to be blank in a Rails application:For example, this method from ActionController::HttpAuthentication::Token::ControllerMethods uses blank? for checking whether a token is present:The method present? is equivalent to !blank?. This example is taken from ActionDispatch::Http::Cache::Response:"},{"title":"2.2 presence","anchor":"#presence","code":["\nhost = config[:host].presence || 'localhost'\n\nhost = config[:host].presence || 'localhost'\n\nCopy\n"],"body":"The presence method returns its receiver if present?, and nil otherwise. It is useful for idioms like this:"},{"title":"2.3 duplicable?","anchor":"#duplicable-questionmark","code":["\n\"foo\".dup           # => \"foo\"\n\"\".dup              # => \"\"\nRational(1).dup     # => (1/1)\nComplex(0).dup      # => (0+0i)\n1.method(:+).dup    # => TypeError (allocator undefined for Method)\n\n\"foo\".dup           # => \"foo\"\n\"\".dup              # => \"\"\nRational(1).dup     # => (1/1)\nComplex(0).dup      # => (0+0i)\n1.method(:+).dup    # => TypeError (allocator undefined for Method)\n\nCopy\n","\n\"foo\".duplicable?           # => true\n\"\".duplicable?              # => true\nRational(1).duplicable?     # => true\nComplex(1).duplicable?      # => true\n1.method(:+).duplicable?    # => false\n\n\"foo\".duplicable?           # => true\n\"\".duplicable?              # => true\nRational(1).duplicable?     # => true\nComplex(1).duplicable?      # => true\n1.method(:+).duplicable?    # => false\n\nCopy\n"],"body":"As of Ruby 2.5, most objects can be duplicated via dup or clone:Active Support provides duplicable? to query an object about this:"},{"title":"2.4 deep_dup","anchor":"#deep-dup","code":["\narray     = ['string']\nduplicate = array.dup\n\nduplicate.push 'another-string'\n\n# the object was duplicated, so the element was added only to the duplicate\narray     # => ['string']\nduplicate # => ['string', 'another-string']\n\nduplicate.first.gsub!('string', 'foo')\n\n# first element was not duplicated, it will be changed in both arrays\narray     # => ['foo']\nduplicate # => ['foo', 'another-string']\n\narray     = ['string']\nduplicate = array.dup\n\nduplicate.push 'another-string'\n\n# the object was duplicated, so the element was added only to the duplicate\narray     # => ['string']\nduplicate # => ['string', 'another-string']\n\nduplicate.first.gsub!('string', 'foo')\n\n# first element was not duplicated, it will be changed in both arrays\narray     # => ['foo']\nduplicate # => ['foo', 'another-string']\n\nCopy\n","\narray     = ['string']\nduplicate = array.deep_dup\n\nduplicate.first.gsub!('string', 'foo')\n\narray     # => ['string']\nduplicate # => ['foo']\n\narray     = ['string']\nduplicate = array.deep_dup\n\nduplicate.first.gsub!('string', 'foo')\n\narray     # => ['string']\nduplicate # => ['foo']\n\nCopy\n","\nnumber = 1\nduplicate = number.deep_dup\nnumber.object_id == duplicate.object_id   # => true\n\nnumber = 1\nduplicate = number.deep_dup\nnumber.object_id == duplicate.object_id   # => true\n\nCopy\n"],"body":"The deep_dup method returns a deep copy of a given object. Normally, when you dup an object that contains other objects, Ruby does not dup them, so it creates a shallow copy of the object. If you have an array with a string, for example, it will look like this:As you can see, after duplicating the Array instance, we got another object, therefore we can modify it and the original object will stay unchanged. This is not true for array's elements, however. Since dup does not make a deep copy, the string inside the array is still the same object.If you need a deep copy of an object, you should use deep_dup. Here is an example:If the object is not duplicable, deep_dup will just return it:"},{"title":"2.5 try","anchor":"#try","code":["\n# without try\nunless @number.nil?\n  @number.next\nend\n\n# with try\n@number.try(:next)\n\n# without try\nunless @number.nil?\n  @number.next\nend\n\n# with try\n@number.try(:next)\n\nCopy\n","\ndef log_info(sql, name, ms)\n  if @logger.try(:debug?)\n    name = '%s (%.1fms)' % [name || 'SQL', ms]\n    @logger.debug(format_log_entry(name, sql.squeeze(' ')))\n  end\nend\n\ndef log_info(sql, name, ms)\n  if @logger.try(:debug?)\n    name = '%s (%.1fms)' % [name || 'SQL', ms]\n    @logger.debug(format_log_entry(name, sql.squeeze(' ')))\n  end\nend\n\nCopy\n","\n@person.try { |p| \"#{p.first_name} #{p.last_name}\" }\n\n@person.try { |p| \"#{p.first_name} #{p.last_name}\" }\n\nCopy\n","\n@number.try(:nest)  # => nil\n@number.try!(:nest) # NoMethodError: undefined method `nest' for 1:Integer\n\n@number.try(:nest)  # => nil\n@number.try!(:nest) # NoMethodError: undefined method `nest' for 1:Integer\n\nCopy\n"],"body":"When you want to call a method on an object only if it is not nil, the simplest way to achieve it is with conditional statements, adding unnecessary clutter. The alternative is to use try. try is like Object#send except that it returns nil if sent to nil.Here is an example:Another example is this code from ActiveRecord::ConnectionAdapters::AbstractAdapter where @logger could be nil. You can see that the code uses try and avoids an unnecessary check.try can also be called without arguments but a block, which will only be executed if the object is not nil:Note that try will swallow no-method errors, returning nil instead. If you want to protect against typos, use try! instead:"},{"title":"2.6 class_eval(*args, &block)","anchor":"#class-eval-args-block","code":["\nclass Proc\n  def bind(object)\n    block, time = self, Time.current\n    object.class_eval do\n      method_name = \"__bind_#{time.to_i}_#{time.usec}\"\n      define_method(method_name, &block)\n      method = instance_method(method_name)\n      remove_method(method_name)\n      method\n    end.bind(object)\n  end\nend\n\nclass Proc\n  def bind(object)\n    block, time = self, Time.current\n    object.class_eval do\n      method_name = \"__bind_#{time.to_i}_#{time.usec}\"\n      define_method(method_name, &block)\n      method = instance_method(method_name)\n      remove_method(method_name)\n      method\n    end.bind(object)\n  end\nend\n\nCopy\n"],"body":"You can evaluate code in the context of any object's singleton class using class_eval:"},{"title":"2.7 acts_like?(duck)","anchor":"#acts-like-questionmark-duck","code":["\ndef acts_like_string?\nend\n\ndef acts_like_string?\nend\n\nCopy\n","\nsome_klass.acts_like?(:string)\n\nsome_klass.acts_like?(:string)\n\nCopy\n"],"body":"The method acts_like? provides a way to check whether some class acts like some other class based on a simple convention: a class that provides the same interface as String defineswhich is only a marker, its body or return value are irrelevant. Then, client code can query for duck-type-safeness this way:Rails has classes that act like Date or Time and follow this contract."},{"title":"2.8 to_param","anchor":"#to-param","code":["\n7.to_param # => \"7\"\n\n7.to_param # => \"7\"\n\nCopy\n","\n\"Tom & Jerry\".to_param # => \"Tom & Jerry\"\n\n\"Tom & Jerry\".to_param # => \"Tom & Jerry\"\n\nCopy\n","\n[0, true, String].to_param # => \"0/true/String\"\n\n[0, true, String].to_param # => \"0/true/String\"\n\nCopy\n","\nclass User\n  def to_param\n    \"#{id}-#{name.parameterize}\"\n  end\nend\n\nclass User\n  def to_param\n    \"#{id}-#{name.parameterize}\"\n  end\nend\n\nCopy\n","\nuser_path(@user) # => \"/users/357-john-smith\"\n\nuser_path(@user) # => \"/users/357-john-smith\"\n\nCopy\n"],"body":"All objects in Rails respond to the method to_param, which is meant to return something that represents them as values in a query string, or as URL fragments.By default to_param just calls to_s:The return value of to_param should not be escaped:Several classes in Rails overwrite this method.For example nil, true, and false return themselves. Array#to_param calls to_param on the elements and joins the result with \"/\":Notably, the Rails routing system calls to_param on models to get a value for the :id placeholder. ActiveRecord::Base#to_param returns the id of a model, but you can redefine that method in your models. For example, givenwe get:"},{"title":"2.9 to_query","anchor":"#to-query","code":["\nclass User\n  def to_param\n    \"#{id}-#{name.parameterize}\"\n  end\nend\n\nclass User\n  def to_param\n    \"#{id}-#{name.parameterize}\"\n  end\nend\n\nCopy\n","\ncurrent_user.to_query('user') # => \"user=357-john-smith\"\n\ncurrent_user.to_query('user') # => \"user=357-john-smith\"\n\nCopy\n","\naccount.to_query('company[name]')\n# => \"company%5Bname%5D=Johnson+%26+Johnson\"\n\naccount.to_query('company[name]')\n# => \"company%5Bname%5D=Johnson+%26+Johnson\"\n\nCopy\n","\n[3.4, -45.6].to_query('sample')\n# => \"sample%5B%5D=3.4&sample%5B%5D=-45.6\"\n\n[3.4, -45.6].to_query('sample')\n# => \"sample%5B%5D=3.4&sample%5B%5D=-45.6\"\n\nCopy\n","\n{c: 3, b: 2, a: 1}.to_query # => \"a=1&b=2&c=3\"\n\n{c: 3, b: 2, a: 1}.to_query # => \"a=1&b=2&c=3\"\n\nCopy\n","\n{id: 89, name: \"John Smith\"}.to_query('user')\n# => \"user%5Bid%5D=89&user%5Bname%5D=John+Smith\"\n\n{id: 89, name: \"John Smith\"}.to_query('user')\n# => \"user%5Bid%5D=89&user%5Bname%5D=John+Smith\"\n\nCopy\n"],"body":"The to_query method constructs a query string that associates a given key with the return value of to_param. For example, with the following to_param definition:we get:This method escapes whatever is needed, both for the key and the value:so its output is ready to be used in a query string.Arrays return the result of applying to_query to each element with key[] as key, and join the result with \"&\":Hashes also respond to to_query but with a different signature. If no argument is passed a call generates a sorted series of key/value assignments calling to_query(key) on its values. Then it joins the result with \"&\":The method Hash#to_query accepts an optional namespace for the keys:"},{"title":"2.10 with_options","anchor":"#with-options","code":["\nclass Account < ApplicationRecord\n  has_many :customers, dependent: :destroy\n  has_many :products,  dependent: :destroy\n  has_many :invoices,  dependent: :destroy\n  has_many :expenses,  dependent: :destroy\nend\n\nclass Account < ApplicationRecord\n  has_many :customers, dependent: :destroy\n  has_many :products,  dependent: :destroy\n  has_many :invoices,  dependent: :destroy\n  has_many :expenses,  dependent: :destroy\nend\n\nCopy\n","\nclass Account < ApplicationRecord\n  with_options dependent: :destroy do |assoc|\n    assoc.has_many :customers\n    assoc.has_many :products\n    assoc.has_many :invoices\n    assoc.has_many :expenses\n  end\nend\n\nclass Account < ApplicationRecord\n  with_options dependent: :destroy do |assoc|\n    assoc.has_many :customers\n    assoc.has_many :products\n    assoc.has_many :invoices\n    assoc.has_many :expenses\n  end\nend\n\nCopy\n","\nI18n.with_options locale: user.locale, scope: \"newsletter\" do |i18n|\n  subject i18n.t :subject\n  body    i18n.t :body, user_name: user.name\nend\n\nI18n.with_options locale: user.locale, scope: \"newsletter\" do |i18n|\n  subject i18n.t :subject\n  body    i18n.t :body, user_name: user.name\nend\n\nCopy\n"],"body":"The method with_options provides a way to factor out common options in a series of method calls.Given a default options hash, with_options yields a proxy object to a block. Within the block, methods called on the proxy are forwarded to the receiver with their options merged. For example, you get rid of the duplication in:this way:That idiom may convey grouping to the reader as well. For example, say you want to send a newsletter whose language depends on the user. Somewhere in the mailer you could group locale-dependent bits like this:"},{"title":"2.11 JSON support","anchor":"#json-support","code":[],"body":"Active Support provides a better implementation of to_json than the json gem ordinarily provides for Ruby objects. This is because some classes, like Hash, OrderedHash and Process::Status need special handling in order to provide a proper JSON representation."},{"title":"2.12 Instance Variables","anchor":"#instance-variables","code":[],"body":"Active Support provides several methods to ease access to instance variables."},{"title":"2.12.1 instance_values","anchor":"#instance-values","code":["\nclass C\n  def initialize(x, y)\n    @x, @y = x, y\n  end\nend\n\nC.new(0, 1).instance_values # => {\"x\" => 0, \"y\" => 1}\n\nclass C\n  def initialize(x, y)\n    @x, @y = x, y\n  end\nend\n\nC.new(0, 1).instance_values # => {\"x\" => 0, \"y\" => 1}\n\nCopy\n"],"body":"The method instance_values returns a hash that maps instance variable names without \"@\" to their\ncorresponding values. Keys are strings:"},{"title":"2.12.2 instance_variable_names","anchor":"#instance-variable-names","code":["\nclass C\n  def initialize(x, y)\n    @x, @y = x, y\n  end\nend\n\nC.new(0, 1).instance_variable_names # => [\"@x\", \"@y\"]\n\nclass C\n  def initialize(x, y)\n    @x, @y = x, y\n  end\nend\n\nC.new(0, 1).instance_variable_names # => [\"@x\", \"@y\"]\n\nCopy\n"],"body":"The method instance_variable_names returns an array. Each name includes the \"@\" sign."},{"title":"2.13 Silencing Warnings and Exceptions","anchor":"#silencing-warnings-and-exceptions","code":["\nsilence_warnings { Object.const_set \"RAILS_DEFAULT_LOGGER\", logger }\n\nsilence_warnings { Object.const_set \"RAILS_DEFAULT_LOGGER\", logger }\n\nCopy\n","\n# If the user is locked, the increment is lost, no big deal.\nsuppress(ActiveRecord::StaleObjectError) do\n  current_user.increment! :visits\nend\n\n# If the user is locked, the increment is lost, no big deal.\nsuppress(ActiveRecord::StaleObjectError) do\n  current_user.increment! :visits\nend\n\nCopy\n"],"body":"The methods silence_warnings and enable_warnings change the value of $VERBOSE accordingly for the duration of their block, and reset it afterwards:Silencing exceptions is also possible with suppress. This method receives an arbitrary number of exception classes. If an exception is raised during the execution of the block and is kind_of? any of the arguments, suppress captures it and returns silently. Otherwise the exception is not captured:"},{"title":"2.14 in?","anchor":"#in-questionmark","code":["\n1.in?([1,2])        # => true\n\"lo\".in?(\"hello\")   # => true\n25.in?(30..50)      # => false\n1.in?(1)            # => ArgumentError\n\n1.in?([1,2])        # => true\n\"lo\".in?(\"hello\")   # => true\n25.in?(30..50)      # => false\n1.in?(1)            # => ArgumentError\n\nCopy\n"],"body":"The predicate in? tests if an object is included in another object. An ArgumentError exception will be raised if the argument passed does not respond to include?.Examples of in?:"},{"title":"3 Extensions to Module","anchor":"#extensions-to-module","code":[],"body":""},{"title":"3.1 Attributes","anchor":"#attributes","code":[],"body":""},{"title":"3.1.1 alias_attribute","anchor":"#alias-attribute","code":["\nclass User < ApplicationRecord\n  # You can refer to the email column as \"login\".\n  # This can be meaningful for authentication code.\n  alias_attribute :login, :email\nend\n\nclass User < ApplicationRecord\n  # You can refer to the email column as \"login\".\n  # This can be meaningful for authentication code.\n  alias_attribute :login, :email\nend\n\nCopy\n"],"body":"Model attributes have a reader, a writer, and a predicate. You can alias a model attribute having the corresponding three methods all defined for you by using alias_attribute. As in other aliasing methods, the new name is the first argument, and the old name is the second (one mnemonic is that they go in the same order as if you did an assignment):"},{"title":"3.1.2 Internal Attributes","anchor":"#internal-attributes","code":["\n# library\nclass ThirdPartyLibrary::Crawler\n  attr_internal :log_level\nend\n\n# client code\nclass MyCrawler < ThirdPartyLibrary::Crawler\n  attr_accessor :log_level\nend\n\n# library\nclass ThirdPartyLibrary::Crawler\n  attr_internal :log_level\nend\n\n# client code\nclass MyCrawler < ThirdPartyLibrary::Crawler\n  attr_accessor :log_level\nend\n\nCopy\n","\nmodule ActionView\n  class Base\n    attr_internal :captures\n    attr_internal :request, :layout\n    attr_internal :controller, :template\n  end\nend\n\nmodule ActionView\n  class Base\n    attr_internal :captures\n    attr_internal :request, :layout\n    attr_internal :controller, :template\n  end\nend\n\nCopy\n"],"body":"When you are defining an attribute in a class that is meant to be subclassed, name collisions are a risk. That's remarkably important for libraries.Active Support defines the macros attr_internal_reader, attr_internal_writer, and attr_internal_accessor. They behave like their Ruby built-in attr_* counterparts, except they name the underlying instance variable in a way that makes collisions less likely.The macro attr_internal is a synonym for attr_internal_accessor:In the previous example it could be the case that :log_level does not belong to the public interface of the library and it is only used for development. The client code, unaware of the potential conflict, subclasses and defines its own :log_level. Thanks to attr_internal there's no collision.By default the internal instance variable is named with a leading underscore, @_log_level in the example above. That's configurable via Module.attr_internal_naming_format though, you can pass any sprintf-like format string with a leading @ and a %s somewhere, which is where the name will be placed. The default is \"@_%s\".Rails uses internal attributes in a few spots, for examples for views:"},{"title":"3.1.3 Module Attributes","anchor":"#module-attributes","code":["\nmodule ActiveSupport\n  module Dependencies\n    mattr_accessor :warnings_on_first_load\n    mattr_accessor :history\n    mattr_accessor :loaded\n    mattr_accessor :mechanism\n    mattr_accessor :load_paths\n    mattr_accessor :load_once_paths\n    mattr_accessor :autoloaded_constants\n    mattr_accessor :explicitly_unloadable_constants\n    mattr_accessor :constant_watch_stack\n    mattr_accessor :constant_watch_stack_mutex\n  end\nend\n\nmodule ActiveSupport\n  module Dependencies\n    mattr_accessor :warnings_on_first_load\n    mattr_accessor :history\n    mattr_accessor :loaded\n    mattr_accessor :mechanism\n    mattr_accessor :load_paths\n    mattr_accessor :load_once_paths\n    mattr_accessor :autoloaded_constants\n    mattr_accessor :explicitly_unloadable_constants\n    mattr_accessor :constant_watch_stack\n    mattr_accessor :constant_watch_stack_mutex\n  end\nend\n\nCopy\n"],"body":"The macros mattr_reader, mattr_writer, and mattr_accessor are the same as the cattr_* macros defined for class. In fact, the cattr_* macros are just aliases for the mattr_* macros. Check Class Attributes.For example, the dependencies mechanism uses them:"},{"title":"3.2 Parents","anchor":"#parents","code":[],"body":""},{"title":"3.2.1 module_parent","anchor":"#module-parent","code":["\nmodule X\n  module Y\n    module Z\n    end\n  end\nend\nM = X::Y::Z\n\nX::Y::Z.module_parent # => X::Y\nM.module_parent       # => X::Y\n\nmodule X\n  module Y\n    module Z\n    end\n  end\nend\nM = X::Y::Z\n\nX::Y::Z.module_parent # => X::Y\nM.module_parent       # => X::Y\n\nCopy\n"],"body":"The module_parent method on a nested named module returns the module that contains its corresponding constant:If the module is anonymous or belongs to the top-level, module_parent returns Object."},{"title":"3.2.2 module_parent_name","anchor":"#module-parent-name","code":["\nmodule X\n  module Y\n    module Z\n    end\n  end\nend\nM = X::Y::Z\n\nX::Y::Z.module_parent_name # => \"X::Y\"\nM.module_parent_name       # => \"X::Y\"\n\nmodule X\n  module Y\n    module Z\n    end\n  end\nend\nM = X::Y::Z\n\nX::Y::Z.module_parent_name # => \"X::Y\"\nM.module_parent_name       # => \"X::Y\"\n\nCopy\n"],"body":"The module_parent_name method on a nested named module returns the fully qualified name of the module that contains its corresponding constant:For top-level or anonymous modules module_parent_name returns nil."},{"title":"3.2.3 module_parents","anchor":"#module-parents","code":["\nmodule X\n  module Y\n    module Z\n    end\n  end\nend\nM = X::Y::Z\n\nX::Y::Z.module_parents # => [X::Y, X, Object]\nM.module_parents       # => [X::Y, X, Object]\n\nmodule X\n  module Y\n    module Z\n    end\n  end\nend\nM = X::Y::Z\n\nX::Y::Z.module_parents # => [X::Y, X, Object]\nM.module_parents       # => [X::Y, X, Object]\n\nCopy\n"],"body":"The method module_parents calls module_parent on the receiver and upwards until Object is reached. The chain is returned in an array, from bottom to top:"},{"title":"3.3 Anonymous","anchor":"#anonymous","code":["\nmodule M\nend\nM.name # => \"M\"\n\nN = Module.new\nN.name # => \"N\"\n\nModule.new.name # => nil\n\nmodule M\nend\nM.name # => \"M\"\n\nN = Module.new\nN.name # => \"N\"\n\nModule.new.name # => nil\n\nCopy\n","\nmodule M\nend\nM.anonymous? # => false\n\nModule.new.anonymous? # => true\n\nmodule M\nend\nM.anonymous? # => false\n\nModule.new.anonymous? # => true\n\nCopy\n","\nmodule M\nend\n\nm = Object.send(:remove_const, :M)\n\nm.anonymous? # => false\n\nmodule M\nend\n\nm = Object.send(:remove_const, :M)\n\nm.anonymous? # => false\n\nCopy\n"],"body":"A module may or may not have a name:You can check whether a module has a name with the predicate anonymous?:Note that being unreachable does not imply being anonymous:though an anonymous module is unreachable by definition."},{"title":"3.4 Method Delegation","anchor":"#method-delegation","code":[],"body":""},{"title":"3.4.1 delegate","anchor":"#delegate","code":["\nclass User < ApplicationRecord\n  has_one :profile\nend\n\nclass User < ApplicationRecord\n  has_one :profile\nend\n\nCopy\n","\nclass User < ApplicationRecord\n  has_one :profile\n\n  def name\n    profile.name\n  end\nend\n\nclass User < ApplicationRecord\n  has_one :profile\n\n  def name\n    profile.name\n  end\nend\n\nCopy\n","\nclass User < ApplicationRecord\n  has_one :profile\n\n  delegate :name, to: :profile\nend\n\nclass User < ApplicationRecord\n  has_one :profile\n\n  delegate :name, to: :profile\nend\n\nCopy\n","\ndelegate :name, :age, :address, :twitter, to: :profile\n\ndelegate :name, :age, :address, :twitter, to: :profile\n\nCopy\n","\n# delegates to the Rails constant\ndelegate :logger, to: :Rails\n\n# delegates to the receiver's class\ndelegate :table_name, to: :class\n\n# delegates to the Rails constant\ndelegate :logger, to: :Rails\n\n# delegates to the receiver's class\ndelegate :table_name, to: :class\n\nCopy\n","\ndelegate :name, to: :profile, allow_nil: true\n\ndelegate :name, to: :profile, allow_nil: true\n\nCopy\n","\ndelegate :street, to: :address, prefix: true\n\ndelegate :street, to: :address, prefix: true\n\nCopy\n","\ndelegate :size, to: :attachment, prefix: :avatar\n\ndelegate :size, to: :attachment, prefix: :avatar\n\nCopy\n","\ndelegate :date_of_birth, to: :profile, private: true\n\ndelegate :date_of_birth, to: :profile, private: true\n\nCopy\n"],"body":"The macro delegate offers an easy way to forward methods.Let's imagine that users in some application have login information in the User model but name and other data in a separate Profile model:With that configuration you get a user's name via their profile, user.profile.name, but it could be handy to still be able to access such attribute directly:That is what delegate does for you:It is shorter, and the intention more obvious.The method must be public in the target.The delegate macro accepts several methods:When interpolated into a string, the :to option should become an expression that evaluates to the object the method is delegated to. Typically a string or symbol. Such an expression is evaluated in the context of the receiver:By default, if the delegation raises NoMethodError and the target is nil the exception is propagated. You can ask that nil is returned instead with the :allow_nil option:With :allow_nil the call user.name returns nil if the user has no profile.The option :prefix adds a prefix to the name of the generated method. This may be handy for example to get a better name:The previous example generates address_street rather than street.A custom prefix may also be configured:In the previous example the macro generates avatar_size rather than size.The option :private changes methods scope:The delegated methods are public by default. Pass private: true to change that."},{"title":"3.4.2 delegate_missing_to","anchor":"#delegate-missing-to","code":["\nclass User < ApplicationRecord\n  has_one :profile\n\n  delegate_missing_to :profile\nend\n\nclass User < ApplicationRecord\n  has_one :profile\n\n  delegate_missing_to :profile\nend\n\nCopy\n"],"body":"Imagine you would like to delegate everything missing from the User object,\nto the Profile one. The delegate_missing_to macro lets you implement this\nin a breeze:The target can be anything callable within the object, e.g. instance variables,\nmethods, constants, etc. Only the public methods of the target are delegated."},{"title":"3.5 Redefining Methods","anchor":"#redefining-methods","code":[],"body":"There are cases where you need to define a method with define_method, but don't know whether a method with that name already exists. If it does, a warning is issued if they are enabled. No big deal, but not clean either.The method redefine_method prevents such a potential warning, removing the existing method before if needed.You can also use silence_redefinition_of_method if you need to define\nthe replacement method yourself (because you're using delegate, for\nexample)."},{"title":"4 Extensions to Class","anchor":"#extensions-to-class","code":[],"body":""},{"title":"4.1 Class Attributes","anchor":"#class-attributes","code":[],"body":""},{"title":"4.1.1 class_attribute","anchor":"#class-attribute","code":["\nclass A\n  class_attribute :x\nend\n\nclass B < A; end\n\nclass C < B; end\n\nA.x = :a\nB.x # => :a\nC.x # => :a\n\nB.x = :b\nA.x # => :a\nC.x # => :b\n\nC.x = :c\nA.x # => :a\nB.x # => :b\n\nclass A\n  class_attribute :x\nend\n\nclass B < A; end\n\nclass C < B; end\n\nA.x = :a\nB.x # => :a\nC.x # => :a\n\nB.x = :b\nA.x # => :a\nC.x # => :b\n\nC.x = :c\nA.x # => :a\nB.x # => :b\n\nCopy\n","\nclass_attribute :default_params\nself.default_params = {\n  mime_version: \"1.0\",\n  charset: \"UTF-8\",\n  content_type: \"text/plain\",\n  parts_order: [ \"text/plain\", \"text/enriched\", \"text/html\" ]\n}.freeze\n\nclass_attribute :default_params\nself.default_params = {\n  mime_version: \"1.0\",\n  charset: \"UTF-8\",\n  content_type: \"text/plain\",\n  parts_order: [ \"text/plain\", \"text/enriched\", \"text/html\" ]\n}.freeze\n\nCopy\n","\nA.x = 1\n\na1 = A.new\na2 = A.new\na2.x = 2\n\na1.x # => 1, comes from A\na2.x # => 2, overridden in a2\n\nA.x = 1\n\na1 = A.new\na2 = A.new\na2.x = 2\n\na1.x # => 1, comes from A\na2.x # => 2, overridden in a2\n\nCopy\n","\nmodule ActiveRecord\n  class Base\n    class_attribute :table_name_prefix, instance_writer: false, default: \"my\"\n  end\nend\n\nmodule ActiveRecord\n  class Base\n    class_attribute :table_name_prefix, instance_writer: false, default: \"my\"\n  end\nend\n\nCopy\n","\nclass A\n  class_attribute :x, instance_reader: false\nend\n\nA.new.x = 1\nA.new.x # NoMethodError\n\nclass A\n  class_attribute :x, instance_reader: false\nend\n\nA.new.x = 1\nA.new.x # NoMethodError\n\nCopy\n"],"body":"The method class_attribute declares one or more inheritable class attributes that can be overridden at any level down the hierarchy.For example ActionMailer::Base defines:They can also be accessed and overridden at the instance level.The generation of the writer instance method can be prevented by setting the option :instance_writer to false.A model may find that option useful as a way to prevent mass-assignment from setting the attribute.The generation of the reader instance method can be prevented by setting the option :instance_reader to false.For convenience class_attribute also defines an instance predicate which is the double negation of what the instance reader returns. In the examples above it would be called x?.When :instance_reader is false, the instance predicate returns a NoMethodError just like the reader method.If you do not want the instance predicate, pass instance_predicate: false and it will not be defined."},{"title":"4.1.2 cattr_reader, cattr_writer, and cattr_accessor","anchor":"#cattr-reader-cattr-writer-and-cattr-accessor","code":["\nclass MysqlAdapter < AbstractAdapter\n  # Generates class methods to access @@emulate_booleans.\n  cattr_accessor :emulate_booleans\nend\n\nclass MysqlAdapter < AbstractAdapter\n  # Generates class methods to access @@emulate_booleans.\n  cattr_accessor :emulate_booleans\nend\n\nCopy\n","\nclass MysqlAdapter < AbstractAdapter\n  # Generates class methods to access @@emulate_booleans with default value of true.\n  cattr_accessor :emulate_booleans, default: true\nend\n\nclass MysqlAdapter < AbstractAdapter\n  # Generates class methods to access @@emulate_booleans with default value of true.\n  cattr_accessor :emulate_booleans, default: true\nend\n\nCopy\n","\nmodule ActionView\n  class Base\n    cattr_accessor :field_error_proc, default: Proc.new { ... }\n  end\nend\n\nmodule ActionView\n  class Base\n    cattr_accessor :field_error_proc, default: Proc.new { ... }\n  end\nend\n\nCopy\n","\nmodule A\n  class B\n    # No first_name instance reader is generated.\n    cattr_accessor :first_name, instance_reader: false\n    # No last_name= instance writer is generated.\n    cattr_accessor :last_name, instance_writer: false\n    # No surname instance reader or surname= writer is generated.\n    cattr_accessor :surname, instance_accessor: false\n  end\nend\n\nmodule A\n  class B\n    # No first_name instance reader is generated.\n    cattr_accessor :first_name, instance_reader: false\n    # No last_name= instance writer is generated.\n    cattr_accessor :last_name, instance_writer: false\n    # No surname instance reader or surname= writer is generated.\n    cattr_accessor :surname, instance_accessor: false\n  end\nend\n\nCopy\n"],"body":"The macros cattr_reader, cattr_writer, and cattr_accessor are analogous to their attr_* counterparts but for classes. They initialize a class variable to nil unless it already exists, and generate the corresponding class methods to access it:Also, you can pass a block to cattr_* to set up the attribute with a default value:Instance methods are created as well for convenience, they are just proxies to the class attribute. So, instances can change the class attribute, but cannot override it as it happens with class_attribute (see above). For example givenwe can access field_error_proc in views.The generation of the reader instance method can be prevented by setting :instance_reader to false and the generation of the writer instance method can be prevented by setting :instance_writer to false. Generation of both methods can be prevented by setting :instance_accessor to false. In all cases, the value must be exactly false and not any false value.A model may find it useful to set :instance_accessor to false as a way to prevent mass-assignment from setting the attribute."},{"title":"4.2 Subclasses and Descendants","anchor":"#subclasses-and-descendants","code":[],"body":""},{"title":"4.2.1 subclasses","anchor":"#subclasses","code":["\nclass C; end\nC.subclasses # => []\n\nclass B < C; end\nC.subclasses # => [B]\n\nclass A < B; end\nC.subclasses # => [B]\n\nclass D < C; end\nC.subclasses # => [B, D]\n\nclass C; end\nC.subclasses # => []\n\nclass B < C; end\nC.subclasses # => [B]\n\nclass A < B; end\nC.subclasses # => [B]\n\nclass D < C; end\nC.subclasses # => [B, D]\n\nCopy\n"],"body":"The subclasses method returns the subclasses of the receiver:The order in which these classes are returned is unspecified."},{"title":"4.2.2 descendants","anchor":"#descendants","code":["\nclass C; end\nC.descendants # => []\n\nclass B < C; end\nC.descendants # => [B]\n\nclass A < B; end\nC.descendants # => [B, A]\n\nclass D < C; end\nC.descendants # => [B, A, D]\n\nclass C; end\nC.descendants # => []\n\nclass B < C; end\nC.descendants # => [B]\n\nclass A < B; end\nC.descendants # => [B, A]\n\nclass D < C; end\nC.descendants # => [B, A, D]\n\nCopy\n"],"body":"The descendants method returns all classes that are < than its receiver:The order in which these classes are returned is unspecified."},{"title":"5 Extensions to String","anchor":"#extensions-to-string","code":[],"body":""},{"title":"5.1 Output Safety","anchor":"#output-safety","code":[],"body":""},{"title":"5.1.1 Motivation","anchor":"#motivation","code":[],"body":"Inserting data into HTML templates needs extra care. For example, you can't just interpolate @review.title verbatim into an HTML page. For one thing, if the review title is \"Flanagan & Matz rules!\" the output won't be well-formed because an ampersand has to be escaped as \"&amp;\". What's more, depending on the application, that may be a big security hole because users can inject malicious HTML setting a hand-crafted review title. Check out the section about cross-site scripting in the Security guide for further information about the risks."},{"title":"5.1.2 Safe Strings","anchor":"#safe-strings","code":["\n\"\".html_safe? # => false\n\n\"\".html_safe? # => false\n\nCopy\n","\ns = \"\".html_safe\ns.html_safe? # => true\n\ns = \"\".html_safe\ns.html_safe? # => true\n\nCopy\n","\ns = \"<script>...</script>\".html_safe\ns.html_safe? # => true\ns            # => \"<script>...</script>\"\n\ns = \"<script>...</script>\".html_safe\ns.html_safe? # => true\ns            # => \"<script>...</script>\"\n\nCopy\n","\n\"\".html_safe + \"<\" # => \"&lt;\"\n\n\"\".html_safe + \"<\" # => \"&lt;\"\n\nCopy\n","\n\"\".html_safe + \"<\".html_safe # => \"<\"\n\n\"\".html_safe + \"<\".html_safe # => \"<\"\n\nCopy\n","\n<%= @review.title %> <%# fine, escaped if needed %>\n\n<%= @review.title %> <%# fine, escaped if needed %>\n\nCopy\n","\n<%= raw @cms.current_template %> <%# inserts @cms.current_template as is %>\n\n<%= raw @cms.current_template %> <%# inserts @cms.current_template as is %>\n\nCopy\n","\n<%== @cms.current_template %> <%# inserts @cms.current_template as is %>\n\n<%== @cms.current_template %> <%# inserts @cms.current_template as is %>\n\nCopy\n","\ndef raw(stringish)\n  stringish.to_s.html_safe\nend\n\ndef raw(stringish)\n  stringish.to_s.html_safe\nend\n\nCopy\n"],"body":"Active Support has the concept of (html) safe strings. A safe string is one that is marked as being insertable into HTML as is. It is trusted, no matter whether it has been escaped or not.Strings are considered to be unsafe by default:You can obtain a safe string from a given one with the html_safe method:It is important to understand that html_safe performs no escaping whatsoever, it is just an assertion:It is your responsibility to ensure calling html_safe on a particular string is fine.If you append onto a safe string, either in-place with concat/<<, or with +, the result is a safe string. Unsafe arguments are escaped:Safe arguments are directly appended:These methods should not be used in ordinary views. Unsafe values are automatically escaped:To insert something verbatim use the raw helper rather than calling html_safe:or, equivalently, use <%==:The raw helper calls html_safe for you:"},{"title":"5.1.3 Transformation","anchor":"#transformation","code":[],"body":"As a rule of thumb, except perhaps for concatenation as explained above, any method that may change a string gives you an unsafe string. These are downcase, gsub, strip, chomp, underscore, etc.In the case of in-place transformations like gsub! the receiver itself becomes unsafe."},{"title":"5.1.4 Conversion and Coercion","anchor":"#conversion-and-coercion","code":[],"body":"Calling to_s on a safe string returns a safe string, but coercion with to_str returns an unsafe string."},{"title":"5.1.5 Copying","anchor":"#copying","code":[],"body":"Calling dup or clone on safe strings yields safe strings."},{"title":"5.2 remove","anchor":"#remove","code":["\n\"Hello World\".remove(/Hello /) # => \"World\"\n\n\"Hello World\".remove(/Hello /) # => \"World\"\n\nCopy\n"],"body":"The method remove will remove all occurrences of the pattern:There's also the destructive version String#remove!."},{"title":"5.3 squish","anchor":"#squish","code":["\n\" \\n  foo\\n\\r \\t bar \\n\".squish # => \"foo bar\"\n\n\" \\n  foo\\n\\r \\t bar \\n\".squish # => \"foo bar\"\n\nCopy\n"],"body":"The method squish strips leading and trailing whitespace, and substitutes runs of whitespace with a single space each:There's also the destructive version String#squish!.Note that it handles both ASCII and Unicode whitespace."},{"title":"5.4 truncate","anchor":"#truncate","code":["\n\"Oh dear! Oh dear! I shall be late!\".truncate(20)\n# => \"Oh dear! Oh dear!...\"\n\n\"Oh dear! Oh dear! I shall be late!\".truncate(20)\n# => \"Oh dear! Oh dear!...\"\n\nCopy\n","\n\"Oh dear! Oh dear! I shall be late!\".truncate(20, omission: '&hellip;')\n# => \"Oh dear! Oh &hellip;\"\n\n\"Oh dear! Oh dear! I shall be late!\".truncate(20, omission: '&hellip;')\n# => \"Oh dear! Oh &hellip;\"\n\nCopy\n","\n\"Oh dear! Oh dear! I shall be late!\".truncate(18)\n# => \"Oh dear! Oh dea...\"\n\"Oh dear! Oh dear! I shall be late!\".truncate(18, separator: ' ')\n# => \"Oh dear! Oh...\"\n\n\"Oh dear! Oh dear! I shall be late!\".truncate(18)\n# => \"Oh dear! Oh dea...\"\n\"Oh dear! Oh dear! I shall be late!\".truncate(18, separator: ' ')\n# => \"Oh dear! Oh...\"\n\nCopy\n","\n\"Oh dear! Oh dear! I shall be late!\".truncate(18, separator: /\\s/)\n# => \"Oh dear! Oh...\"\n\n\"Oh dear! Oh dear! I shall be late!\".truncate(18, separator: /\\s/)\n# => \"Oh dear! Oh...\"\n\nCopy\n"],"body":"The method truncate returns a copy of its receiver truncated after a given length:Ellipsis can be customized with the :omission option:Note in particular that truncation takes into account the length of the omission string.Pass a :separator to truncate the string at a natural break:The option :separator can be a regexp:In above examples \"dear\" gets cut first, but then :separator prevents it."},{"title":"5.5 truncate_bytes","anchor":"#truncate-bytes","code":["\n\"👍👍👍👍\".truncate_bytes(15)\n# => \"👍👍👍…\"\n\n\"👍👍👍👍\".truncate_bytes(15)\n# => \"👍👍👍…\"\n\nCopy\n","\n\"👍👍👍👍\".truncate_bytes(15, omission: \"🖖\")\n# => \"👍👍🖖\"\n\n\"👍👍👍👍\".truncate_bytes(15, omission: \"🖖\")\n# => \"👍👍🖖\"\n\nCopy\n"],"body":"The method truncate_bytes returns a copy of its receiver truncated to at most bytesize bytes:Ellipsis can be customized with the :omission option:"},{"title":"5.6 truncate_words","anchor":"#truncate-words","code":["\n\"Oh dear! Oh dear! I shall be late!\".truncate_words(4)\n# => \"Oh dear! Oh dear!...\"\n\n\"Oh dear! Oh dear! I shall be late!\".truncate_words(4)\n# => \"Oh dear! Oh dear!...\"\n\nCopy\n","\n\"Oh dear! Oh dear! I shall be late!\".truncate_words(4, omission: '&hellip;')\n# => \"Oh dear! Oh dear!&hellip;\"\n\n\"Oh dear! Oh dear! I shall be late!\".truncate_words(4, omission: '&hellip;')\n# => \"Oh dear! Oh dear!&hellip;\"\n\nCopy\n","\n\"Oh dear! Oh dear! I shall be late!\".truncate_words(3, separator: '!')\n# => \"Oh dear! Oh dear! I shall be late...\"\n\n\"Oh dear! Oh dear! I shall be late!\".truncate_words(3, separator: '!')\n# => \"Oh dear! Oh dear! I shall be late...\"\n\nCopy\n","\n\"Oh dear! Oh dear! I shall be late!\".truncate_words(4, separator: /\\s/)\n# => \"Oh dear! Oh dear!...\"\n\n\"Oh dear! Oh dear! I shall be late!\".truncate_words(4, separator: /\\s/)\n# => \"Oh dear! Oh dear!...\"\n\nCopy\n"],"body":"The method truncate_words returns a copy of its receiver truncated after a given number of words:Ellipsis can be customized with the :omission option:Pass a :separator to truncate the string at a natural break:The option :separator can be a regexp:"},{"title":"5.7 inquiry","anchor":"#inquiry","code":["\n\"production\".inquiry.production? # => true\n\"active\".inquiry.inactive?       # => false\n\n\"production\".inquiry.production? # => true\n\"active\".inquiry.inactive?       # => false\n\nCopy\n"],"body":"The inquiry method converts a string into a StringInquirer object making equality checks prettier."},{"title":"5.8 starts_with? and ends_with?","anchor":"#extensions-to-string-starts-with-questionmark-and-ends-with-questionmark","code":["\n\"foo\".starts_with?(\"f\") # => true\n\"foo\".ends_with?(\"o\")   # => true\n\n\"foo\".starts_with?(\"f\") # => true\n\"foo\".ends_with?(\"o\")   # => true\n\nCopy\n"],"body":"Active Support defines 3rd person aliases of String#start_with? and String#end_with?:"},{"title":"5.9 strip_heredoc","anchor":"#strip-heredoc","code":["\nif options[:usage]\n  puts <<-USAGE.strip_heredoc\n    This command does such and such.\n\n    Supported options are:\n      -h         This message\n      ...\n  USAGE\nend\n\nif options[:usage]\n  puts <<-USAGE.strip_heredoc\n    This command does such and such.\n\n    Supported options are:\n      -h         This message\n      ...\n  USAGE\nend\n\nCopy\n"],"body":"The method strip_heredoc strips indentation in heredocs.For example inthe user would see the usage message aligned against the left margin.Technically, it looks for the least indented line in the whole string, and removes\nthat amount of leading whitespace."},{"title":"5.10 indent","anchor":"#indent","code":["\n<<EOS.indent(2)\ndef some_method\n  some_code\nend\nEOS\n# =>\n  def some_method\n    some_code\n  end\n\n<<EOS.indent(2)\ndef some_method\n  some_code\nend\nEOS\n# =>\n  def some_method\n    some_code\n  end\n\nCopy\n","\n\"  foo\".indent(2)        # => \"    foo\"\n\"foo\\n\\t\\tbar\".indent(2) # => \"\\t\\tfoo\\n\\t\\t\\t\\tbar\"\n\"foo\".indent(2, \"\\t\")    # => \"\\t\\tfoo\"\n\n\"  foo\".indent(2)        # => \"    foo\"\n\"foo\\n\\t\\tbar\".indent(2) # => \"\\t\\tfoo\\n\\t\\t\\t\\tbar\"\n\"foo\".indent(2, \"\\t\")    # => \"\\t\\tfoo\"\n\nCopy\n","\n\"foo\\n\\nbar\".indent(2)            # => \"  foo\\n\\n  bar\"\n\"foo\\n\\nbar\".indent(2, nil, true) # => \"  foo\\n  \\n  bar\"\n\n\"foo\\n\\nbar\".indent(2)            # => \"  foo\\n\\n  bar\"\n\"foo\\n\\nbar\".indent(2, nil, true) # => \"  foo\\n  \\n  bar\"\n\nCopy\n"],"body":"The indent method indents the lines in the receiver:The second argument, indent_string, specifies which indent string to use. The default is nil, which tells the method to make an educated guess peeking at the first indented line, and fallback to a space if there is none.While indent_string is typically one space or tab, it may be any string.The third argument, indent_empty_lines, is a flag that says whether empty lines should be indented. Default is false.The indent! method performs indentation in-place."},{"title":"5.11 Access","anchor":"#access","code":[],"body":""},{"title":"5.11.1 at(position)","anchor":"#at-position","code":["\n\"hello\".at(0)  # => \"h\"\n\"hello\".at(4)  # => \"o\"\n\"hello\".at(-1) # => \"o\"\n\"hello\".at(10) # => nil\n\n\"hello\".at(0)  # => \"h\"\n\"hello\".at(4)  # => \"o\"\n\"hello\".at(-1) # => \"o\"\n\"hello\".at(10) # => nil\n\nCopy\n"],"body":"The at method returns the character of the string at position position:"},{"title":"5.11.2 from(position)","anchor":"#from-position","code":["\n\"hello\".from(0)  # => \"hello\"\n\"hello\".from(2)  # => \"llo\"\n\"hello\".from(-2) # => \"lo\"\n\"hello\".from(10) # => nil\n\n\"hello\".from(0)  # => \"hello\"\n\"hello\".from(2)  # => \"llo\"\n\"hello\".from(-2) # => \"lo\"\n\"hello\".from(10) # => nil\n\nCopy\n"],"body":"The from method returns the substring of the string starting at position position:"},{"title":"5.11.3 to(position)","anchor":"#to-position","code":["\n\"hello\".to(0)  # => \"h\"\n\"hello\".to(2)  # => \"hel\"\n\"hello\".to(-2) # => \"hell\"\n\"hello\".to(10) # => \"hello\"\n\n\"hello\".to(0)  # => \"h\"\n\"hello\".to(2)  # => \"hel\"\n\"hello\".to(-2) # => \"hell\"\n\"hello\".to(10) # => \"hello\"\n\nCopy\n"],"body":"The to method returns the substring of the string up to position position:"},{"title":"5.11.4 first(limit = 1)","anchor":"#first-limit-1","code":[],"body":"The first method returns a substring containing the first limit characters of the string.The call str.first(n) is equivalent to str.to(n-1) if n > 0, and returns an empty string for n == 0."},{"title":"5.11.5 last(limit = 1)","anchor":"#last-limit-1","code":[],"body":"The last method returns a substring containing the last limit characters of the string.The call str.last(n) is equivalent to str.from(-n) if n > 0, and returns an empty string for n == 0."},{"title":"5.12 Inflections","anchor":"#inflections","code":[],"body":""},{"title":"5.12.1 pluralize","anchor":"#pluralize","code":["\n\"table\".pluralize     # => \"tables\"\n\"ruby\".pluralize      # => \"rubies\"\n\"equipment\".pluralize # => \"equipment\"\n\n\"table\".pluralize     # => \"tables\"\n\"ruby\".pluralize      # => \"rubies\"\n\"equipment\".pluralize # => \"equipment\"\n\nCopy\n","\n\"dude\".pluralize(0) # => \"dudes\"\n\"dude\".pluralize(1) # => \"dude\"\n\"dude\".pluralize(2) # => \"dudes\"\n\n\"dude\".pluralize(0) # => \"dudes\"\n\"dude\".pluralize(1) # => \"dude\"\n\"dude\".pluralize(2) # => \"dudes\"\n\nCopy\n","\n# active_record/model_schema.rb\ndef undecorated_table_name(class_name = base_class.name)\n  table_name = class_name.to_s.demodulize.underscore\n  pluralize_table_names ? table_name.pluralize : table_name\nend\n\n# active_record/model_schema.rb\ndef undecorated_table_name(class_name = base_class.name)\n  table_name = class_name.to_s.demodulize.underscore\n  pluralize_table_names ? table_name.pluralize : table_name\nend\n\nCopy\n"],"body":"The method pluralize returns the plural of its receiver:As the previous example shows, Active Support knows some irregular plurals and uncountable nouns. Built-in rules can be extended in config/initializers/inflections.rb. This file is generated by default, by the rails new command and has instructions in comments.pluralize can also take an optional count parameter. If count == 1 the singular form will be returned. For any other value of count the plural form will be returned:Active Record uses this method to compute the default table name that corresponds to a model:"},{"title":"5.12.2 singularize","anchor":"#singularize","code":["\n\"tables\".singularize    # => \"table\"\n\"rubies\".singularize    # => \"ruby\"\n\"equipment\".singularize # => \"equipment\"\n\n\"tables\".singularize    # => \"table\"\n\"rubies\".singularize    # => \"ruby\"\n\"equipment\".singularize # => \"equipment\"\n\nCopy\n","\n# active_record/reflection.rb\ndef derive_class_name\n  class_name = name.to_s.camelize\n  class_name = class_name.singularize if collection?\n  class_name\nend\n\n# active_record/reflection.rb\ndef derive_class_name\n  class_name = name.to_s.camelize\n  class_name = class_name.singularize if collection?\n  class_name\nend\n\nCopy\n"],"body":"The singularize method is the inverse of pluralize:Associations compute the name of the corresponding default associated class using this method:"},{"title":"5.12.3 camelize","anchor":"#camelize","code":["\n\"product\".camelize    # => \"Product\"\n\"admin_user\".camelize # => \"AdminUser\"\n\n\"product\".camelize    # => \"Product\"\n\"admin_user\".camelize # => \"AdminUser\"\n\nCopy\n","\n\"backoffice/session\".camelize # => \"Backoffice::Session\"\n\n\"backoffice/session\".camelize # => \"Backoffice::Session\"\n\nCopy\n","\n# action_controller/metal/session_management.rb\ndef session_store=(store)\n  @@session_store = store.is_a?(Symbol) ?\n    ActionDispatch::Session.const_get(store.to_s.camelize) :\n    store\nend\n\n# action_controller/metal/session_management.rb\ndef session_store=(store)\n  @@session_store = store.is_a?(Symbol) ?\n    ActionDispatch::Session.const_get(store.to_s.camelize) :\n    store\nend\n\nCopy\n","\n\"visual_effect\".camelize(:lower) # => \"visualEffect\"\n\n\"visual_effect\".camelize(:lower) # => \"visualEffect\"\n\nCopy\n","\nActiveSupport::Inflector.inflections do |inflect|\n  inflect.acronym 'SSL'\nend\n\n\"SSLError\".underscore.camelize # => \"SSLError\"\n\nActiveSupport::Inflector.inflections do |inflect|\n  inflect.acronym 'SSL'\nend\n\n\"SSLError\".underscore.camelize # => \"SSLError\"\n\nCopy\n"],"body":"The method camelize returns its receiver in camel case:As a rule of thumb you can think of this method as the one that transforms paths into Ruby class or module names, where slashes separate namespaces:For example, Action Pack uses this method to load the class that provides a certain session store:camelize accepts an optional argument, it can be :upper (default), or :lower. With the latter the first letter becomes lowercase:That may be handy to compute method names in a language that follows that convention, for example JavaScript.camelize is aliased to camelcase."},{"title":"5.12.4 underscore","anchor":"#underscore","code":["\n\"Product\".underscore   # => \"product\"\n\"AdminUser\".underscore # => \"admin_user\"\n\n\"Product\".underscore   # => \"product\"\n\"AdminUser\".underscore # => \"admin_user\"\n\nCopy\n","\n\"Backoffice::Session\".underscore # => \"backoffice/session\"\n\n\"Backoffice::Session\".underscore # => \"backoffice/session\"\n\nCopy\n","\n\"visualEffect\".underscore # => \"visual_effect\"\n\n\"visualEffect\".underscore # => \"visual_effect\"\n\nCopy\n","\n# active_support/dependencies.rb\ndef load_missing_constant(from_mod, const_name)\n  # ...\n  qualified_name = qualified_name_for from_mod, const_name\n  path_suffix = qualified_name.underscore\n  # ...\nend\n\n# active_support/dependencies.rb\ndef load_missing_constant(from_mod, const_name)\n  # ...\n  qualified_name = qualified_name_for from_mod, const_name\n  path_suffix = qualified_name.underscore\n  # ...\nend\n\nCopy\n"],"body":"The method underscore goes the other way around, from camel case to paths:Also converts \"::\" back to \"/\":and understands strings that start with lowercase:underscore accepts no argument though.Rails class and module autoloading uses underscore to infer the relative path without extension of a file that would define a given missing constant:"},{"title":"5.12.5 titleize","anchor":"#titleize","code":["\n\"alice in wonderland\".titleize # => \"Alice In Wonderland\"\n\"fermat's enigma\".titleize     # => \"Fermat's Enigma\"\n\n\"alice in wonderland\".titleize # => \"Alice In Wonderland\"\n\"fermat's enigma\".titleize     # => \"Fermat's Enigma\"\n\nCopy\n"],"body":"The method titleize capitalizes the words in the receiver:titleize is aliased to titlecase."},{"title":"5.12.6 dasherize","anchor":"#dasherize","code":["\n\"name\".dasherize         # => \"name\"\n\"contact_data\".dasherize # => \"contact-data\"\n\n\"name\".dasherize         # => \"name\"\n\"contact_data\".dasherize # => \"contact-data\"\n\nCopy\n","\n# active_model/serializers/xml.rb\ndef reformat_name(name)\n  name = name.camelize if camelize?\n  dasherize? ? name.dasherize : name\nend\n\n# active_model/serializers/xml.rb\ndef reformat_name(name)\n  name = name.camelize if camelize?\n  dasherize? ? name.dasherize : name\nend\n\nCopy\n"],"body":"The method dasherize replaces the underscores in the receiver with dashes:The XML serializer of models uses this method to dasherize node names:"},{"title":"5.12.7 demodulize","anchor":"#demodulize","code":["\n\"Product\".demodulize                        # => \"Product\"\n\"Backoffice::UsersController\".demodulize    # => \"UsersController\"\n\"Admin::Hotel::ReservationUtils\".demodulize # => \"ReservationUtils\"\n\"::Inflections\".demodulize                  # => \"Inflections\"\n\"\".demodulize                               # => \"\"\n\n\"Product\".demodulize                        # => \"Product\"\n\"Backoffice::UsersController\".demodulize    # => \"UsersController\"\n\"Admin::Hotel::ReservationUtils\".demodulize # => \"ReservationUtils\"\n\"::Inflections\".demodulize                  # => \"Inflections\"\n\"\".demodulize                               # => \"\"\n\nCopy\n","\n# active_record/reflection.rb\ndef counter_cache_column\n  if options[:counter_cache] == true\n    \"#{active_record.name.demodulize.underscore.pluralize}_count\"\n  elsif options[:counter_cache]\n    options[:counter_cache]\n  end\nend\n\n# active_record/reflection.rb\ndef counter_cache_column\n  if options[:counter_cache] == true\n    \"#{active_record.name.demodulize.underscore.pluralize}_count\"\n  elsif options[:counter_cache]\n    options[:counter_cache]\n  end\nend\n\nCopy\n"],"body":"Given a string with a qualified constant name, demodulize returns the very constant name, that is, the rightmost part of it:Active Record for example uses this method to compute the name of a counter cache column:"},{"title":"5.12.8 deconstantize","anchor":"#deconstantize","code":["\n\"Product\".deconstantize                        # => \"\"\n\"Backoffice::UsersController\".deconstantize    # => \"Backoffice\"\n\"Admin::Hotel::ReservationUtils\".deconstantize # => \"Admin::Hotel\"\n\n\"Product\".deconstantize                        # => \"\"\n\"Backoffice::UsersController\".deconstantize    # => \"Backoffice\"\n\"Admin::Hotel::ReservationUtils\".deconstantize # => \"Admin::Hotel\"\n\nCopy\n"],"body":"Given a string with a qualified constant reference expression, deconstantize removes the rightmost segment, generally leaving the name of the constant's container:"},{"title":"5.12.9 parameterize","anchor":"#parameterize","code":["\n\"John Smith\".parameterize # => \"john-smith\"\n\"Kurt Gödel\".parameterize # => \"kurt-godel\"\n\n\"John Smith\".parameterize # => \"john-smith\"\n\"Kurt Gödel\".parameterize # => \"kurt-godel\"\n\nCopy\n","\n\"John Smith\".parameterize(preserve_case: true) # => \"John-Smith\"\n\"Kurt Gödel\".parameterize(preserve_case: true) # => \"Kurt-Godel\"\n\n\"John Smith\".parameterize(preserve_case: true) # => \"John-Smith\"\n\"Kurt Gödel\".parameterize(preserve_case: true) # => \"Kurt-Godel\"\n\nCopy\n","\n\"John Smith\".parameterize(separator: \"_\") # => \"john\\_smith\"\n\"Kurt Gödel\".parameterize(separator: \"_\") # => \"kurt\\_godel\"\n\n\"John Smith\".parameterize(separator: \"_\") # => \"john\\_smith\"\n\"Kurt Gödel\".parameterize(separator: \"_\") # => \"kurt\\_godel\"\n\nCopy\n"],"body":"The method parameterize normalizes its receiver in a way that can be used in pretty URLs.To preserve the case of the string, set the preserve_case argument to true. By default, preserve_case is set to false.To use a custom separator, override the separator argument."},{"title":"5.12.10 tableize","anchor":"#tableize","code":["\n\"Person\".tableize      # => \"people\"\n\"Invoice\".tableize     # => \"invoices\"\n\"InvoiceLine\".tableize # => \"invoice_lines\"\n\n\"Person\".tableize      # => \"people\"\n\"Invoice\".tableize     # => \"invoices\"\n\"InvoiceLine\".tableize # => \"invoice_lines\"\n\nCopy\n"],"body":"The method tableize is underscore followed by pluralize.As a rule of thumb, tableize returns the table name that corresponds to a given model for simple cases. The actual implementation in Active Record is not straight tableize indeed, because it also demodulizes the class name and checks a few options that may affect the returned string."},{"title":"5.12.11 classify","anchor":"#classify","code":["\n\"people\".classify        # => \"Person\"\n\"invoices\".classify      # => \"Invoice\"\n\"invoice_lines\".classify # => \"InvoiceLine\"\n\n\"people\".classify        # => \"Person\"\n\"invoices\".classify      # => \"Invoice\"\n\"invoice_lines\".classify # => \"InvoiceLine\"\n\nCopy\n","\n\"highrise_production.companies\".classify # => \"Company\"\n\n\"highrise_production.companies\".classify # => \"Company\"\n\nCopy\n"],"body":"The method classify is the inverse of tableize. It gives you the class name corresponding to a table name:The method understands qualified table names:Note that classify returns a class name as a string. You can get the actual class object by invoking constantize on it, explained next."},{"title":"5.12.12 constantize","anchor":"#constantize","code":["\n\"Integer\".constantize # => Integer\n\nmodule M\n  X = 1\nend\n\"M::X\".constantize # => 1\n\n\"Integer\".constantize # => Integer\n\nmodule M\n  X = 1\nend\n\"M::X\".constantize # => 1\n\nCopy\n","\nX = :in_Object\nmodule M\n  X = :in_M\n\n  X                 # => :in_M\n  \"::X\".constantize # => :in_Object\n  \"X\".constantize   # => :in_Object (!)\nend\n\nX = :in_Object\nmodule M\n  X = :in_M\n\n  X                 # => :in_M\n  \"::X\".constantize # => :in_Object\n  \"X\".constantize   # => :in_Object (!)\nend\n\nCopy\n","\n# action_mailer/test_case.rb\ndef determine_default_mailer(name)\n  name.delete_suffix(\"Test\").constantize\nrescue NameError => e\n  raise NonInferrableMailerError.new(name)\nend\n\n# action_mailer/test_case.rb\ndef determine_default_mailer(name)\n  name.delete_suffix(\"Test\").constantize\nrescue NameError => e\n  raise NonInferrableMailerError.new(name)\nend\n\nCopy\n"],"body":"The method constantize resolves the constant reference expression in its receiver:If the string evaluates to no known constant, or its content is not even a valid constant name, constantize raises NameError.Constant name resolution by constantize starts always at the top-level Object even if there is no leading \"::\".So, it is in general not equivalent to what Ruby would do in the same spot, had a real constant be evaluated.Mailer test cases obtain the mailer being tested from the name of the test class using constantize:"},{"title":"5.12.13 humanize","anchor":"#humanize","code":["\n\"name\".humanize                         # => \"Name\"\n\"author_id\".humanize                    # => \"Author\"\n\"author_id\".humanize(capitalize: false) # => \"author\"\n\"comments_count\".humanize               # => \"Comments count\"\n\"_id\".humanize                          # => \"Id\"\n\n\"name\".humanize                         # => \"Name\"\n\"author_id\".humanize                    # => \"Author\"\n\"author_id\".humanize(capitalize: false) # => \"author\"\n\"comments_count\".humanize               # => \"Comments count\"\n\"_id\".humanize                          # => \"Id\"\n\nCopy\n","\n'ssl_error'.humanize # => \"SSL error\"\n\n'ssl_error'.humanize # => \"SSL error\"\n\nCopy\n","\ndef full_messages\n  map { |attribute, message| full_message(attribute, message) }\nend\n\ndef full_message\n  # ...\n  attr_name = attribute.to_s.tr('.', '_').humanize\n  attr_name = @base.class.human_attribute_name(attribute, default: attr_name)\n  # ...\nend\n\ndef full_messages\n  map { |attribute, message| full_message(attribute, message) }\nend\n\ndef full_message\n  # ...\n  attr_name = attribute.to_s.tr('.', '_').humanize\n  attr_name = @base.class.human_attribute_name(attribute, default: attr_name)\n  # ...\nend\n\nCopy\n"],"body":"The method humanize tweaks an attribute name for display to end users.Specifically, it performs these transformations:The capitalization of the first word can be turned off by setting the\n:capitalize option to false (default is true).If \"SSL\" was defined to be an acronym:The helper method full_messages uses humanize as a fallback to include\nattribute names:"},{"title":"5.12.14 foreign_key","anchor":"#foreign-key","code":["\n\"User\".foreign_key           # => \"user_id\"\n\"InvoiceLine\".foreign_key    # => \"invoice_line_id\"\n\"Admin::Session\".foreign_key # => \"session_id\"\n\n\"User\".foreign_key           # => \"user_id\"\n\"InvoiceLine\".foreign_key    # => \"invoice_line_id\"\n\"Admin::Session\".foreign_key # => \"session_id\"\n\nCopy\n","\n\"User\".foreign_key(false) # => \"userid\"\n\n\"User\".foreign_key(false) # => \"userid\"\n\nCopy\n","\n# active_record/associations.rb\nforeign_key = options[:foreign_key] || reflection.active_record.name.foreign_key\n\n# active_record/associations.rb\nforeign_key = options[:foreign_key] || reflection.active_record.name.foreign_key\n\nCopy\n"],"body":"The method foreign_key gives a foreign key column name from a class name. To do so it demodulizes, underscores, and adds \"_id\":Pass a false argument if you do not want the underscore in \"_id\":Associations use this method to infer foreign keys, for example has_one and has_many do this:"},{"title":"5.13 Conversions","anchor":"#extensions-to-string-conversions","code":[],"body":""},{"title":"5.13.1 to_date, to_time, to_datetime","anchor":"#to-date-to-time-to-datetime","code":["\n\"2010-07-27\".to_date              # => Tue, 27 Jul 2010\n\"2010-07-27 23:37:00\".to_time     # => 2010-07-27 23:37:00 +0200\n\"2010-07-27 23:37:00\".to_datetime # => Tue, 27 Jul 2010 23:37:00 +0000\n\n\"2010-07-27\".to_date              # => Tue, 27 Jul 2010\n\"2010-07-27 23:37:00\".to_time     # => 2010-07-27 23:37:00 +0200\n\"2010-07-27 23:37:00\".to_datetime # => Tue, 27 Jul 2010 23:37:00 +0000\n\nCopy\n","\n\"2010-07-27 23:42:00\".to_time(:utc)   # => 2010-07-27 23:42:00 UTC\n\"2010-07-27 23:42:00\".to_time(:local) # => 2010-07-27 23:42:00 +0200\n\n\"2010-07-27 23:42:00\".to_time(:utc)   # => 2010-07-27 23:42:00 UTC\n\"2010-07-27 23:42:00\".to_time(:local) # => 2010-07-27 23:42:00 +0200\n\nCopy\n"],"body":"The methods to_date, to_time, and to_datetime are basically convenience wrappers around Date._parse:to_time receives an optional argument :utc or :local, to indicate which time zone you want the time in:Default is :local.Please refer to the documentation of Date._parse for further details."},{"title":"6 Extensions to Symbol","anchor":"#extensions-to-symbol","code":[],"body":""},{"title":"6.1 starts_with? and ends_with?","anchor":"#extensions-to-symbol-starts-with-questionmark-and-ends-with-questionmark","code":["\n:foo.starts_with?(\"f\") # => true\n:foo.ends_with?(\"o\")   # => true\n\n:foo.starts_with?(\"f\") # => true\n:foo.ends_with?(\"o\")   # => true\n\nCopy\n"],"body":"Active Support defines 3rd person aliases of Symbol#start_with? and Symbol#end_with?:"},{"title":"7 Extensions to Numeric","anchor":"#extensions-to-numeric","code":[],"body":""},{"title":"7.1 Bytes","anchor":"#bytes","code":["\n2.kilobytes   # => 2048\n3.megabytes   # => 3145728\n3.5.gigabytes # => 3758096384\n-4.exabytes   # => -4611686018427387904\n\n2.kilobytes   # => 2048\n3.megabytes   # => 3145728\n3.5.gigabytes # => 3758096384\n-4.exabytes   # => -4611686018427387904\n\nCopy\n","\n1.megabyte # => 1048576\n\n1.megabyte # => 1048576\n\nCopy\n"],"body":"All numbers respond to these methods:They return the corresponding amount of bytes, using a conversion factor of 1024:Singular forms are aliased so you are able to say:"},{"title":"7.2 Time","anchor":"#extensions-to-numeric-time","code":["\n# equivalent to Time.current.advance(days: 1)\n1.day.from_now\n\n# equivalent to Time.current.advance(weeks: 2)\n2.weeks.from_now\n\n# equivalent to Time.current.advance(days: 4, weeks: 5)\n(4.days + 5.weeks).from_now\n\n# equivalent to Time.current.advance(days: 1)\n1.day.from_now\n\n# equivalent to Time.current.advance(weeks: 2)\n2.weeks.from_now\n\n# equivalent to Time.current.advance(days: 4, weeks: 5)\n(4.days + 5.weeks).from_now\n\nCopy\n"],"body":"The following methods:enable time declarations and calculations, like 45.minutes + 2.hours + 4.weeks. Their return values can also be added to or subtracted from Time objects.These methods can be combined with from_now, ago, etc, for precise date calculations. For example:"},{"title":"7.3 Formatting","anchor":"#formatting","code":["\n5551234.to_s(:phone)\n# => 555-1234\n1235551234.to_s(:phone)\n# => 123-555-1234\n1235551234.to_s(:phone, area_code: true)\n# => (123) 555-1234\n1235551234.to_s(:phone, delimiter: \" \")\n# => 123 555 1234\n1235551234.to_s(:phone, area_code: true, extension: 555)\n# => (123) 555-1234 x 555\n1235551234.to_s(:phone, country_code: 1)\n# => +1-123-555-1234\n\n5551234.to_s(:phone)\n# => 555-1234\n1235551234.to_s(:phone)\n# => 123-555-1234\n1235551234.to_s(:phone, area_code: true)\n# => (123) 555-1234\n1235551234.to_s(:phone, delimiter: \" \")\n# => 123 555 1234\n1235551234.to_s(:phone, area_code: true, extension: 555)\n# => (123) 555-1234 x 555\n1235551234.to_s(:phone, country_code: 1)\n# => +1-123-555-1234\n\nCopy\n","\n1234567890.50.to_s(:currency)                 # => $1,234,567,890.50\n1234567890.506.to_s(:currency)                # => $1,234,567,890.51\n1234567890.506.to_s(:currency, precision: 3)  # => $1,234,567,890.506\n\n1234567890.50.to_s(:currency)                 # => $1,234,567,890.50\n1234567890.506.to_s(:currency)                # => $1,234,567,890.51\n1234567890.506.to_s(:currency, precision: 3)  # => $1,234,567,890.506\n\nCopy\n","\n100.to_s(:percentage)\n# => 100.000%\n100.to_s(:percentage, precision: 0)\n# => 100%\n1000.to_s(:percentage, delimiter: '.', separator: ',')\n# => 1.000,000%\n302.24398923423.to_s(:percentage, precision: 5)\n# => 302.24399%\n\n100.to_s(:percentage)\n# => 100.000%\n100.to_s(:percentage, precision: 0)\n# => 100%\n1000.to_s(:percentage, delimiter: '.', separator: ',')\n# => 1.000,000%\n302.24398923423.to_s(:percentage, precision: 5)\n# => 302.24399%\n\nCopy\n","\n12345678.to_s(:delimited)                     # => 12,345,678\n12345678.05.to_s(:delimited)                  # => 12,345,678.05\n12345678.to_s(:delimited, delimiter: \".\")     # => 12.345.678\n12345678.to_s(:delimited, delimiter: \",\")     # => 12,345,678\n12345678.05.to_s(:delimited, separator: \" \")  # => 12,345,678 05\n\n12345678.to_s(:delimited)                     # => 12,345,678\n12345678.05.to_s(:delimited)                  # => 12,345,678.05\n12345678.to_s(:delimited, delimiter: \".\")     # => 12.345.678\n12345678.to_s(:delimited, delimiter: \",\")     # => 12,345,678\n12345678.05.to_s(:delimited, separator: \" \")  # => 12,345,678 05\n\nCopy\n","\n111.2345.to_s(:rounded)                     # => 111.235\n111.2345.to_s(:rounded, precision: 2)       # => 111.23\n13.to_s(:rounded, precision: 5)             # => 13.00000\n389.32314.to_s(:rounded, precision: 0)      # => 389\n111.2345.to_s(:rounded, significant: true)  # => 111\n\n111.2345.to_s(:rounded)                     # => 111.235\n111.2345.to_s(:rounded, precision: 2)       # => 111.23\n13.to_s(:rounded, precision: 5)             # => 13.00000\n389.32314.to_s(:rounded, precision: 0)      # => 389\n111.2345.to_s(:rounded, significant: true)  # => 111\n\nCopy\n","\n123.to_s(:human_size)                  # => 123 Bytes\n1234.to_s(:human_size)                 # => 1.21 KB\n12345.to_s(:human_size)                # => 12.1 KB\n1234567.to_s(:human_size)              # => 1.18 MB\n1234567890.to_s(:human_size)           # => 1.15 GB\n1234567890123.to_s(:human_size)        # => 1.12 TB\n1234567890123456.to_s(:human_size)     # => 1.1 PB\n1234567890123456789.to_s(:human_size)  # => 1.07 EB\n\n123.to_s(:human_size)                  # => 123 Bytes\n1234.to_s(:human_size)                 # => 1.21 KB\n12345.to_s(:human_size)                # => 12.1 KB\n1234567.to_s(:human_size)              # => 1.18 MB\n1234567890.to_s(:human_size)           # => 1.15 GB\n1234567890123.to_s(:human_size)        # => 1.12 TB\n1234567890123456.to_s(:human_size)     # => 1.1 PB\n1234567890123456789.to_s(:human_size)  # => 1.07 EB\n\nCopy\n","\n123.to_s(:human)               # => \"123\"\n1234.to_s(:human)              # => \"1.23 Thousand\"\n12345.to_s(:human)             # => \"12.3 Thousand\"\n1234567.to_s(:human)           # => \"1.23 Million\"\n1234567890.to_s(:human)        # => \"1.23 Billion\"\n1234567890123.to_s(:human)     # => \"1.23 Trillion\"\n1234567890123456.to_s(:human)  # => \"1.23 Quadrillion\"\n\n123.to_s(:human)               # => \"123\"\n1234.to_s(:human)              # => \"1.23 Thousand\"\n12345.to_s(:human)             # => \"12.3 Thousand\"\n1234567.to_s(:human)           # => \"1.23 Million\"\n1234567890.to_s(:human)        # => \"1.23 Billion\"\n1234567890123.to_s(:human)     # => \"1.23 Trillion\"\n1234567890123456.to_s(:human)  # => \"1.23 Quadrillion\"\n\nCopy\n"],"body":"Enables the formatting of numbers in a variety of ways.Produce a string representation of a number as a telephone number:Produce a string representation of a number as currency:Produce a string representation of a number as a percentage:Produce a string representation of a number in delimited form:Produce a string representation of a number rounded to a precision:Produce a string representation of a number as a human-readable number of bytes:Produce a string representation of a number in human-readable words:"},{"title":"8 Extensions to Integer","anchor":"#extensions-to-integer","code":[],"body":""},{"title":"8.1 multiple_of?","anchor":"#multiple-of-questionmark","code":["\n2.multiple_of?(1) # => true\n1.multiple_of?(2) # => false\n\n2.multiple_of?(1) # => true\n1.multiple_of?(2) # => false\n\nCopy\n"],"body":"The method multiple_of? tests whether an integer is multiple of the argument:"},{"title":"8.2 ordinal","anchor":"#ordinal","code":["\n1.ordinal    # => \"st\"\n2.ordinal    # => \"nd\"\n53.ordinal   # => \"rd\"\n2009.ordinal # => \"th\"\n-21.ordinal  # => \"st\"\n-134.ordinal # => \"th\"\n\n1.ordinal    # => \"st\"\n2.ordinal    # => \"nd\"\n53.ordinal   # => \"rd\"\n2009.ordinal # => \"th\"\n-21.ordinal  # => \"st\"\n-134.ordinal # => \"th\"\n\nCopy\n"],"body":"The method ordinal returns the ordinal suffix string corresponding to the receiver integer:"},{"title":"8.3 ordinalize","anchor":"#ordinalize","code":["\n1.ordinalize    # => \"1st\"\n2.ordinalize    # => \"2nd\"\n53.ordinalize   # => \"53rd\"\n2009.ordinalize # => \"2009th\"\n-21.ordinalize  # => \"-21st\"\n-134.ordinalize # => \"-134th\"\n\n1.ordinalize    # => \"1st\"\n2.ordinalize    # => \"2nd\"\n53.ordinalize   # => \"53rd\"\n2009.ordinalize # => \"2009th\"\n-21.ordinalize  # => \"-21st\"\n-134.ordinalize # => \"-134th\"\n\nCopy\n"],"body":"The method ordinalize returns the ordinal string corresponding to the receiver integer. In comparison, note that the ordinal method returns only the suffix string."},{"title":"8.4 Time","anchor":"#extensions-to-integer-time","code":["\n# equivalent to Time.current.advance(months: 1)\n1.month.from_now\n\n# equivalent to Time.current.advance(years: 2)\n2.years.from_now\n\n# equivalent to Time.current.advance(months: 4, years: 5)\n(4.months + 5.years).from_now\n\n# equivalent to Time.current.advance(months: 1)\n1.month.from_now\n\n# equivalent to Time.current.advance(years: 2)\n2.years.from_now\n\n# equivalent to Time.current.advance(months: 4, years: 5)\n(4.months + 5.years).from_now\n\nCopy\n"],"body":"The following methods:enable time declarations and calculations, like 4.months + 5.years. Their return values can also be added to or subtracted from Time objects.These methods can be combined with from_now, ago, etc, for precise date calculations. For example:"},{"title":"9 Extensions to BigDecimal","anchor":"#extensions-to-bigdecimal","code":[],"body":""},{"title":"9.1 to_s","anchor":"#extensions-to-bigdecimal-to-s","code":["\nBigDecimal(5.00, 6).to_s       # => \"5.0\"\n\nBigDecimal(5.00, 6).to_s       # => \"5.0\"\n\nCopy\n","\nBigDecimal(5.00, 6).to_s(:db)  # => \"5.0\"\n\nBigDecimal(5.00, 6).to_s(:db)  # => \"5.0\"\n\nCopy\n","\nBigDecimal(5.00, 6).to_s(\"e\")  # => \"0.5E1\"\n\nBigDecimal(5.00, 6).to_s(\"e\")  # => \"0.5E1\"\n\nCopy\n"],"body":"The method to_s provides a default specifier of \"F\". This means that a simple call to to_s will result in floating point representation instead of engineering notation:and that symbol specifiers are also supported:Engineering notation is still supported:"},{"code":[],"body":"","title":"10 Extensions to Enumerable","anchor":"#extensions-to-enumerable"},{"title":"10.1 sum","anchor":"#sum","code":["\n[1, 2, 3].sum # => 6\n(1..100).sum  # => 5050\n\n[1, 2, 3].sum # => 6\n(1..100).sum  # => 5050\n\nCopy\n","\n[[1, 2], [2, 3], [3, 4]].sum    # => [1, 2, 2, 3, 3, 4]\n%w(foo bar baz).sum             # => \"foobarbaz\"\n{a: 1, b: 2, c: 3}.sum          # => [:a, 1, :b, 2, :c, 3]\n\n[[1, 2], [2, 3], [3, 4]].sum    # => [1, 2, 2, 3, 3, 4]\n%w(foo bar baz).sum             # => \"foobarbaz\"\n{a: 1, b: 2, c: 3}.sum          # => [:a, 1, :b, 2, :c, 3]\n\nCopy\n","\n[].sum    # => 0\n[].sum(1) # => 1\n\n[].sum    # => 0\n[].sum(1) # => 1\n\nCopy\n","\n(1..5).sum {|n| n * 2 } # => 30\n[2, 4, 6, 8, 10].sum    # => 30\n\n(1..5).sum {|n| n * 2 } # => 30\n[2, 4, 6, 8, 10].sum    # => 30\n\nCopy\n","\n[].sum(1) {|n| n**3} # => 1\n\n[].sum(1) {|n| n**3} # => 1\n\nCopy\n"],"body":"The method sum adds the elements of an enumerable:Addition only assumes the elements respond to +:The sum of an empty collection is zero by default, but this is customizable:If a block is given, sum becomes an iterator that yields the elements of the collection and sums the returned values:The sum of an empty receiver can be customized in this form as well:"},{"title":"10.2 index_by","anchor":"#index-by","code":["\ninvoices.index_by(&:number)\n# => {'2009-032' => <Invoice ...>, '2009-008' => <Invoice ...>, ...}\n\ninvoices.index_by(&:number)\n# => {'2009-032' => <Invoice ...>, '2009-008' => <Invoice ...>, ...}\n\nCopy\n"],"body":"The method index_by generates a hash with the elements of an enumerable indexed by some key.It iterates through the collection and passes each element to a block. The element will be keyed by the value returned by the block:"},{"title":"10.3 index_with","anchor":"#index-with","code":["\npost = Post.new(title: \"hey there\", body: \"what's up?\")\n\n%i( title body ).index_with { |attr_name| post.public_send(attr_name) }\n# => { title: \"hey there\", body: \"what's up?\" }\n\nWEEKDAYS.index_with(Interval.all_day)\n# => { monday: [ 0, 1440 ], … }\n\npost = Post.new(title: \"hey there\", body: \"what's up?\")\n\n%i( title body ).index_with { |attr_name| post.public_send(attr_name) }\n# => { title: \"hey there\", body: \"what's up?\" }\n\nWEEKDAYS.index_with(Interval.all_day)\n# => { monday: [ 0, 1440 ], … }\n\nCopy\n"],"body":"The method index_with generates a hash with the elements of an enumerable as keys. The value\nis either a passed default or returned in a block."},{"title":"10.4 many?","anchor":"#many-questionmark","code":["\n<% if pages.many? %>\n  <%= pagination_links %>\n<% end %>\n\n<% if pages.many? %>\n  <%= pagination_links %>\n<% end %>\n\nCopy\n","\n@see_more = videos.many? {|video| video.category == params[:category]}\n\n@see_more = videos.many? {|video| video.category == params[:category]}\n\nCopy\n"],"body":"The method many? is shorthand for collection.size > 1:If an optional block is given, many? only takes into account those elements that return true:"},{"title":"10.5 exclude?","anchor":"#exclude-questionmark","code":["\nto_visit << node if visited.exclude?(node)\n\nto_visit << node if visited.exclude?(node)\n\nCopy\n"],"body":"The predicate exclude? tests whether a given object does not belong to the collection. It is the negation of the built-in include?:"},{"title":"10.6 including","anchor":"#including","code":["\n[ 1, 2, 3 ].including(4, 5)                    # => [ 1, 2, 3, 4, 5 ]\n[\"David\", \"Rafael\"].including %w[ Aaron Todd ] # => [\"David\", \"Rafael\", \"Aaron\", \"Todd\"]\n\n[ 1, 2, 3 ].including(4, 5)                    # => [ 1, 2, 3, 4, 5 ]\n[\"David\", \"Rafael\"].including %w[ Aaron Todd ] # => [\"David\", \"Rafael\", \"Aaron\", \"Todd\"]\n\nCopy\n"],"body":"The method including returns a new enumerable that includes the passed elements:"},{"title":"10.7 excluding","anchor":"#excluding","code":["\n[\"David\", \"Rafael\", \"Aaron\", \"Todd\"].excluding(\"Aaron\", \"Todd\") # => [\"David\", \"Rafael\"]\n\n[\"David\", \"Rafael\", \"Aaron\", \"Todd\"].excluding(\"Aaron\", \"Todd\") # => [\"David\", \"Rafael\"]\n\nCopy\n"],"body":"The method excluding returns a copy of an enumerable with the specified elements\nremoved:excluding is aliased to without."},{"title":"10.8 pluck","anchor":"#pluck","code":["\n[{ name: \"David\" }, { name: \"Rafael\" }, { name: \"Aaron\" }].pluck(:name) # => [\"David\", \"Rafael\", \"Aaron\"]\n[{ id: 1, name: \"David\" }, { id: 2, name: \"Rafael\" }].pluck(:id, :name) # => [[1, \"David\"], [2, \"Rafael\"]]\n\n[{ name: \"David\" }, { name: \"Rafael\" }, { name: \"Aaron\" }].pluck(:name) # => [\"David\", \"Rafael\", \"Aaron\"]\n[{ id: 1, name: \"David\" }, { id: 2, name: \"Rafael\" }].pluck(:id, :name) # => [[1, \"David\"], [2, \"Rafael\"]]\n\nCopy\n"],"body":"The method pluck extracts the given key from each element:"},{"title":"10.9 pick","anchor":"#pick","code":["\n[{ name: \"David\" }, { name: \"Rafael\" }, { name: \"Aaron\" }].pick(:name) # => \"David\"\n[{ id: 1, name: \"David\" }, { id: 2, name: \"Rafael\" }].pick(:id, :name) # => [1, \"David\"]\n\n[{ name: \"David\" }, { name: \"Rafael\" }, { name: \"Aaron\" }].pick(:name) # => \"David\"\n[{ id: 1, name: \"David\" }, { id: 2, name: \"Rafael\" }].pick(:id, :name) # => [1, \"David\"]\n\nCopy\n"],"body":"The method pick extracts the given key from the first element:"},{"title":"11 Extensions to Array","anchor":"#extensions-to-array","code":[],"body":""},{"title":"11.1 Accessing","anchor":"#accessing","code":["\n%w(a b c d).to(2) # => [\"a\", \"b\", \"c\"]\n[].to(7)          # => []\n\n%w(a b c d).to(2) # => [\"a\", \"b\", \"c\"]\n[].to(7)          # => []\n\nCopy\n","\n%w(a b c d).from(2)  # => [\"c\", \"d\"]\n%w(a b c d).from(10) # => []\n[].from(0)           # => []\n\n%w(a b c d).from(2)  # => [\"c\", \"d\"]\n%w(a b c d).from(10) # => []\n[].from(0)           # => []\n\nCopy\n","\n[ 1, 2, 3 ].including(4, 5)          # => [ 1, 2, 3, 4, 5 ]\n[ [ 0, 1 ] ].including([ [ 1, 0 ] ]) # => [ [ 0, 1 ], [ 1, 0 ] ]\n\n[ 1, 2, 3 ].including(4, 5)          # => [ 1, 2, 3, 4, 5 ]\n[ [ 0, 1 ] ].including([ [ 1, 0 ] ]) # => [ [ 0, 1 ], [ 1, 0 ] ]\n\nCopy\n","\n[\"David\", \"Rafael\", \"Aaron\", \"Todd\"].excluding(\"Aaron\", \"Todd\") # => [\"David\", \"Rafael\"]\n[ [ 0, 1 ], [ 1, 0 ] ].excluding([ [ 1, 0 ] ])                  # => [ [ 0, 1 ] ]\n\n[\"David\", \"Rafael\", \"Aaron\", \"Todd\"].excluding(\"Aaron\", \"Todd\") # => [\"David\", \"Rafael\"]\n[ [ 0, 1 ], [ 1, 0 ] ].excluding([ [ 1, 0 ] ])                  # => [ [ 0, 1 ] ]\n\nCopy\n","\n%w(a b c d).third # => \"c\"\n%w(a b c d).fifth # => nil\n\n%w(a b c d).third # => \"c\"\n%w(a b c d).fifth # => nil\n\nCopy\n"],"body":"Active Support augments the API of arrays to ease certain ways of accessing them. For example, to returns the subarray of elements up to the one at the passed index:Similarly, from returns the tail from the element at the passed index to the end. If the index is greater than the length of the array, it returns an empty array.The method including returns a new array that includes the passed elements:The method excluding returns a copy of the Array excluding the specified elements.\nThis is an optimization of Enumerable#excluding that uses Array#-\ninstead of Array#reject for performance reasons.The methods second, third, fourth, and fifth return the corresponding element, as do second_to_last and third_to_last (first and last are built-in). Thanks to social wisdom and positive constructiveness all around, forty_two is also available."},{"title":"11.2 Extracting","anchor":"#extensions-to-array-extracting","code":["\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nodd_numbers = numbers.extract! { |number| number.odd? } # => [1, 3, 5, 7, 9]\nnumbers # => [0, 2, 4, 6, 8]\n\nnumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nodd_numbers = numbers.extract! { |number| number.odd? } # => [1, 3, 5, 7, 9]\nnumbers # => [0, 2, 4, 6, 8]\n\nCopy\n"],"body":"The method extract! removes and returns the elements for which the block returns a true value.\nIf no block is given, an Enumerator is returned instead."},{"title":"11.3 Options Extraction","anchor":"#options-extraction","code":["\nUser.exists?(email: params[:email])\n\nUser.exists?(email: params[:email])\n\nCopy\n","\ndef caches_action(*actions)\n  return unless cache_configured?\n  options = actions.extract_options!\n  # ...\nend\n\ndef caches_action(*actions)\n  return unless cache_configured?\n  options = actions.extract_options!\n  # ...\nend\n\nCopy\n"],"body":"When the last argument in a method call is a hash, except perhaps for a &block argument, Ruby allows you to omit the brackets:That syntactic sugar is used a lot in Rails to avoid positional arguments where there would be too many, offering instead interfaces that emulate named parameters. In particular it is very idiomatic to use a trailing hash for options.If a method expects a variable number of arguments and uses * in its declaration, however, such an options hash ends up being an item of the array of arguments, where it loses its role.In those cases, you may give an options hash a distinguished treatment with extract_options!. This method checks the type of the last item of an array. If it is a hash it pops it and returns it, otherwise it returns an empty hash.Let's see for example the definition of the caches_action controller macro:This method receives an arbitrary number of action names, and an optional hash of options as last argument. With the call to extract_options! you obtain the options hash and remove it from actions in a simple and explicit way."},{"title":"11.4 Conversions","anchor":"#extensions-to-array-conversions","code":[],"body":""},{"title":"11.4.1 to_sentence","anchor":"#to-sentence","code":["\n%w().to_sentence                # => \"\"\n%w(Earth).to_sentence           # => \"Earth\"\n%w(Earth Wind).to_sentence      # => \"Earth and Wind\"\n%w(Earth Wind Fire).to_sentence # => \"Earth, Wind, and Fire\"\n\n%w().to_sentence                # => \"\"\n%w(Earth).to_sentence           # => \"Earth\"\n%w(Earth Wind).to_sentence      # => \"Earth and Wind\"\n%w(Earth Wind Fire).to_sentence # => \"Earth, Wind, and Fire\"\n\nCopy\n"],"body":"The method to_sentence turns an array into a string containing a sentence that enumerates its items:This method accepts three options:The defaults for these options can be localized, their keys are:"},{"title":"11.4.2 to_formatted_s","anchor":"#to-formatted-s","code":["\n[].to_formatted_s(:db)            # => \"null\"\n[user].to_formatted_s(:db)        # => \"8456\"\ninvoice.lines.to_formatted_s(:db) # => \"23,567,556,12\"\n\n[].to_formatted_s(:db)            # => \"null\"\n[user].to_formatted_s(:db)        # => \"8456\"\ninvoice.lines.to_formatted_s(:db) # => \"23,567,556,12\"\n\nCopy\n"],"body":"The method to_formatted_s acts like to_s by default.If the array contains items that respond to id, however, the symbol\n:db may be passed as argument. That's typically used with\ncollections of Active Record objects. Returned strings are:Integers in the example above are supposed to come from the respective calls to id."},{"title":"11.4.3 to_xml","anchor":"#extensions-to-array-conversions-to-xml","code":["\nContributor.limit(2).order(:rank).to_xml\n# =>\n# <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n# <contributors type=\"array\">\n#   <contributor>\n#     <id type=\"integer\">4356</id>\n#     <name>Jeremy Kemper</name>\n#     <rank type=\"integer\">1</rank>\n#     <url-id>jeremy-kemper</url-id>\n#   </contributor>\n#   <contributor>\n#     <id type=\"integer\">4404</id>\n#     <name>David Heinemeier Hansson</name>\n#     <rank type=\"integer\">2</rank>\n#     <url-id>david-heinemeier-hansson</url-id>\n#   </contributor>\n# </contributors>\n\nContributor.limit(2).order(:rank).to_xml\n# =>\n# <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n# <contributors type=\"array\">\n#   <contributor>\n#     <id type=\"integer\">4356</id>\n#     <name>Jeremy Kemper</name>\n#     <rank type=\"integer\">1</rank>\n#     <url-id>jeremy-kemper</url-id>\n#   </contributor>\n#   <contributor>\n#     <id type=\"integer\">4404</id>\n#     <name>David Heinemeier Hansson</name>\n#     <rank type=\"integer\">2</rank>\n#     <url-id>david-heinemeier-hansson</url-id>\n#   </contributor>\n# </contributors>\n\nCopy\n","\n[Contributor.first, Commit.first].to_xml\n# =>\n# <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n# <objects type=\"array\">\n#   <object>\n#     <id type=\"integer\">4583</id>\n#     <name>Aaron Batalion</name>\n#     <rank type=\"integer\">53</rank>\n#     <url-id>aaron-batalion</url-id>\n#   </object>\n#   <object>\n#     <author>Joshua Peek</author>\n#     <authored-timestamp type=\"datetime\">2009-09-02T16:44:36Z</authored-timestamp>\n#     <branch>origin/master</branch>\n#     <committed-timestamp type=\"datetime\">2009-09-02T16:44:36Z</committed-timestamp>\n#     <committer>Joshua Peek</committer>\n#     <git-show nil=\"true\"></git-show>\n#     <id type=\"integer\">190316</id>\n#     <imported-from-svn type=\"boolean\">false</imported-from-svn>\n#     <message>Kill AMo observing wrap_with_notifications since ARes was only using it</message>\n#     <sha1>723a47bfb3708f968821bc969a9a3fc873a3ed58</sha1>\n#   </object>\n# </objects>\n\n[Contributor.first, Commit.first].to_xml\n# =>\n# <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n# <objects type=\"array\">\n#   <object>\n#     <id type=\"integer\">4583</id>\n#     <name>Aaron Batalion</name>\n#     <rank type=\"integer\">53</rank>\n#     <url-id>aaron-batalion</url-id>\n#   </object>\n#   <object>\n#     <author>Joshua Peek</author>\n#     <authored-timestamp type=\"datetime\">2009-09-02T16:44:36Z</authored-timestamp>\n#     <branch>origin/master</branch>\n#     <committed-timestamp type=\"datetime\">2009-09-02T16:44:36Z</committed-timestamp>\n#     <committer>Joshua Peek</committer>\n#     <git-show nil=\"true\"></git-show>\n#     <id type=\"integer\">190316</id>\n#     <imported-from-svn type=\"boolean\">false</imported-from-svn>\n#     <message>Kill AMo observing wrap_with_notifications since ARes was only using it</message>\n#     <sha1>723a47bfb3708f968821bc969a9a3fc873a3ed58</sha1>\n#   </object>\n# </objects>\n\nCopy\n","\n[{a: 1, b: 2}, {c: 3}].to_xml\n# =>\n# <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n# <objects type=\"array\">\n#   <object>\n#     <b type=\"integer\">2</b>\n#     <a type=\"integer\">1</a>\n#   </object>\n#   <object>\n#     <c type=\"integer\">3</c>\n#   </object>\n# </objects>\n\n[{a: 1, b: 2}, {c: 3}].to_xml\n# =>\n# <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n# <objects type=\"array\">\n#   <object>\n#     <b type=\"integer\">2</b>\n#     <a type=\"integer\">1</a>\n#   </object>\n#   <object>\n#     <c type=\"integer\">3</c>\n#   </object>\n# </objects>\n\nCopy\n","\nContributor.limit(2).order(:rank).to_xml(skip_types: true)\n# =>\n# <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n# <contributors>\n#   <contributor>\n#     <id>4356</id>\n#     <name>Jeremy Kemper</name>\n#     <rank>1</rank>\n#     <url-id>jeremy-kemper</url-id>\n#   </contributor>\n#   <contributor>\n#     <id>4404</id>\n#     <name>David Heinemeier Hansson</name>\n#     <rank>2</rank>\n#     <url-id>david-heinemeier-hansson</url-id>\n#   </contributor>\n# </contributors>\n\nContributor.limit(2).order(:rank).to_xml(skip_types: true)\n# =>\n# <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n# <contributors>\n#   <contributor>\n#     <id>4356</id>\n#     <name>Jeremy Kemper</name>\n#     <rank>1</rank>\n#     <url-id>jeremy-kemper</url-id>\n#   </contributor>\n#   <contributor>\n#     <id>4404</id>\n#     <name>David Heinemeier Hansson</name>\n#     <rank>2</rank>\n#     <url-id>david-heinemeier-hansson</url-id>\n#   </contributor>\n# </contributors>\n\nCopy\n"],"body":"The method to_xml returns a string containing an XML representation of its receiver:To do so it sends to_xml to every item in turn, and collects the results under a root node. All items must respond to to_xml, an exception is raised otherwise.By default, the name of the root element is the underscored and dasherized plural of the name of the class of the first item, provided the rest of elements belong to that type (checked with is_a?) and they are not hashes. In the example above that's \"contributors\".If there's any element that does not belong to the type of the first one the root node becomes \"objects\":If the receiver is an array of hashes the root element is by default also \"objects\":The name of children nodes is by default the name of the root node singularized. In the examples above we've seen \"contributor\" and \"object\". The option :children allows you to set these node names.The default XML builder is a fresh instance of Builder::XmlMarkup. You can configure your own builder via the :builder option. The method also accepts options like :dasherize and friends, they are forwarded to the builder:"},{"title":"11.5 Wrapping","anchor":"#wrapping","code":["\nArray.wrap(nil)       # => []\nArray.wrap([1, 2, 3]) # => [1, 2, 3]\nArray.wrap(0)         # => [0]\n\nArray.wrap(nil)       # => []\nArray.wrap([1, 2, 3]) # => [1, 2, 3]\nArray.wrap(0)         # => [0]\n\nCopy\n","\nArray.wrap(foo: :bar) # => [{:foo=>:bar}]\nArray(foo: :bar)      # => [[:foo, :bar]]\n\nArray.wrap(foo: :bar) # => [{:foo=>:bar}]\nArray(foo: :bar)      # => [[:foo, :bar]]\n\nCopy\n","\n[*object]\n\n[*object]\n\nCopy\n"],"body":"The method Array.wrap wraps its argument in an array unless it is already an array (or array-like).Specifically:This method is similar in purpose to Kernel#Array, but there are some differences:The last point is particularly worth comparing for some enumerables:There's also a related idiom that uses the splat operator:"},{"title":"11.6 Duplicating","anchor":"#duplicating","code":["\narray = [1, [2, 3]]\ndup = array.deep_dup\ndup[1][2] = 4\narray[1][2] == nil   # => true\n\narray = [1, [2, 3]]\ndup = array.deep_dup\ndup[1][2] = 4\narray[1][2] == nil   # => true\n\nCopy\n"],"body":"The method Array#deep_dup duplicates itself and all objects inside\nrecursively with the Active Support method Object#deep_dup. It works like Array#map, sending deep_dup method to each object inside."},{"title":"11.7 Grouping","anchor":"#grouping","code":[],"body":""},{"title":"11.7.1 in_groups_of(number, fill_with = nil)","anchor":"#in-groups-of-number-fill-with-nil","code":["\n[1, 2, 3].in_groups_of(2) # => [[1, 2], [3, nil]]\n\n[1, 2, 3].in_groups_of(2) # => [[1, 2], [3, nil]]\n\nCopy\n","\n<% sample.in_groups_of(3) do |a, b, c| %>\n  <tr>\n    <td><%= a %></td>\n    <td><%= b %></td>\n    <td><%= c %></td>\n  </tr>\n<% end %>\n\n<% sample.in_groups_of(3) do |a, b, c| %>\n  <tr>\n    <td><%= a %></td>\n    <td><%= b %></td>\n    <td><%= c %></td>\n  </tr>\n<% end %>\n\nCopy\n","\n[1, 2, 3].in_groups_of(2, 0) # => [[1, 2], [3, 0]]\n\n[1, 2, 3].in_groups_of(2, 0) # => [[1, 2], [3, 0]]\n\nCopy\n","\n[1, 2, 3].in_groups_of(2, false) # => [[1, 2], [3]]\n\n[1, 2, 3].in_groups_of(2, false) # => [[1, 2], [3]]\n\nCopy\n"],"body":"The method in_groups_of splits an array into consecutive groups of a certain size. It returns an array with the groups:or yields them in turn if a block is passed:The first example shows how in_groups_of fills the last group with as many nil elements as needed to have the requested size. You can change this padding value using the second optional argument:And you can tell the method not to fill the last group by passing false:As a consequence false can't be used as a padding value."},{"title":"11.7.2 in_groups(number, fill_with = nil)","anchor":"#in-groups-number-fill-with-nil","code":["\n%w(1 2 3 4 5 6 7).in_groups(3)\n# => [[\"1\", \"2\", \"3\"], [\"4\", \"5\", nil], [\"6\", \"7\", nil]]\n\n%w(1 2 3 4 5 6 7).in_groups(3)\n# => [[\"1\", \"2\", \"3\"], [\"4\", \"5\", nil], [\"6\", \"7\", nil]]\n\nCopy\n","\n%w(1 2 3 4 5 6 7).in_groups(3) {|group| p group}\n[\"1\", \"2\", \"3\"]\n[\"4\", \"5\", nil]\n[\"6\", \"7\", nil]\n\n%w(1 2 3 4 5 6 7).in_groups(3) {|group| p group}\n[\"1\", \"2\", \"3\"]\n[\"4\", \"5\", nil]\n[\"6\", \"7\", nil]\n\nCopy\n","\n%w(1 2 3 4 5 6 7).in_groups(3, \"0\")\n# => [[\"1\", \"2\", \"3\"], [\"4\", \"5\", \"0\"], [\"6\", \"7\", \"0\"]]\n\n%w(1 2 3 4 5 6 7).in_groups(3, \"0\")\n# => [[\"1\", \"2\", \"3\"], [\"4\", \"5\", \"0\"], [\"6\", \"7\", \"0\"]]\n\nCopy\n","\n%w(1 2 3 4 5 6 7).in_groups(3, false)\n# => [[\"1\", \"2\", \"3\"], [\"4\", \"5\"], [\"6\", \"7\"]]\n\n%w(1 2 3 4 5 6 7).in_groups(3, false)\n# => [[\"1\", \"2\", \"3\"], [\"4\", \"5\"], [\"6\", \"7\"]]\n\nCopy\n"],"body":"The method in_groups splits an array into a certain number of groups. The method returns an array with the groups:or yields them in turn if a block is passed:The examples above show that in_groups fills some groups with a trailing nil element as needed. A group can get at most one of these extra elements, the rightmost one if any. And the groups that have them are always the last ones.You can change this padding value using the second optional argument:And you can tell the method not to fill the smaller groups by passing false:As a consequence false can't be used as a padding value."},{"title":"11.7.3 split(value = nil)","anchor":"#split-value-nil","code":["\n(-5..5).to_a.split { |i| i.multiple_of?(4) }\n# => [[-5], [-3, -2, -1], [1, 2, 3], [5]]\n\n(-5..5).to_a.split { |i| i.multiple_of?(4) }\n# => [[-5], [-3, -2, -1], [1, 2, 3], [5]]\n\nCopy\n","\n[0, 1, -5, 1, 1, \"foo\", \"bar\"].split(1)\n# => [[0], [-5], [], [\"foo\", \"bar\"]]\n\n[0, 1, -5, 1, 1, \"foo\", \"bar\"].split(1)\n# => [[0], [-5], [], [\"foo\", \"bar\"]]\n\nCopy\n"],"body":"The method split divides an array by a separator and returns the resulting chunks.If a block is passed the separators are those elements of the array for which the block returns true:Otherwise, the value received as argument, which defaults to nil, is the separator:"},{"title":"12 Extensions to Hash","anchor":"#extensions-to-hash","code":[],"body":""},{"title":"12.1 Conversions","anchor":"#extensions-to-hash-conversions","code":[],"body":""},{"title":"12.1.1 to_xml","anchor":"#conversions-to-xml","code":["\n{\"foo\" => 1, \"bar\" => 2}.to_xml\n# =>\n# <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n# <hash>\n#   <foo type=\"integer\">1</foo>\n#   <bar type=\"integer\">2</bar>\n# </hash>\n\n{\"foo\" => 1, \"bar\" => 2}.to_xml\n# =>\n# <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n# <hash>\n#   <foo type=\"integer\">1</foo>\n#   <bar type=\"integer\">2</bar>\n# </hash>\n\nCopy\n","\nXML_TYPE_NAMES = {\n  \"Symbol\"     => \"symbol\",\n  \"Integer\"    => \"integer\",\n  \"BigDecimal\" => \"decimal\",\n  \"Float\"      => \"float\",\n  \"TrueClass\"  => \"boolean\",\n  \"FalseClass\" => \"boolean\",\n  \"Date\"       => \"date\",\n  \"DateTime\"   => \"datetime\",\n  \"Time\"       => \"datetime\"\n}\n\nXML_TYPE_NAMES = {\n  \"Symbol\"     => \"symbol\",\n  \"Integer\"    => \"integer\",\n  \"BigDecimal\" => \"decimal\",\n  \"Float\"      => \"float\",\n  \"TrueClass\"  => \"boolean\",\n  \"FalseClass\" => \"boolean\",\n  \"Date\"       => \"date\",\n  \"DateTime\"   => \"datetime\",\n  \"Time\"       => \"datetime\"\n}\n\nCopy\n"],"body":"The method to_xml returns a string containing an XML representation of its receiver:To do so, the method loops over the pairs and builds nodes that depend on the values. Given a pair key, value:By default the root node is \"hash\", but that's configurable via the :root option.The default XML builder is a fresh instance of Builder::XmlMarkup. You can configure your own builder with the :builder option. The method also accepts options like :dasherize and friends, they are forwarded to the builder."},{"title":"12.2 Merging","anchor":"#merging","code":["\n{a: 1, b: 1}.merge(a: 0, c: 2)\n# => {:a=>0, :b=>1, :c=>2}\n\n{a: 1, b: 1}.merge(a: 0, c: 2)\n# => {:a=>0, :b=>1, :c=>2}\n\nCopy\n"],"body":"Ruby has a built-in method Hash#merge that merges two hashes:Active Support defines a few more ways of merging hashes that may be convenient."},{"title":"12.2.1 reverse_merge and reverse_merge!","anchor":"#reverse-merge-and-reverse-merge-bang","code":["\noptions = {length: 30, omission: \"...\"}.merge(options)\n\noptions = {length: 30, omission: \"...\"}.merge(options)\n\nCopy\n","\noptions = options.reverse_merge(length: 30, omission: \"...\")\n\noptions = options.reverse_merge(length: 30, omission: \"...\")\n\nCopy\n","\noptions.reverse_merge!(length: 30, omission: \"...\")\n\noptions.reverse_merge!(length: 30, omission: \"...\")\n\nCopy\n"],"body":"In case of collision the key in the hash of the argument wins in merge. You can support option hashes with default values in a compact way with this idiom:Active Support defines reverse_merge in case you prefer this alternative notation:And a bang version reverse_merge! that performs the merge in place:"},{"title":"12.2.2 reverse_update","anchor":"#reverse-update","code":[],"body":"The method reverse_update is an alias for reverse_merge!, explained above."},{"title":"12.2.3 deep_merge and deep_merge!","anchor":"#deep-merge-and-deep-merge-bang","code":["\n{a: {b: 1}}.deep_merge(a: {c: 2})\n# => {:a=>{:b=>1, :c=>2}}\n\n{a: {b: 1}}.deep_merge(a: {c: 2})\n# => {:a=>{:b=>1, :c=>2}}\n\nCopy\n"],"body":"As you can see in the previous example if a key is found in both hashes the value in the one in the argument wins.Active Support defines Hash#deep_merge. In a deep merge, if a key is found in both hashes and their values are hashes in turn, then their merge becomes the value in the resulting hash:The method deep_merge! performs a deep merge in place."},{"title":"12.3 Deep duplicating","anchor":"#deep-duplicating","code":["\nhash = { a: 1, b: { c: 2, d: [3, 4] } }\n\ndup = hash.deep_dup\ndup[:b][:e] = 5\ndup[:b][:d] << 5\n\nhash[:b][:e] == nil      # => true\nhash[:b][:d] == [3, 4]   # => true\n\nhash = { a: 1, b: { c: 2, d: [3, 4] } }\n\ndup = hash.deep_dup\ndup[:b][:e] = 5\ndup[:b][:d] << 5\n\nhash[:b][:e] == nil      # => true\nhash[:b][:d] == [3, 4]   # => true\n\nCopy\n"],"body":"The method Hash#deep_dup duplicates itself and all keys and values\ninside recursively with Active Support method Object#deep_dup. It works like Enumerator#each_with_object with sending deep_dup method to each pair inside."},{"title":"12.4 Working with Keys","anchor":"#working-with-keys","code":[],"body":""},{"title":"12.4.1 except and except!","anchor":"#except-and-except-bang","code":["\n{a: 1, b: 2}.except(:a) # => {:b=>2}\n\n{a: 1, b: 2}.except(:a) # => {:b=>2}\n\nCopy\n","\n{a: 1}.with_indifferent_access.except(:a)  # => {}\n{a: 1}.with_indifferent_access.except(\"a\") # => {}\n\n{a: 1}.with_indifferent_access.except(:a)  # => {}\n{a: 1}.with_indifferent_access.except(\"a\") # => {}\n\nCopy\n"],"body":"The method except returns a hash with the keys in the argument list removed, if present:If the receiver responds to convert_key, the method is called on each of the arguments. This allows except to play nice with hashes with indifferent access for instance:There's also the bang variant except! that removes keys in place."},{"title":"12.4.2 stringify_keys and stringify_keys!","anchor":"#stringify-keys-and-stringify-keys-bang","code":["\n{nil => nil, 1 => 1, a: :a}.stringify_keys\n# => {\"\" => nil, \"1\" => 1, \"a\" => :a}\n\n{nil => nil, 1 => 1, a: :a}.stringify_keys\n# => {\"\" => nil, \"1\" => 1, \"a\" => :a}\n\nCopy\n","\n{\"a\" => 1, a: 2}.stringify_keys\n# The result will be\n# => {\"a\"=>2}\n\n{\"a\" => 1, a: 2}.stringify_keys\n# The result will be\n# => {\"a\"=>2}\n\nCopy\n","\ndef to_check_box_tag(options = {}, checked_value = \"1\", unchecked_value = \"0\")\n  options = options.stringify_keys\n  options[\"type\"] = \"checkbox\"\n  # ...\nend\n\ndef to_check_box_tag(options = {}, checked_value = \"1\", unchecked_value = \"0\")\n  options = options.stringify_keys\n  options[\"type\"] = \"checkbox\"\n  # ...\nend\n\nCopy\n","\n{nil => nil, 1 => 1, nested: {a: 3, 5 => 5}}.deep_stringify_keys\n# => {\"\"=>nil, \"1\"=>1, \"nested\"=>{\"a\"=>3, \"5\"=>5}}\n\n{nil => nil, 1 => 1, nested: {a: 3, 5 => 5}}.deep_stringify_keys\n# => {\"\"=>nil, \"1\"=>1, \"nested\"=>{\"a\"=>3, \"5\"=>5}}\n\nCopy\n"],"body":"The method stringify_keys returns a hash that has a stringified version of the keys in the receiver. It does so by sending to_s to them:In case of key collision, the value will be the one most recently inserted into the hash:This method may be useful for example to easily accept both symbols and strings as options. For instance ActionView::Helpers::FormHelper defines:The second line can safely access the \"type\" key, and let the user to pass either :type or \"type\".There's also the bang variant stringify_keys! that stringifies keys in place.Besides that, one can use deep_stringify_keys and deep_stringify_keys! to stringify all the keys in the given hash and all the hashes nested in it. An example of the result is:"},{"title":"12.4.3 symbolize_keys and symbolize_keys!","anchor":"#symbolize-keys-and-symbolize-keys-bang","code":["\n{nil => nil, 1 => 1, \"a\" => \"a\"}.symbolize_keys\n# => {nil=>nil, 1=>1, :a=>\"a\"}\n\n{nil => nil, 1 => 1, \"a\" => \"a\"}.symbolize_keys\n# => {nil=>nil, 1=>1, :a=>\"a\"}\n\nCopy\n","\n{\"a\" => 1, a: 2}.symbolize_keys\n# => {:a=>2}\n\n{\"a\" => 1, a: 2}.symbolize_keys\n# => {:a=>2}\n\nCopy\n","\ndef rich_text_area_tag(name, value = nil, options = {})\n  options = options.symbolize_keys\n\n  options[:input] ||= \"trix_input_#{ActionText::TagHelper.id += 1}\"\n  # ...\nend\n\ndef rich_text_area_tag(name, value = nil, options = {})\n  options = options.symbolize_keys\n\n  options[:input] ||= \"trix_input_#{ActionText::TagHelper.id += 1}\"\n  # ...\nend\n\nCopy\n","\n{nil => nil, 1 => 1, \"nested\" => {\"a\" => 3, 5 => 5}}.deep_symbolize_keys\n# => {nil=>nil, 1=>1, nested:{a:3, 5=>5}}\n\n{nil => nil, 1 => 1, \"nested\" => {\"a\" => 3, 5 => 5}}.deep_symbolize_keys\n# => {nil=>nil, 1=>1, nested:{a:3, 5=>5}}\n\nCopy\n"],"body":"The method symbolize_keys returns a hash that has a symbolized version of the keys in the receiver, where possible. It does so by sending to_sym to them:In case of key collision, the value will be the one most recently inserted into the hash:This method may be useful for example to easily accept both symbols and strings as options. For instance ActionText::TagHelper definesThe third line can safely access the :input key, and let the user to pass either :input or \"input\".There's also the bang variant symbolize_keys! that symbolizes keys in place.Besides that, one can use deep_symbolize_keys and deep_symbolize_keys! to symbolize all the keys in the given hash and all the hashes nested in it. An example of the result is:"},{"title":"12.4.4 to_options and to_options!","anchor":"#to-options-and-to-options-bang","code":[],"body":"The methods to_options and to_options! are aliases of symbolize_keys and symbolize_keys!, respectively."},{"title":"12.4.5 assert_valid_keys","anchor":"#assert-valid-keys","code":["\n{a: 1}.assert_valid_keys(:a)  # passes\n{a: 1}.assert_valid_keys(\"a\") # ArgumentError\n\n{a: 1}.assert_valid_keys(:a)  # passes\n{a: 1}.assert_valid_keys(\"a\") # ArgumentError\n\nCopy\n"],"body":"The method assert_valid_keys receives an arbitrary number of arguments, and checks whether the receiver has any key outside that list. If it does ArgumentError is raised.Active Record does not accept unknown options when building associations, for example. It implements that control via assert_valid_keys."},{"title":"12.5 Working with Values","anchor":"#working-with-values","code":[],"body":""},{"title":"12.5.1 deep_transform_values and deep_transform_values!","anchor":"#deep-transform-values-and-deep-transform-values-bang","code":["\nhash = { person: { name: 'Rob', age: '28' } }\n\nhash.deep_transform_values{ |value| value.to_s.upcase }\n# => {person: {name: \"ROB\", age: \"28\"}}\n\nhash = { person: { name: 'Rob', age: '28' } }\n\nhash.deep_transform_values{ |value| value.to_s.upcase }\n# => {person: {name: \"ROB\", age: \"28\"}}\n\nCopy\n"],"body":"The method deep_transform_values returns a new hash with all values converted by the block operation. This includes the values from the root hash and from all nested hashes and arrays.There's also the bang variant deep_transform_values! that destructively converts all values by using the block operation."},{"title":"12.6 Slicing","anchor":"#slicing","code":["\nhash = {a: 1, b: 2}\nrest = hash.slice!(:a) # => {:b=>2}\nhash                   # => {:a=>1}\n\nhash = {a: 1, b: 2}\nrest = hash.slice!(:a) # => {:b=>2}\nhash                   # => {:a=>1}\n\nCopy\n"],"body":"The method slice! replaces the hash with only the given keys and returns a hash containing the removed key/value pairs."},{"title":"12.7 Extracting","anchor":"#extensions-to-hash-extracting","code":["\nhash = {a: 1, b: 2}\nrest = hash.extract!(:a) # => {:a=>1}\nhash                     # => {:b=>2}\n\nhash = {a: 1, b: 2}\nrest = hash.extract!(:a) # => {:a=>1}\nhash                     # => {:b=>2}\n\nCopy\n","\nhash = {a: 1, b: 2}.with_indifferent_access\nrest = hash.extract!(:a).class\n# => ActiveSupport::HashWithIndifferentAccess\n\nhash = {a: 1, b: 2}.with_indifferent_access\nrest = hash.extract!(:a).class\n# => ActiveSupport::HashWithIndifferentAccess\n\nCopy\n"],"body":"The method extract! removes and returns the key/value pairs matching the given keys.The method extract! returns the same subclass of Hash that the receiver is."},{"title":"12.8 Indifferent Access","anchor":"#indifferent-access","code":["\n{a: 1}.with_indifferent_access[\"a\"] # => 1\n\n{a: 1}.with_indifferent_access[\"a\"] # => 1\n\nCopy\n"],"body":"The method with_indifferent_access returns an ActiveSupport::HashWithIndifferentAccess out of its receiver:"},{"title":"13 Extensions to Regexp","anchor":"#extensions-to-regexp","code":[],"body":""},{"title":"13.1 multiline?","anchor":"#multiline-questionmark","code":["\n%r{.}.multiline?  # => false\n%r{.}m.multiline? # => true\n\nRegexp.new('.').multiline?                    # => false\nRegexp.new('.', Regexp::MULTILINE).multiline? # => true\n\n%r{.}.multiline?  # => false\n%r{.}m.multiline? # => true\n\nRegexp.new('.').multiline?                    # => false\nRegexp.new('.', Regexp::MULTILINE).multiline? # => true\n\nCopy\n","\ndef verify_regexp_requirements(requirements)\n  # ...\n  if requirement.multiline?\n    raise ArgumentError, \"Regexp multiline option is not allowed in routing requirements: #{requirement.inspect}\"\n  end\n  # ...\nend\n\ndef verify_regexp_requirements(requirements)\n  # ...\n  if requirement.multiline?\n    raise ArgumentError, \"Regexp multiline option is not allowed in routing requirements: #{requirement.inspect}\"\n  end\n  # ...\nend\n\nCopy\n"],"body":"The method multiline? says whether a regexp has the /m flag set, that is, whether the dot matches newlines.Rails uses this method in a single place, also in the routing code. Multiline regexps are disallowed for route requirements and this flag eases enforcing that constraint."},{"title":"14 Extensions to Range","anchor":"#extensions-to-range","code":[],"body":""},{"title":"14.1 to_s","anchor":"#extensions-to-range-to-s","code":["\n(Date.today..Date.tomorrow).to_s\n# => \"2009-10-25..2009-10-26\"\n\n(Date.today..Date.tomorrow).to_s(:db)\n# => \"BETWEEN '2009-10-25' AND '2009-10-26'\"\n\n(Date.today..Date.tomorrow).to_s\n# => \"2009-10-25..2009-10-26\"\n\n(Date.today..Date.tomorrow).to_s(:db)\n# => \"BETWEEN '2009-10-25' AND '2009-10-26'\"\n\nCopy\n"],"body":"Active Support extends the method Range#to_s so that it understands an optional format argument. As of this writing the only supported non-default format is :db:As the example depicts, the :db format generates a BETWEEN SQL clause. That is used by Active Record in its support for range values in conditions."},{"title":"14.2 ===, include?, and cover?","anchor":"#include-questionmark-and-cover-questionmark","code":["\n(2..3).include?(Math::E) # => true\n\n(2..3).include?(Math::E) # => true\n\nCopy\n","\n(1..10) === (3..7)  # => true\n(1..10) === (0..7)  # => false\n(1..10) === (3..11) # => false\n(1...9) === (3..9)  # => false\n\n(1..10).include?(3..7)  # => true\n(1..10).include?(0..7)  # => false\n(1..10).include?(3..11) # => false\n(1...9).include?(3..9)  # => false\n\n(1..10).cover?(3..7)  # => true\n(1..10).cover?(0..7)  # => false\n(1..10).cover?(3..11) # => false\n(1...9).cover?(3..9)  # => false\n\n(1..10) === (3..7)  # => true\n(1..10) === (0..7)  # => false\n(1..10) === (3..11) # => false\n(1...9) === (3..9)  # => false\n\n(1..10).include?(3..7)  # => true\n(1..10).include?(0..7)  # => false\n(1..10).include?(3..11) # => false\n(1...9).include?(3..9)  # => false\n\n(1..10).cover?(3..7)  # => true\n(1..10).cover?(0..7)  # => false\n(1..10).cover?(3..11) # => false\n(1...9).cover?(3..9)  # => false\n\nCopy\n"],"body":"The methods Range#===, Range#include?, and Range#cover? say whether some value falls between the ends of a given instance:Active Support extends these methods so that the argument may be another range in turn. In that case we test whether the ends of the argument range belong to the receiver themselves:"},{"title":"14.3 overlaps?","anchor":"#overlaps-questionmark","code":["\n(1..10).overlaps?(7..11)  # => true\n(1..10).overlaps?(0..7)   # => true\n(1..10).overlaps?(11..27) # => false\n\n(1..10).overlaps?(7..11)  # => true\n(1..10).overlaps?(0..7)   # => true\n(1..10).overlaps?(11..27) # => false\n\nCopy\n"],"body":"The method Range#overlaps? says whether any two given ranges have non-void intersection:"},{"title":"15 Extensions to Date","anchor":"#extensions-to-date","code":[],"body":""},{"title":"15.1 Calculations","anchor":"#extensions-to-date-calculations","code":[],"body":""},{"title":"15.1.1 Date.current","anchor":"#date-current","code":[],"body":"Active Support defines Date.current to be today in the current time zone. That's like Date.today, except that it honors the user time zone, if defined. It also defines Date.yesterday and Date.tomorrow, and the instance predicates past?, today?, tomorrow?, next_day?, yesterday?, prev_day?, future?, on_weekday? and on_weekend?, all of them relative to Date.current.When making Date comparisons using methods which honor the user time zone, make sure to use Date.current and not Date.today. There are cases where the user time zone might be in the future compared to the system time zone, which Date.today uses by default. This means Date.today may equal Date.yesterday."},{"title":"15.1.2 Named dates","anchor":"#named-dates","code":["\nd = Date.new(2010, 5, 8)     # => Sat, 08 May 2010\nd.beginning_of_week          # => Mon, 03 May 2010\nd.beginning_of_week(:sunday) # => Sun, 02 May 2010\nd.end_of_week                # => Sun, 09 May 2010\nd.end_of_week(:sunday)       # => Sat, 08 May 2010\n\nd = Date.new(2010, 5, 8)     # => Sat, 08 May 2010\nd.beginning_of_week          # => Mon, 03 May 2010\nd.beginning_of_week(:sunday) # => Sun, 02 May 2010\nd.end_of_week                # => Sun, 09 May 2010\nd.end_of_week(:sunday)       # => Sat, 08 May 2010\n\nCopy\n","\nd = Date.new(2010, 5, 8)     # => Sat, 08 May 2010\nd.monday                     # => Mon, 03 May 2010\nd.sunday                     # => Sun, 09 May 2010\n\nd = Date.new(2012, 9, 10)    # => Mon, 10 Sep 2012\nd.monday                     # => Mon, 10 Sep 2012\n\nd = Date.new(2012, 9, 16)    # => Sun, 16 Sep 2012\nd.sunday                     # => Sun, 16 Sep 2012\n\nd = Date.new(2010, 5, 8)     # => Sat, 08 May 2010\nd.monday                     # => Mon, 03 May 2010\nd.sunday                     # => Sun, 09 May 2010\n\nd = Date.new(2012, 9, 10)    # => Mon, 10 Sep 2012\nd.monday                     # => Mon, 10 Sep 2012\n\nd = Date.new(2012, 9, 16)    # => Sun, 16 Sep 2012\nd.sunday                     # => Sun, 16 Sep 2012\n\nCopy\n","\nd = Date.new(2010, 5, 9) # => Sun, 09 May 2010\nd.next_week              # => Mon, 10 May 2010\nd.next_week(:saturday)   # => Sat, 15 May 2010\n\nd = Date.new(2010, 5, 9) # => Sun, 09 May 2010\nd.next_week              # => Mon, 10 May 2010\nd.next_week(:saturday)   # => Sat, 15 May 2010\n\nCopy\n","\nd.prev_week              # => Mon, 26 Apr 2010\nd.prev_week(:saturday)   # => Sat, 01 May 2010\nd.prev_week(:friday)     # => Fri, 30 Apr 2010\n\nd.prev_week              # => Mon, 26 Apr 2010\nd.prev_week(:saturday)   # => Sat, 01 May 2010\nd.prev_week(:friday)     # => Fri, 30 Apr 2010\n\nCopy\n","\nd = Date.new(2010, 5, 9) # => Sun, 09 May 2010\nd.beginning_of_month     # => Sat, 01 May 2010\nd.end_of_month           # => Mon, 31 May 2010\n\nd = Date.new(2010, 5, 9) # => Sun, 09 May 2010\nd.beginning_of_month     # => Sat, 01 May 2010\nd.end_of_month           # => Mon, 31 May 2010\n\nCopy\n","\nd = Date.new(2010, 5, 9) # => Sun, 09 May 2010\nd.beginning_of_quarter   # => Thu, 01 Apr 2010\nd.end_of_quarter         # => Wed, 30 Jun 2010\n\nd = Date.new(2010, 5, 9) # => Sun, 09 May 2010\nd.beginning_of_quarter   # => Thu, 01 Apr 2010\nd.end_of_quarter         # => Wed, 30 Jun 2010\n\nCopy\n","\nd = Date.new(2010, 5, 9) # => Sun, 09 May 2010\nd.beginning_of_year      # => Fri, 01 Jan 2010\nd.end_of_year            # => Fri, 31 Dec 2010\n\nd = Date.new(2010, 5, 9) # => Sun, 09 May 2010\nd.beginning_of_year      # => Fri, 01 Jan 2010\nd.end_of_year            # => Fri, 31 Dec 2010\n\nCopy\n"],"body":"The methods beginning_of_week and end_of_week return the dates for the\nbeginning and end of the week, respectively. Weeks are assumed to start on\nMonday, but that can be changed passing an argument, setting thread local\nDate.beginning_of_week or config.beginning_of_week.beginning_of_week is aliased to at_beginning_of_week and end_of_week is aliased to at_end_of_week.The methods monday and sunday return the dates for the previous Monday and\nnext Sunday, respectively.The method next_week receives a symbol with a day name in English (default is the thread local Date.beginning_of_week, or config.beginning_of_week, or :monday) and it returns the date corresponding to that day.The method prev_week is analogous:prev_week is aliased to last_week.Both next_week and prev_week work as expected when Date.beginning_of_week or config.beginning_of_week are set.The methods beginning_of_month and end_of_month return the dates for the beginning and end of the month:beginning_of_month is aliased to at_beginning_of_month, and end_of_month is aliased to at_end_of_month.The methods beginning_of_quarter and end_of_quarter return the dates for the beginning and end of the quarter of the receiver's calendar year:beginning_of_quarter is aliased to at_beginning_of_quarter, and end_of_quarter is aliased to at_end_of_quarter.The methods beginning_of_year and end_of_year return the dates for the beginning and end of the year:beginning_of_year is aliased to at_beginning_of_year, and end_of_year is aliased to at_end_of_year."},{"title":"15.1.3 Other Date Computations","anchor":"#other-date-computations","code":["\ndate = Date.new(2010, 6, 7)\ndate.years_ago(10) # => Wed, 07 Jun 2000\n\ndate = Date.new(2010, 6, 7)\ndate.years_ago(10) # => Wed, 07 Jun 2000\n\nCopy\n","\ndate = Date.new(2010, 6, 7)\ndate.years_since(10) # => Sun, 07 Jun 2020\n\ndate = Date.new(2010, 6, 7)\ndate.years_since(10) # => Sun, 07 Jun 2020\n\nCopy\n","\nDate.new(2012, 2, 29).years_ago(3)     # => Sat, 28 Feb 2009\nDate.new(2012, 2, 29).years_since(3)   # => Sat, 28 Feb 2015\n\nDate.new(2012, 2, 29).years_ago(3)     # => Sat, 28 Feb 2009\nDate.new(2012, 2, 29).years_since(3)   # => Sat, 28 Feb 2015\n\nCopy\n","\nDate.new(2010, 4, 30).months_ago(2)   # => Sun, 28 Feb 2010\nDate.new(2010, 4, 30).months_since(2) # => Wed, 30 Jun 2010\n\nDate.new(2010, 4, 30).months_ago(2)   # => Sun, 28 Feb 2010\nDate.new(2010, 4, 30).months_since(2) # => Wed, 30 Jun 2010\n\nCopy\n","\nDate.new(2010, 4, 30).months_ago(2)    # => Sun, 28 Feb 2010\nDate.new(2009, 12, 31).months_since(2) # => Sun, 28 Feb 2010\n\nDate.new(2010, 4, 30).months_ago(2)    # => Sun, 28 Feb 2010\nDate.new(2009, 12, 31).months_since(2) # => Sun, 28 Feb 2010\n\nCopy\n","\nDate.new(2010, 5, 24).weeks_ago(1)    # => Mon, 17 May 2010\nDate.new(2010, 5, 24).weeks_ago(2)    # => Mon, 10 May 2010\n\nDate.new(2010, 5, 24).weeks_ago(1)    # => Mon, 17 May 2010\nDate.new(2010, 5, 24).weeks_ago(2)    # => Mon, 10 May 2010\n\nCopy\n","\ndate = Date.new(2010, 6, 6)\ndate.advance(years: 1, weeks: 2)  # => Mon, 20 Jun 2011\ndate.advance(months: 2, days: -2) # => Wed, 04 Aug 2010\n\ndate = Date.new(2010, 6, 6)\ndate.advance(years: 1, weeks: 2)  # => Mon, 20 Jun 2011\ndate.advance(months: 2, days: -2) # => Wed, 04 Aug 2010\n\nCopy\n","\nDate.new(2010, 2, 28).advance(months: 1, days: 1)\n# => Sun, 29 Mar 2010\n\nDate.new(2010, 2, 28).advance(months: 1, days: 1)\n# => Sun, 29 Mar 2010\n\nCopy\n","\nDate.new(2010, 2, 28).advance(days: 1).advance(months: 1)\n# => Thu, 01 Apr 2010\n\nDate.new(2010, 2, 28).advance(days: 1).advance(months: 1)\n# => Thu, 01 Apr 2010\n\nCopy\n"],"body":"The method years_ago receives a number of years and returns the same date those many years ago:years_since moves forward in time:If such a day does not exist, the last day of the corresponding month is returned:last_year is short-hand for #years_ago(1).The methods months_ago and months_since work analogously for months:If such a day does not exist, the last day of the corresponding month is returned:last_month is short-hand for #months_ago(1).The method weeks_ago works analogously for weeks:The most generic way to jump to other days is advance. This method receives a hash with keys :years, :months, :weeks, :days, and returns a date advanced as much as the present keys indicate:Note in the previous example that increments may be negative.To perform the computation the method first increments years, then months, then weeks, and finally days. This order is important towards the end of months. Say for example we are at the end of February of 2010, and we want to move one month and one day forward.The method advance advances first one month, and then one day, the result is:While if it did it the other way around the result would be different:"},{"title":"15.1.4 Changing Components","anchor":"#extensions-to-date-calculations-changing-components","code":["\nDate.new(2010, 12, 23).change(year: 2011, month: 11)\n# => Wed, 23 Nov 2011\n\nDate.new(2010, 12, 23).change(year: 2011, month: 11)\n# => Wed, 23 Nov 2011\n\nCopy\n","\nDate.new(2010, 1, 31).change(month: 2)\n# => ArgumentError: invalid date\n\nDate.new(2010, 1, 31).change(month: 2)\n# => ArgumentError: invalid date\n\nCopy\n"],"body":"The method change allows you to get a new date which is the same as the receiver except for the given year, month, or day:This method is not tolerant to non-existing dates, if the change is invalid ArgumentError is raised:"},{"title":"15.1.5 Durations","anchor":"#extensions-to-date-calculations-durations","code":["\nd = Date.current\n# => Mon, 09 Aug 2010\nd + 1.year\n# => Tue, 09 Aug 2011\nd - 3.hours\n# => Sun, 08 Aug 2010 21:00:00 UTC +00:00\n\nd = Date.current\n# => Mon, 09 Aug 2010\nd + 1.year\n# => Tue, 09 Aug 2011\nd - 3.hours\n# => Sun, 08 Aug 2010 21:00:00 UTC +00:00\n\nCopy\n","\nDate.new(1582, 10, 4) + 1.day\n# => Fri, 15 Oct 1582\n\nDate.new(1582, 10, 4) + 1.day\n# => Fri, 15 Oct 1582\n\nCopy\n"],"body":"Duration objects can be added to and subtracted from dates:They translate to calls to since or advance. For example here we get the correct jump in the calendar reform:"},{"code":["\ndate = Date.new(2010, 6, 7)\ndate.beginning_of_day # => Mon Jun 07 00:00:00 +0200 2010\n\ndate = Date.new(2010, 6, 7)\ndate.beginning_of_day # => Mon Jun 07 00:00:00 +0200 2010\n\nCopy\n","\ndate = Date.new(2010, 6, 7)\ndate.end_of_day # => Mon Jun 07 23:59:59 +0200 2010\n\ndate = Date.new(2010, 6, 7)\ndate.end_of_day # => Mon Jun 07 23:59:59 +0200 2010\n\nCopy\n","\ndate = DateTime.new(2010, 6, 7, 19, 55, 25)\ndate.beginning_of_hour # => Mon Jun 07 19:00:00 +0200 2010\n\ndate = DateTime.new(2010, 6, 7, 19, 55, 25)\ndate.beginning_of_hour # => Mon Jun 07 19:00:00 +0200 2010\n\nCopy\n","\ndate = DateTime.new(2010, 6, 7, 19, 55, 25)\ndate.end_of_hour # => Mon Jun 07 19:59:59 +0200 2010\n\ndate = DateTime.new(2010, 6, 7, 19, 55, 25)\ndate.end_of_hour # => Mon Jun 07 19:59:59 +0200 2010\n\nCopy\n","\ndate = DateTime.new(2010, 6, 7, 19, 55, 25)\ndate.beginning_of_minute # => Mon Jun 07 19:55:00 +0200 2010\n\ndate = DateTime.new(2010, 6, 7, 19, 55, 25)\ndate.beginning_of_minute # => Mon Jun 07 19:55:00 +0200 2010\n\nCopy\n","\ndate = DateTime.new(2010, 6, 7, 19, 55, 25)\ndate.end_of_minute # => Mon Jun 07 19:55:59 +0200 2010\n\ndate = DateTime.new(2010, 6, 7, 19, 55, 25)\ndate.end_of_minute # => Mon Jun 07 19:55:59 +0200 2010\n\nCopy\n","\ndate = Date.current # => Fri, 11 Jun 2010\ndate.ago(1)         # => Thu, 10 Jun 2010 23:59:59 EDT -04:00\n\ndate = Date.current # => Fri, 11 Jun 2010\ndate.ago(1)         # => Thu, 10 Jun 2010 23:59:59 EDT -04:00\n\nCopy\n","\ndate = Date.current # => Fri, 11 Jun 2010\ndate.since(1)       # => Fri, 11 Jun 2010 00:00:01 EDT -04:00\n\ndate = Date.current # => Fri, 11 Jun 2010\ndate.since(1)       # => Fri, 11 Jun 2010 00:00:01 EDT -04:00\n\nCopy\n"],"body":"The method beginning_of_day returns a timestamp at the beginning of the day (00:00:00):The method end_of_day returns a timestamp at the end of the day (23:59:59):beginning_of_day is aliased to at_beginning_of_day, midnight, at_midnight.The method beginning_of_hour returns a timestamp at the beginning of the hour (hh:00:00):The method end_of_hour returns a timestamp at the end of the hour (hh:59:59):beginning_of_hour is aliased to at_beginning_of_hour.The method beginning_of_minute returns a timestamp at the beginning of the minute (hh:mm:00):The method end_of_minute returns a timestamp at the end of the minute (hh:mm:59):beginning_of_minute is aliased to at_beginning_of_minute.The method ago receives a number of seconds as argument and returns a timestamp those many seconds ago from midnight:Similarly, since moves forward:","title":"15.1.6 Timestamps","anchor":"#timestamps"},{"title":"15.1.7 Other Time Computations","anchor":"#other-time-computations","code":[],"body":""},{"title":"15.2 Conversions","anchor":"#extensions-to-date-conversions","code":[],"body":""},{"title":"16 Extensions to DateTime","anchor":"#extensions-to-datetime","code":[],"body":""},{"title":"16.1 Calculations","anchor":"#extensions-to-datetime-calculations","code":[],"body":"The class DateTime is a subclass of Date so by loading active_support/core_ext/date/calculations.rb you inherit these methods and their aliases, except that they will always return datetimes.The following methods are reimplemented so you do not need to load active_support/core_ext/date/calculations.rb for these ones:On the other hand, advance and change are also defined and support more options, they are documented below.The following methods are only implemented in active_support/core_ext/date_time/calculations.rb as they only make sense when used with a DateTime instance:"},{"code":[],"body":"Active Support defines DateTime.current to be like Time.now.to_datetime, except that it honors the user time zone, if defined. The instance predicates past? and future? are defined relative to DateTime.current.","title":"16.1.1 Named Datetimes","anchor":"#named-datetimes"},{"title":"16.1.2 Other Extensions","anchor":"#other-extensions","code":["\nnow = DateTime.current     # => Mon, 07 Jun 2010 20:26:36 +0000\nnow.seconds_since_midnight # => 73596\n\nnow = DateTime.current     # => Mon, 07 Jun 2010 20:26:36 +0000\nnow.seconds_since_midnight # => 73596\n\nCopy\n","\nnow = DateTime.current # => Mon, 07 Jun 2010 19:27:52 -0400\nnow.utc                # => Mon, 07 Jun 2010 23:27:52 +0000\n\nnow = DateTime.current # => Mon, 07 Jun 2010 19:27:52 -0400\nnow.utc                # => Mon, 07 Jun 2010 23:27:52 +0000\n\nCopy\n","\nnow = DateTime.now # => Mon, 07 Jun 2010 19:30:47 -0400\nnow.utc?           # => false\nnow.utc.utc?       # => true\n\nnow = DateTime.now # => Mon, 07 Jun 2010 19:30:47 -0400\nnow.utc?           # => false\nnow.utc.utc?       # => true\n\nCopy\n","\nd = DateTime.current\n# => Thu, 05 Aug 2010 11:33:31 +0000\nd.advance(years: 1, months: 1, days: 1, hours: 1, minutes: 1, seconds: 1)\n# => Tue, 06 Sep 2011 12:34:32 +0000\n\nd = DateTime.current\n# => Thu, 05 Aug 2010 11:33:31 +0000\nd.advance(years: 1, months: 1, days: 1, hours: 1, minutes: 1, seconds: 1)\n# => Tue, 06 Sep 2011 12:34:32 +0000\n\nCopy\n","\nd = DateTime.new(2010, 2, 28, 23, 59, 59)\n# => Sun, 28 Feb 2010 23:59:59 +0000\nd.advance(months: 1, seconds: 1)\n# => Mon, 29 Mar 2010 00:00:00 +0000\n\nd = DateTime.new(2010, 2, 28, 23, 59, 59)\n# => Sun, 28 Feb 2010 23:59:59 +0000\nd.advance(months: 1, seconds: 1)\n# => Mon, 29 Mar 2010 00:00:00 +0000\n\nCopy\n","\nd.advance(seconds: 1).advance(months: 1)\n# => Thu, 01 Apr 2010 00:00:00 +0000\n\nd.advance(seconds: 1).advance(months: 1)\n# => Thu, 01 Apr 2010 00:00:00 +0000\n\nCopy\n"],"body":"The method seconds_since_midnight returns the number of seconds since midnight:The method utc gives you the same datetime in the receiver expressed in UTC.This method is also aliased as getutc.The predicate utc? says whether the receiver has UTC as its time zone:The most generic way to jump to another datetime is advance. This method receives a hash with keys :years, :months, :weeks, :days, :hours, :minutes, and :seconds, and returns a datetime advanced as much as the present keys indicate.This method first computes the destination date passing :years, :months, :weeks, and :days to Date#advance documented above. After that, it adjusts the time calling since with the number of seconds to advance. This order is relevant, a different ordering would give different datetimes in some edge-cases. The example in Date#advance applies, and we can extend it to show order relevance related to the time bits.If we first move the date bits (that have also a relative order of processing, as documented before), and then the time bits we get for example the following computation:but if we computed them the other way around, the result would be different:"},{"title":"16.1.3 Changing Components","anchor":"#extensions-to-datetime-calculations-changing-components","code":["\nnow = DateTime.current\n# => Tue, 08 Jun 2010 01:56:22 +0000\nnow.change(year: 2011, offset: Rational(-6, 24))\n# => Wed, 08 Jun 2011 01:56:22 -0600\n\nnow = DateTime.current\n# => Tue, 08 Jun 2010 01:56:22 +0000\nnow.change(year: 2011, offset: Rational(-6, 24))\n# => Wed, 08 Jun 2011 01:56:22 -0600\n\nCopy\n","\nnow.change(hour: 0)\n# => Tue, 08 Jun 2010 00:00:00 +0000\n\nnow.change(hour: 0)\n# => Tue, 08 Jun 2010 00:00:00 +0000\n\nCopy\n","\nnow.change(min: 0)\n# => Tue, 08 Jun 2010 01:00:00 +0000\n\nnow.change(min: 0)\n# => Tue, 08 Jun 2010 01:00:00 +0000\n\nCopy\n","\nDateTime.current.change(month: 2, day: 30)\n# => ArgumentError: invalid date\n\nDateTime.current.change(month: 2, day: 30)\n# => ArgumentError: invalid date\n\nCopy\n"],"body":"The method change allows you to get a new datetime which is the same as the receiver except for the given options, which may include :year, :month, :day, :hour, :min, :sec, :offset, :start:If hours are zeroed, then minutes and seconds are too (unless they have given values):Similarly, if minutes are zeroed, then seconds are too (unless it has given a value):This method is not tolerant to non-existing dates, if the change is invalid ArgumentError is raised:"},{"title":"16.1.4 Durations","anchor":"#extensions-to-datetime-calculations-durations","code":["\nnow = DateTime.current\n# => Mon, 09 Aug 2010 23:15:17 +0000\nnow + 1.year\n# => Tue, 09 Aug 2011 23:15:17 +0000\nnow - 1.week\n# => Mon, 02 Aug 2010 23:15:17 +0000\n\nnow = DateTime.current\n# => Mon, 09 Aug 2010 23:15:17 +0000\nnow + 1.year\n# => Tue, 09 Aug 2011 23:15:17 +0000\nnow - 1.week\n# => Mon, 02 Aug 2010 23:15:17 +0000\n\nCopy\n","\nDateTime.new(1582, 10, 4, 23) + 1.hour\n# => Fri, 15 Oct 1582 00:00:00 +0000\n\nDateTime.new(1582, 10, 4, 23) + 1.hour\n# => Fri, 15 Oct 1582 00:00:00 +0000\n\nCopy\n"],"body":"Duration objects can be added to and subtracted from datetimes:They translate to calls to since or advance. For example here we get the correct jump in the calendar reform:"},{"code":[],"body":"","title":"17 Extensions to Time","anchor":"#extensions-to-time"},{"title":"17.1 Calculations","anchor":"#calculations","code":["\nTime.zone_default\n# => #<ActiveSupport::TimeZone:0x7f73654d4f38 @utc_offset=nil, @name=\"Madrid\", ...>\n\n# In Barcelona, 2010/03/28 02:00 +0100 becomes 2010/03/28 03:00 +0200 due to DST.\nt = Time.local(2010, 3, 28, 1, 59, 59)\n# => Sun Mar 28 01:59:59 +0100 2010\nt.advance(seconds: 1)\n# => Sun Mar 28 03:00:00 +0200 2010\n\nTime.zone_default\n# => #<ActiveSupport::TimeZone:0x7f73654d4f38 @utc_offset=nil, @name=\"Madrid\", ...>\n\n# In Barcelona, 2010/03/28 02:00 +0100 becomes 2010/03/28 03:00 +0200 due to DST.\nt = Time.local(2010, 3, 28, 1, 59, 59)\n# => Sun Mar 28 01:59:59 +0100 2010\nt.advance(seconds: 1)\n# => Sun Mar 28 03:00:00 +0200 2010\n\nCopy\n"],"body":"They are analogous. Please refer to their documentation above and take into account the following differences:"},{"code":[],"body":"Active Support defines Time.current to be today in the current time zone. That's like Time.now, except that it honors the user time zone, if defined. It also defines the instance predicates past?, today?, tomorrow?, next_day?, yesterday?, prev_day? and future?, all of them relative to Time.current.When making Time comparisons using methods which honor the user time zone, make sure to use Time.current instead of Time.now. There are cases where the user time zone might be in the future compared to the system time zone, which Time.now uses by default. This means Time.now.to_date may equal Date.yesterday.","title":"17.1.1 Time.current","anchor":"#time-current"},{"title":"17.1.2 all_day, all_week, all_month, all_quarter and all_year","anchor":"#all-day-all-week-all-month-all-quarter-and-all-year","code":["\nnow = Time.current\n# => Mon, 09 Aug 2010 23:20:05 UTC +00:00\nnow.all_day\n# => Mon, 09 Aug 2010 00:00:00 UTC +00:00..Mon, 09 Aug 2010 23:59:59 UTC +00:00\n\nnow = Time.current\n# => Mon, 09 Aug 2010 23:20:05 UTC +00:00\nnow.all_day\n# => Mon, 09 Aug 2010 00:00:00 UTC +00:00..Mon, 09 Aug 2010 23:59:59 UTC +00:00\n\nCopy\n","\nnow = Time.current\n# => Mon, 09 Aug 2010 23:20:05 UTC +00:00\nnow.all_week\n# => Mon, 09 Aug 2010 00:00:00 UTC +00:00..Sun, 15 Aug 2010 23:59:59 UTC +00:00\nnow.all_week(:sunday)\n# => Sun, 16 Sep 2012 00:00:00 UTC +00:00..Sat, 22 Sep 2012 23:59:59 UTC +00:00\nnow.all_month\n# => Sat, 01 Aug 2010 00:00:00 UTC +00:00..Tue, 31 Aug 2010 23:59:59 UTC +00:00\nnow.all_quarter\n# => Thu, 01 Jul 2010 00:00:00 UTC +00:00..Thu, 30 Sep 2010 23:59:59 UTC +00:00\nnow.all_year\n# => Fri, 01 Jan 2010 00:00:00 UTC +00:00..Fri, 31 Dec 2010 23:59:59 UTC +00:00\n\nnow = Time.current\n# => Mon, 09 Aug 2010 23:20:05 UTC +00:00\nnow.all_week\n# => Mon, 09 Aug 2010 00:00:00 UTC +00:00..Sun, 15 Aug 2010 23:59:59 UTC +00:00\nnow.all_week(:sunday)\n# => Sun, 16 Sep 2012 00:00:00 UTC +00:00..Sat, 22 Sep 2012 23:59:59 UTC +00:00\nnow.all_month\n# => Sat, 01 Aug 2010 00:00:00 UTC +00:00..Tue, 31 Aug 2010 23:59:59 UTC +00:00\nnow.all_quarter\n# => Thu, 01 Jul 2010 00:00:00 UTC +00:00..Thu, 30 Sep 2010 23:59:59 UTC +00:00\nnow.all_year\n# => Fri, 01 Jan 2010 00:00:00 UTC +00:00..Fri, 31 Dec 2010 23:59:59 UTC +00:00\n\nCopy\n"],"body":"The method all_day returns a range representing the whole day of the current time.Analogously, all_week, all_month, all_quarter and all_year all serve the purpose of generating time ranges."},{"title":"17.1.3 prev_day, next_day","anchor":"#prev-day-next-day","code":["\nt = Time.new(2010, 5, 8) # => 2010-05-08 00:00:00 +0900\nt.prev_day               # => 2010-05-07 00:00:00 +0900\nt.next_day               # => 2010-05-09 00:00:00 +0900\n\nt = Time.new(2010, 5, 8) # => 2010-05-08 00:00:00 +0900\nt.prev_day               # => 2010-05-07 00:00:00 +0900\nt.next_day               # => 2010-05-09 00:00:00 +0900\n\nCopy\n"],"body":"prev_day and next_day return the time in the last or next day:"},{"title":"17.1.4 prev_month, next_month","anchor":"#prev-month-next-month","code":["\nt = Time.new(2010, 5, 8) # => 2010-05-08 00:00:00 +0900\nt.prev_month             # => 2010-04-08 00:00:00 +0900\nt.next_month             # => 2010-06-08 00:00:00 +0900\n\nt = Time.new(2010, 5, 8) # => 2010-05-08 00:00:00 +0900\nt.prev_month             # => 2010-04-08 00:00:00 +0900\nt.next_month             # => 2010-06-08 00:00:00 +0900\n\nCopy\n","\nTime.new(2000, 5, 31).prev_month # => 2000-04-30 00:00:00 +0900\nTime.new(2000, 3, 31).prev_month # => 2000-02-29 00:00:00 +0900\nTime.new(2000, 5, 31).next_month # => 2000-06-30 00:00:00 +0900\nTime.new(2000, 1, 31).next_month # => 2000-02-29 00:00:00 +0900\n\nTime.new(2000, 5, 31).prev_month # => 2000-04-30 00:00:00 +0900\nTime.new(2000, 3, 31).prev_month # => 2000-02-29 00:00:00 +0900\nTime.new(2000, 5, 31).next_month # => 2000-06-30 00:00:00 +0900\nTime.new(2000, 1, 31).next_month # => 2000-02-29 00:00:00 +0900\n\nCopy\n"],"body":"prev_month and next_month return the time with the same day in the last or next month:If such a day does not exist, the last day of the corresponding month is returned:"},{"title":"17.1.5 prev_year, next_year","anchor":"#prev-year-next-year","code":["\nt = Time.new(2010, 5, 8) # => 2010-05-08 00:00:00 +0900\nt.prev_year              # => 2009-05-08 00:00:00 +0900\nt.next_year              # => 2011-05-08 00:00:00 +0900\n\nt = Time.new(2010, 5, 8) # => 2010-05-08 00:00:00 +0900\nt.prev_year              # => 2009-05-08 00:00:00 +0900\nt.next_year              # => 2011-05-08 00:00:00 +0900\n\nCopy\n","\nt = Time.new(2000, 2, 29) # => 2000-02-29 00:00:00 +0900\nt.prev_year               # => 1999-02-28 00:00:00 +0900\nt.next_year               # => 2001-02-28 00:00:00 +0900\n\nt = Time.new(2000, 2, 29) # => 2000-02-29 00:00:00 +0900\nt.prev_year               # => 1999-02-28 00:00:00 +0900\nt.next_year               # => 2001-02-28 00:00:00 +0900\n\nCopy\n"],"body":"prev_year and next_year return a time with the same day/month in the last or next year:If date is the 29th of February of a leap year, you obtain the 28th:"},{"title":"17.1.6 prev_quarter, next_quarter","anchor":"#prev-quarter-next-quarter","code":["\nt = Time.local(2010, 5, 8) # => 2010-05-08 00:00:00 +0300\nt.prev_quarter             # => 2010-02-08 00:00:00 +0200\nt.next_quarter             # => 2010-08-08 00:00:00 +0300\n\nt = Time.local(2010, 5, 8) # => 2010-05-08 00:00:00 +0300\nt.prev_quarter             # => 2010-02-08 00:00:00 +0200\nt.next_quarter             # => 2010-08-08 00:00:00 +0300\n\nCopy\n","\nTime.local(2000, 7, 31).prev_quarter  # => 2000-04-30 00:00:00 +0300\nTime.local(2000, 5, 31).prev_quarter  # => 2000-02-29 00:00:00 +0200\nTime.local(2000, 10, 31).prev_quarter # => 2000-07-31 00:00:00 +0300\nTime.local(2000, 11, 31).next_quarter # => 2001-03-01 00:00:00 +0200\n\nTime.local(2000, 7, 31).prev_quarter  # => 2000-04-30 00:00:00 +0300\nTime.local(2000, 5, 31).prev_quarter  # => 2000-02-29 00:00:00 +0200\nTime.local(2000, 10, 31).prev_quarter # => 2000-07-31 00:00:00 +0300\nTime.local(2000, 11, 31).next_quarter # => 2001-03-01 00:00:00 +0200\n\nCopy\n"],"body":"prev_quarter and next_quarter return the date with the same day in the previous or next quarter:If such a day does not exist, the last day of the corresponding month is returned:prev_quarter is aliased to last_quarter."},{"title":"17.2 Time Constructors","anchor":"#time-constructors","code":["\nTime.zone_default\n# => #<ActiveSupport::TimeZone:0x7f73654d4f38 @utc_offset=nil, @name=\"Madrid\", ...>\nTime.current\n# => Fri, 06 Aug 2010 17:11:58 CEST +02:00\n\nTime.zone_default\n# => #<ActiveSupport::TimeZone:0x7f73654d4f38 @utc_offset=nil, @name=\"Madrid\", ...>\nTime.current\n# => Fri, 06 Aug 2010 17:11:58 CEST +02:00\n\nCopy\n"],"body":"Active Support defines Time.current to be Time.zone.now if there's a user time zone defined, with fallback to Time.now:Analogously to DateTime, the predicates past?, and future? are relative to Time.current.If the time to be constructed lies beyond the range supported by Time in the runtime platform, usecs are discarded and a DateTime object is returned instead."},{"title":"17.2.1 Durations","anchor":"#durations","code":["\nnow = Time.current\n# => Mon, 09 Aug 2010 23:20:05 UTC +00:00\nnow + 1.year\n# => Tue, 09 Aug 2011 23:21:11 UTC +00:00\nnow - 1.week\n# => Mon, 02 Aug 2010 23:21:11 UTC +00:00\n\nnow = Time.current\n# => Mon, 09 Aug 2010 23:20:05 UTC +00:00\nnow + 1.year\n# => Tue, 09 Aug 2011 23:21:11 UTC +00:00\nnow - 1.week\n# => Mon, 02 Aug 2010 23:21:11 UTC +00:00\n\nCopy\n","\nTime.utc(1582, 10, 3) + 5.days\n# => Mon Oct 18 00:00:00 UTC 1582\n\nTime.utc(1582, 10, 3) + 5.days\n# => Mon Oct 18 00:00:00 UTC 1582\n\nCopy\n"],"body":"Duration objects can be added to and subtracted from time objects:They translate to calls to since or advance. For example here we get the correct jump in the calendar reform:"},{"code":[],"body":"","title":"18 Extensions to File","anchor":"#extensions-to-file"},{"title":"18.1 atomic_write","anchor":"#atomic-write","code":["\nFile.atomic_write(joined_asset_path) do |cache|\n  cache.write(join_asset_file_contents(asset_paths))\nend\n\nFile.atomic_write(joined_asset_path) do |cache|\n  cache.write(join_asset_file_contents(asset_paths))\nend\n\nCopy\n"],"body":"With the class method File.atomic_write you can write to a file in a way that will prevent any reader from seeing half-written content.The name of the file is passed as an argument, and the method yields a file handle opened for writing. Once the block is done atomic_write closes the file handle and completes its job.For example, Action Pack uses this method to write asset cache files like all.css:To accomplish this atomic_write creates a temporary file. That's the file the code in the block actually writes to. On completion, the temporary file is renamed, which is an atomic operation on POSIX systems. If the target file exists atomic_write overwrites it and keeps owners and permissions. However there are a few cases where atomic_write cannot change the file ownership or permissions, this error is caught and skipped over trusting in the user/filesystem to ensure the file is accessible to the processes that need it.The auxiliary file is written in a standard directory for temporary files, but you can pass a directory of your choice as second argument."},{"title":"19 Extensions to Marshal","anchor":"#extensions-to-marshal","code":[],"body":""},{"title":"19.1 load","anchor":"#load","code":["\nFile.open(file_name) { |f| Marshal.load(f) }\n\nFile.open(file_name) { |f| Marshal.load(f) }\n\nCopy\n"],"body":"Active Support adds constant autoloading support to load.For example, the file cache store deserializes this way:If the cached data refers to a constant that is unknown at that point, the autoloading mechanism is triggered and if it succeeds the deserialization is retried transparently."},{"title":"20 Extensions to NameError","anchor":"#extensions-to-nameerror","code":["\ndef default_helper_module!\n  module_name = name.delete_suffix(\"Controller\")\n  module_path = module_name.underscore\n  helper module_path\nrescue LoadError => e\n  raise e unless e.is_missing? \"helpers/#{module_path}_helper\"\nrescue NameError => e\n  raise e unless e.missing_name? \"#{module_name}Helper\"\nend\n\ndef default_helper_module!\n  module_name = name.delete_suffix(\"Controller\")\n  module_path = module_name.underscore\n  helper module_path\nrescue LoadError => e\n  raise e unless e.is_missing? \"helpers/#{module_path}_helper\"\nrescue NameError => e\n  raise e unless e.missing_name? \"#{module_name}Helper\"\nend\n\nCopy\n"],"body":"Active Support adds missing_name? to NameError, which tests whether the exception was raised because of the name passed as argument.The name may be given as a symbol or string. A symbol is tested against the bare constant name, a string is against the fully qualified constant name.For example, when an action of ArticlesController is called Rails tries optimistically to use ArticlesHelper. It is OK that the helper module does not exist, so if an exception for that constant name is raised it should be silenced. But it could be the case that articles_helper.rb raises a NameError due to an actual unknown constant. That should be reraised. The method missing_name? provides a way to distinguish both cases:"},{"title":"21 Extensions to LoadError","anchor":"#extensions-to-loaderror","code":["\ndef default_helper_module!\n  module_name = name.delete_suffix(\"Controller\")\n  module_path = module_name.underscore\n  helper module_path\nrescue LoadError => e\n  raise e unless e.is_missing? \"helpers/#{module_path}_helper\"\nrescue NameError => e\n  raise e unless e.missing_name? \"#{module_name}Helper\"\nend\n\ndef default_helper_module!\n  module_name = name.delete_suffix(\"Controller\")\n  module_path = module_name.underscore\n  helper module_path\nrescue LoadError => e\n  raise e unless e.is_missing? \"helpers/#{module_path}_helper\"\nrescue NameError => e\n  raise e unless e.missing_name? \"#{module_name}Helper\"\nend\n\nCopy\n"],"body":"Active Support adds is_missing? to LoadError.Given a path name is_missing? tests whether the exception was raised due to that particular file (except perhaps for the \".rb\" extension).For example, when an action of ArticlesController is called Rails tries to load articles_helper.rb, but that file may not exist. That's fine, the helper module is not mandatory so Rails silences a load error. But it could be the case that the helper module does exist and in turn requires another library that is missing. In that case Rails must reraise the exception. The method is_missing? provides a way to distinguish both cases:"}]