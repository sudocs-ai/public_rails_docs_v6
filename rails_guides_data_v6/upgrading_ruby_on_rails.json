[{"code":[],"body":"Before attempting to upgrade an existing application, you should be sure you have a good reason to upgrade. You need to balance several factors: the need for new features, the increasing difficulty of finding support for old code, and your available time and skills, to name a few.","title":"1 General Advice","anchor":"#general-advice"},{"title":"1.1 Test Coverage","anchor":"#test-coverage","code":[],"body":"The best way to be sure that your application still works after upgrading is to have good test coverage before you start the process. If you don't have automated tests that exercise the bulk of your application, you'll need to spend time manually exercising all the parts that have changed. In the case of a Rails upgrade, that will mean every single piece of functionality in the application. Do yourself a favor and make sure your test coverage is good before you start an upgrade."},{"title":"1.2 The Upgrade Process","anchor":"#the-upgrade-process","code":[],"body":"When changing Rails versions, it's best to move slowly, one minor version at a time, in order to make good use of the deprecation warnings. Rails version numbers are in the form Major.Minor.Patch. Major and Minor versions are allowed to make changes to the public API, so this may cause errors in your application. Patch versions only include bug fixes, and don't change any public API.The process should go as follows:Repeat this process until you reach your target Rails version. Each time you move versions, you will need to change the Rails version number in the Gemfile (and possibly other gem versions) and run bundle update. Then run the Update task mentioned below to update configuration files, then run your tests.You can find a list of all released Rails versions here."},{"title":"1.3 Ruby Versions","anchor":"#ruby-versions","code":[],"body":"Rails generally stays close to the latest released Ruby version when it's released:"},{"title":"1.4 The Update Task","anchor":"#the-update-task","code":["\n$ bin/rails app:update\n   identical  config/boot.rb\n       exist  config\n    conflict  config/routes.rb\nOverwrite /myapp/config/routes.rb? (enter \"h\" for help) [Ynaqdh]\n       force  config/routes.rb\n    conflict  config/application.rb\nOverwrite /myapp/config/application.rb? (enter \"h\" for help) [Ynaqdh]\n       force  config/application.rb\n    conflict  config/environment.rb\n...\n\nbin/rails app:update\n\nCopy\n"],"body":"Rails provides the app:update command (rake rails:update on 4.2 and earlier). After updating the Rails version\nin the Gemfile, run this command.\nThis will help you with the creation of new files and changes of old files in an\ninteractive session.Don't forget to review the difference, to see if there were any unexpected changes."},{"title":"1.5 Configure Framework Defaults","anchor":"#configure-framework-defaults","code":[],"body":"The new Rails version might have different configuration defaults than the previous version. However, after following the steps described above, your application would still run with configuration defaults from the previous Rails version. That's because the value for config.load_defaults in config/application.rb has not been changed yet.To allow you to upgrade to new defaults one by one, the update task has created a file config/initializers/new_framework_defaults.rb. Once your application is ready to run with new defaults, you can remove this file and flip the config.load_defaults value."},{"title":"2 Upgrading from Rails 6.0 to Rails 6.1","anchor":"#upgrading-from-rails-6-0-to-rails-6-1","code":[],"body":"For more information on changes made to Rails 6.1 please see the release notes."},{"title":"2.1 Rails.application.config_for return value no longer supports access with String keys.","anchor":"#rails-application-config-for-return-value-no-longer-supports-access-with-string-keys","code":["\n# config/example.yml\ndevelopment:\n  options:\n    key: value\n\n# config/example.yml\ndevelopment:\n  options:\n    key: value\n\nCopy\n","\nRails.application.config_for(:example).options\n\nRails.application.config_for(:example).options\n\nCopy\n","\nRails.application.config_for(:example).with_indifferent_access.dig('options', 'key')\n\nRails.application.config_for(:example).with_indifferent_access.dig('options', 'key')\n\nCopy\n"],"body":"Given a configuration file like this:This used to return a hash on which you could access values with String keys. That was deprecated in 6.0, and now doesn't work anymore.You can call with_indifferent_access on the return value of config_for if you still want to access values with String keys, e.g.:"},{"code":["\ndef my_action\n  respond_to do |format|\n    format.any { render(json: { foo: 'bar' }) }\n  end\nend\n\ndef my_action\n  respond_to do |format|\n    format.any { render(json: { foo: 'bar' }) }\n  end\nend\n\nCopy\n","\nget('my_action.csv')\n\nget('my_action.csv')\n\nCopy\n","\nformat.any(:xml, :json) { render request.format.to_sym => @people }\n\nformat.any(:xml, :json) { render request.format.to_sym => @people }\n\nCopy\n"],"body":"The Content-Type header returned in the response can differ from what Rails 6.0 returned,\nmore specifically if your application uses respond_to { |format| format.any }.\nThe Content-Type will now be based on the given block rather than the request's format.Example:Previous behaviour was returning a text/csv response's Content-Type which is inaccurate since a JSON response is being rendered.\nCurrent behaviour correctly returns a application/json response's Content-Type.If your application relies on the previous incorrect behaviour, you are encouraged to specify\nwhich formats your action accepts, i.e.","title":"2.2 Response's Content-Type when using respond_to#any","anchor":"#response-s-content-type-when-using-respond-to-any"},{"code":["\nclass Book < ApplicationRecord\n  before_save { throw(:abort) }\n  before_create { throw(:abort) }\n\n  def halted_callback_hook(filter, callback_name) # => This method now accepts 2 arguments instead of 1\n    Rails.logger.info(\"Book couldn't be #{callback_name}d\")\n  end\nend\n\nclass Book < ApplicationRecord\n  before_save { throw(:abort) }\n  before_create { throw(:abort) }\n\n  def halted_callback_hook(filter, callback_name) # => This method now accepts 2 arguments instead of 1\n    Rails.logger.info(\"Book couldn't be #{callback_name}d\")\n  end\nend\n\nCopy\n"],"body":"Active Support allows you to override the halted_callback_hook whenever a callback\nhalts the chain. This method now receive a second argument which is the name of the callback being halted.\nIf you have classes that override this method, make sure it accepts two arguments. Note that this is a breaking\nchange without a prior deprecation cycle (for performance reasons).Example:","title":"2.3 ActiveSupport::Callbacks#halted_callback_hook now receive a second argument","anchor":"#activesupport-callbacks-halted-callback-hook-now-receive-a-second-argument"},{"code":["\nhelper \"foo/bar\"\n\nhelper \"foo/bar\"\n\nCopy\n","\nrequire_dependency \"foo/bar_helper\"\nmodule_name = \"foo/bar_helper\".camelize\nmodule_name.constantize\n\nrequire_dependency \"foo/bar_helper\"\nmodule_name = \"foo/bar_helper\".camelize\nmodule_name.constantize\n\nCopy\n","\nprefix = \"foo/bar\".camelize\n\"#{prefix}Helper\".constantize\n\nprefix = \"foo/bar\".camelize\n\"#{prefix}Helper\".constantize\n\nCopy\n"],"body":"Conceptually, before Rails 6.1resulted inNow it does this instead:This change is backwards compatible for the majority of applications, in which case you do not need to do anything.Technically, however, controllers could configure helpers_path to point to a directory in $LOAD_PATH that was not in the autoload paths. That use case is no longer supported out of the box. If the helper module is not autoloadable, the application is responsible for loading it before calling helper.","title":"2.4 The helper class method in controllers uses String#constantize","anchor":"#the-helper-class-method-in-controllers-uses-string-constantize"},{"title":"2.5 Redirection to HTTPS from HTTP will now use the 308 HTTP status code","anchor":"#redirection-to-https-from-http-will-now-use-the-308-http-status-code","code":[],"body":"The default HTTP status code used in ActionDispatch::SSL when redirecting non-GET/HEAD requests from HTTP to HTTPS has been changed to 308 as defined in https://tools.ietf.org/html/rfc7538."},{"title":"2.6 Active Storage now requires Image Processing","anchor":"#active-storage-now-requires-image-processing","code":["\nvideo.preview(resize: \"100x100\")\nvideo.preview(resize: \"100x100>\")\nvideo.preview(resize: \"100x100^\")\n\nvideo.preview(resize: \"100x100\")\nvideo.preview(resize: \"100x100>\")\nvideo.preview(resize: \"100x100^\")\n\nCopy\n","\nvideo.preview(resize_to_fit: [100, 100])\nvideo.preview(resize_to_limit: [100, 100])\nvideo.preview(resize_to_fill: [100, 100])\n\nvideo.preview(resize_to_fit: [100, 100])\nvideo.preview(resize_to_limit: [100, 100])\nvideo.preview(resize_to_fill: [100, 100])\n\nCopy\n"],"body":"When processing variants in Active Storage, it's now required to have the image_processing gem bundled instead of directly using mini_magick. Image Processing is configured by default to use mini_magick behind the scenes, so the easiest way to upgrade is by replacing the mini_magick gem for the image_processing gem and making sure to remove the explicit usage of combine_options since it's no longer needed.For readability, you may wish to change raw resize calls to image_processing macros. For example, instead of:you can respectively do:"},{"code":[],"body":"For more information on changes made to Rails 6.0 please see the release notes.","title":"3 Upgrading from Rails 5.2 to Rails 6.0","anchor":"#upgrading-from-rails-5-2-to-rails-6-0"},{"title":"3.1 Using Webpacker","anchor":"#using-webpacker","code":["\ngem \"webpacker\"\n\ngem \"webpacker\"\n\nCopy\n","\n$ bin/rails webpacker:install\n\nbin/rails webpacker:install\n\nCopy\n"],"body":"Webpacker\nis the default JavaScript compiler for Rails 6. But if you are upgrading the app, it is not activated by default.\nIf you want to use Webpacker, then include it in your Gemfile and install it:"},{"code":[],"body":"The force_ssl method on controllers has been deprecated and will be removed in\nRails 6.1. You are encouraged to enable config.force_ssl to enforce HTTPS\nconnections throughout your application. If you need to exempt certain endpoints\nfrom redirection, you can use config.ssl_options to configure that behavior.","title":"3.2 Force SSL","anchor":"#force-ssl"},{"title":"3.3 Purpose and expiry metadata is now embedded inside signed and encrypted cookies for increased security","anchor":"#purpose-and-expiry-metadata-is-now-embedded-inside-signed-and-encrypted-cookies-for-increased-security","code":[],"body":"To improve security, Rails embeds the purpose and expiry metadata inside encrypted or signed cookies value.Rails can then thwart attacks that attempt to copy the signed/encrypted value\nof a cookie and use it as the value of another cookie.This new embed metadata make those cookies incompatible with versions of Rails older than 6.0.If you require your cookies to be read by Rails 5.2 and older, or you are still validating your 6.0 deploy and want\nto be able to rollback set\nRails.application.config.action_dispatch.use_cookies_with_metadata to false."},{"title":"3.4 All npm packages have been moved to the @rails scope","anchor":"#all-npm-packages-have-been-moved-to-the-@rails-scope","code":["\nactioncable   → @rails/actioncable\nactivestorage → @rails/activestorage\nrails-ujs     → @rails/ujs\n\nactioncable   → @rails/actioncable\nactivestorage → @rails/activestorage\nrails-ujs     → @rails/ujs\n\nCopy\n"],"body":"If you were previously loading any of the actioncable, activestorage,\nor rails-ujs packages through npm/yarn, you must update the names of these\ndependencies before you can upgrade them to 6.0.0:"},{"code":[],"body":"The Action Cable JavaScript package has been converted from CoffeeScript\nto ES2015, and we now publish the source code in the npm distribution.This release includes some breaking changes to optional parts of the\nAction Cable JavaScript API:","title":"3.5 Action Cable JavaScript API Changes","anchor":"#action-cable-javascript-api-changes"},{"code":["\nresp = ActionDispatch::Response.new(200, \"Content-Type\" => \"text/csv; header=present; charset=utf-16\")\nresp.content_type #=> \"text/csv; header=present\"\n\nresp = ActionDispatch::Response.new(200, \"Content-Type\" => \"text/csv; header=present; charset=utf-16\")\nresp.content_type #=> \"text/csv; header=present\"\n\nCopy\n","\nresp = ActionDispatch::Response.new(200, \"Content-Type\" => \"text/csv; header=present; charset=utf-16\")\nresp.content_type #=> \"text/csv; header=present; charset=utf-16\"\nresp.media_type   #=> \"text/csv\"\n\nresp = ActionDispatch::Response.new(200, \"Content-Type\" => \"text/csv; header=present; charset=utf-16\")\nresp.content_type #=> \"text/csv; header=present; charset=utf-16\"\nresp.media_type   #=> \"text/csv\"\n\nCopy\n"],"body":"Previously, the return value of ActionDispatch::Response#content_type did NOT contain the charset part.\nThis behavior has changed to include the previously omitted charset part as well.If you want just the MIME type, please use ActionDispatch::Response#media_type instead.Before:After:","title":"3.6 ActionDispatch::Response#content_type now returns the Content-Type header without modification","anchor":"#actiondispatch-response-content-type-now-returns-the-content-type-header-without-modification"},{"code":["\n# config/application.rb\n\nconfig.load_defaults 6.0\n\n# config/application.rb\n\nconfig.load_defaults 6.0\n\nCopy\n"],"body":"The default configuration for Rails 6enables zeitwerk autoloading mode on CRuby. In that mode, autoloading, reloading, and eager loading are managed by Zeitwerk.","title":"3.7 Autoloading","anchor":"#autoloading"},{"title":"3.7.1 Public API","anchor":"#public-api","code":["\nRails.autoloaders.main\n\nRails.autoloaders.main\n\nCopy\n"],"body":"In general, applications do not need to use the API of Zeitwerk directly. Rails sets things up according to the existing contract: config.autoload_paths, config.cache_classes, etc.While applications should stick to that interface, the actual Zeitwerk loader object can be accessed asThat may be handy if you need to preload STIs or configure a custom inflector, for example."},{"title":"3.7.2 Project Structure","anchor":"#project-structure","code":["\n$ bin/rails zeitwerk:check\nHold on, I am eager loading the application.\nAll is good!\n\nbin/rails zeitwerk:check\n\nCopy\n"],"body":"If the application being upgraded autoloads correctly, the project structure should be already mostly compatible.However, classic mode infers file names from missing constant names (underscore), whereas zeitwerk mode infers constant names from file names (camelize). These helpers are not always inverse of each other, in particular if acronyms are involved. For instance, \"FOO\".underscore is \"foo\", but \"foo\".camelize is \"Foo\", not \"FOO\".Compatibility can be checked with the zeitwerk:check task:"},{"code":[],"body":"All known use cases of require_dependency have been eliminated, you should grep the project and delete them.If your application has STIs, please check their section in the guide Autoloading and Reloading Constants (Zeitwerk Mode).","title":"3.7.3 require_dependency","anchor":"#require-dependency"},{"title":"3.7.4 Qualified names in class and module definitions","anchor":"#qualified-names-in-class-and-module-definitions","code":["\n# Autoloading in this class' body matches Ruby semantics now.\nclass Admin::UsersController < ApplicationController\n  # ...\nend\n\n# Autoloading in this class' body matches Ruby semantics now.\nclass Admin::UsersController < ApplicationController\n  # ...\nend\n\nCopy\n","\nclass Foo::Bar\n  Wadus\nend\n\nclass Foo::Bar\n  Wadus\nend\n\nCopy\n","\nclass Foo::Bar\n  Foo::Wadus\nend\n\nclass Foo::Bar\n  Foo::Wadus\nend\n\nCopy\n","\nmodule Foo\n  class Bar\n    Wadus\n  end\nend\n\nmodule Foo\n  class Bar\n    Wadus\n  end\nend\n\nCopy\n"],"body":"You can now robustly use constant paths in class and module definitions:A gotcha to be aware of is that, depending on the order of execution, the classic autoloader could sometimes be able to autoload Foo::Wadus inThat does not match Ruby semantics because Foo is not in the nesting, and won't work at all in zeitwerk mode. If you find such corner case you can use the qualified name Foo::Wadus:or add Foo to the nesting:"},{"code":["\napp/models\napp/models/concerns\n\napp/models\napp/models/concerns\n\nCopy\n"],"body":"You can autoload and eager load from a standard structure likeIn that case, app/models/concerns is assumed to be a root directory (because it belongs to the autoload paths), and it is ignored as namespace. So, app/models/concerns/foo.rb should define Foo, not Concerns::Foo.The Concerns:: namespace worked with the classic autoloader as a side-effect of the implementation, but it was not really an intended behavior. An application using Concerns:: needs to rename those classes and modules to be able to run in zeitwerk mode.","title":"3.7.5 Concerns","anchor":"#concerns"},{"title":"3.7.6 Having app in the autoload paths","anchor":"#having-app-in-the-autoload-paths","code":["\nActiveSupport::Dependencies.autoload_paths.delete(\"#{Rails.root}/app/api\")\n\nActiveSupport::Dependencies.autoload_paths.delete(\"#{Rails.root}/app/api\")\n\nCopy\n"],"body":"Some projects want something like app/api/base.rb to define API::Base, and add app to the autoload paths to accomplish that in classic mode. Since Rails adds all subdirectories of app to the autoload paths automatically, we have another situation in which there are nested root directories, so that setup no longer works. Similar principle we explained above with concerns.If you want to keep that structure, you'll need to delete the subdirectory from the autoload paths in an initializer:"},{"code":["\napp/models/hotel.rb         # Defines Hotel.\napp/models/hotel/pricing.rb # Defines Hotel::Pricing.\n\napp/models/hotel.rb         # Defines Hotel.\napp/models/hotel/pricing.rb # Defines Hotel::Pricing.\n\nCopy\n","\nclass Hotel\nend\n\nclass Hotel\nend\n\nCopy\n","\nHotel = Class.new\n\nHotel = Class.new\n\nCopy\n","\nHotel = Struct.new\n\nHotel = Struct.new\n\nCopy\n"],"body":"If a namespace is defined in a file, as Hotel is here:the Hotel constant has to be set using the class or module keywords. For example:is good.Alternatives likeorwon't work, child objects like Hotel::Pricing won't be found.This restriction only applies to explicit namespaces. Classes and modules not defining a namespace can be defined using those idioms.","title":"3.7.7 Autoloaded Constants and Explicit Namespaces","anchor":"#autoloaded-constants-and-explicit-namespaces"},{"title":"3.7.8 One file, one constant (at the same top-level)","anchor":"#one-file-one-constant-at-the-same-top-level","code":["\n# app/models/foo.rb\n\nclass Foo\nend\n\nclass Bar\nend\n\n# app/models/foo.rb\n\nclass Foo\nend\n\nclass Bar\nend\n\nCopy\n","\n# app/models/foo.rb\n\nclass Foo\n  class InnerClass\n  end\nend\n\n# app/models/foo.rb\n\nclass Foo\n  class InnerClass\n  end\nend\n\nCopy\n"],"body":"In classic mode you could technically define several constants at the same top-level and have them all reloaded. For example, givenwhile Bar could not be autoloaded, autoloading Foo would mark Bar as autoloaded too. This is not the case in zeitwerk mode, you need to move Bar to its own file bar.rb. One file, one constant.This affects only to constants at the same top-level as in the example above. Inner classes and modules are fine. For example, considerIf the application reloads Foo, it will reload Foo::InnerClass too."},{"title":"3.7.9 Spring and the test Environment","anchor":"#spring-and-the-test-environment","code":["\n# config/environments/test.rb\n\nconfig.cache_classes = false\n\n# config/environments/test.rb\n\nconfig.cache_classes = false\n\nCopy\n","\nreloading is disabled because config.cache_classes is true\n\nreloading is disabled because config.cache_classes is true\n\nCopy\n"],"body":"Spring reloads the application code if something changes. In the test environment you need to enable reloading for that to work:Otherwise you'll get this error:"},{"code":[],"body":"Bootsnap should be at least version 1.4.2.In addition to that, Bootsnap needs to disable the iseq cache due to a bug in the interpreter if running Ruby 2.5. Please make sure to depend on at least Bootsnap 1.4.4 in that case.","title":"3.7.10 Bootsnap","anchor":"#autoloading-bootsnap"},{"title":"3.7.11 config.add_autoload_paths_to_load_path","anchor":"#config-add-autoload-paths-to-load-path","code":["\nconfig.add_autoload_paths_to_load_path\n\nconfig.add_autoload_paths_to_load_path\n\nCopy\n"],"body":"The new configuration pointis true by default for backwards compatibility, but allows you to opt-out from adding the autoload paths to $LOAD_PATH.This makes sense in most applications, since you never should require a file in app/models, for example, and Zeitwerk only uses absolute file names internally.By opting-out you optimize $LOAD_PATH lookups (less directories to check), and save Bootsnap work and memory consumption, since it does not need to build an index for these directories."},{"title":"3.7.12 Thread-safety","anchor":"#thread-safety","code":[],"body":"In classic mode, constant autoloading is not thread-safe, though Rails has locks in place for example to make web requests thread-safe when autoloading is enabled, as it is common in the development environment.Constant autoloading is thread-safe in zeitwerk mode. For example, you can now autoload in multi-threaded scripts executed by the runner command."},{"title":"3.7.13 Globs in config.autoload_paths","anchor":"#globs-in-config-autoload-paths","code":["\nconfig.autoload_paths += Dir[\"#{config.root}/lib/**/\"]\n\nconfig.autoload_paths += Dir[\"#{config.root}/lib/**/\"]\n\nCopy\n","\nconfig.autoload_paths << \"#{config.root}/lib\"\n\nconfig.autoload_paths << \"#{config.root}/lib\"\n\nCopy\n"],"body":"Beware of configurations likeEvery element of config.autoload_paths should represent the top-level namespace (Object) and they cannot be nested in consequence (with the exception of concerns directories explained above).To fix this, just remove the wildcards:"},{"code":[],"body":"In classic mode, if app/models/foo.rb defines Bar, you won't be able to autoload that file, but eager loading will work because it loads files recursively blindly. This can be a source of errors if you test things first eager loading, execution may fail later autoloading.In zeitwerk mode both loading modes are consistent, they fail and err in the same files.","title":"3.7.14 Eager loading and autoloading are consistent","anchor":"#eager-loading-and-autoloading-are-consistent"},{"title":"3.7.15 How to Use the Classic Autoloader in Rails 6","anchor":"#how-to-use-the-classic-autoloader-in-rails-6","code":["\n# config/application.rb\n\nconfig.load_defaults 6.0\nconfig.autoloader = :classic\n\n# config/application.rb\n\nconfig.load_defaults 6.0\nconfig.autoloader = :classic\n\nCopy\n"],"body":"Applications can load Rails 6 defaults and still use the classic autoloader by setting config.autoloader this way:When using the Classic Autoloader in Rails 6 application it is recommended to set concurrency level to 1 in development environment, for the web servers and background processors, due to the thread-safety concerns."},{"title":"3.8 Active Storage assignment behavior change","anchor":"#active-storage-assignment-behavior-change","code":["\nclass User < ApplicationRecord\n  has_many_attached :highlights\nend\n\nuser.highlights.attach(filename: \"funky.jpg\", ...)\nuser.highlights.count # => 1\n\nblob = ActiveStorage::Blob.create_after_upload!(filename: \"town.jpg\", ...)\nuser.update!(highlights: [ blob ])\n\nuser.highlights.count # => 2\nuser.highlights.first.filename # => \"funky.jpg\"\nuser.highlights.second.filename # => \"town.jpg\"\n\nclass User < ApplicationRecord\n  has_many_attached :highlights\nend\n\nuser.highlights.attach(filename: \"funky.jpg\", ...)\nuser.highlights.count # => 1\n\nblob = ActiveStorage::Blob.create_after_upload!(filename: \"town.jpg\", ...)\nuser.update!(highlights: [ blob ])\n\nuser.highlights.count # => 2\nuser.highlights.first.filename # => \"funky.jpg\"\nuser.highlights.second.filename # => \"town.jpg\"\n\nCopy\n","\nuser.highlights.attach(filename: \"funky.jpg\", ...)\nuser.highlights.count # => 1\n\nblob = ActiveStorage::Blob.create_after_upload!(filename: \"town.jpg\", ...)\nuser.update!(highlights: [ blob ])\n\nuser.highlights.count # => 1\nuser.highlights.first.filename # => \"town.jpg\"\n\nuser.highlights.attach(filename: \"funky.jpg\", ...)\nuser.highlights.count # => 1\n\nblob = ActiveStorage::Blob.create_after_upload!(filename: \"town.jpg\", ...)\nuser.update!(highlights: [ blob ])\n\nuser.highlights.count # => 1\nuser.highlights.first.filename # => \"town.jpg\"\n\nCopy\n","\nblob = ActiveStorage::Blob.create_after_upload!(filename: \"town.jpg\", ...)\nuser.highlights.attach(blob)\n\nuser.highlights.count # => 2\nuser.highlights.first.filename # => \"funky.jpg\"\nuser.highlights.second.filename # => \"town.jpg\"\n\nblob = ActiveStorage::Blob.create_after_upload!(filename: \"town.jpg\", ...)\nuser.highlights.attach(blob)\n\nuser.highlights.count # => 2\nuser.highlights.first.filename # => \"funky.jpg\"\nuser.highlights.second.filename # => \"town.jpg\"\n\nCopy\n"],"body":"With the configuration defaults for Rails 5.2, assigning to a collection of attachments declared with has_many_attached appends new files:With the configuration defaults for Rails 6.0, assigning to a collection of attachments replaces existing files instead of appending to them. This matches Active Record behavior when assigning to a collection association:#attach can be used to add new attachments without removing the existing ones:Existing applications can opt in to this new behavior by setting config.active_storage.replace_on_assign_to_many to true. The old behavior will be deprecated in Rails 6.1 and removed in a subsequent release."},{"title":"4 Upgrading from Rails 5.1 to Rails 5.2","anchor":"#upgrading-from-rails-5-1-to-rails-5-2","code":[],"body":"For more information on changes made to Rails 5.2 please see the release notes."},{"title":"4.1 Bootsnap","anchor":"#upgrading-from-rails-5-1-to-rails-5-2-bootsnap","code":[],"body":"Rails 5.2 adds bootsnap gem in the newly generated app's Gemfile.\nThe app:update command sets it up in boot.rb. If you want to use it, then add it in the Gemfile,\notherwise change the boot.rb to not use bootsnap."},{"title":"4.2 Expiry in signed or encrypted cookie is now embedded in the cookies values","anchor":"#expiry-in-signed-or-encrypted-cookie-is-now-embedded-in-the-cookies-values","code":[],"body":"To improve security, Rails now embeds the expiry information also in encrypted or signed cookies value.This new embed information make those cookies incompatible with versions of Rails older than 5.2.If you require your cookies to be read by 5.1 and older, or you are still validating your 5.2 deploy and want\nto allow you to rollback set\nRails.application.config.action_dispatch.use_authenticated_cookie_encryption to false."},{"title":"5 Upgrading from Rails 5.0 to Rails 5.1","anchor":"#upgrading-from-rails-5-0-to-rails-5-1","code":[],"body":"For more information on changes made to Rails 5.1 please see the release notes."},{"title":"5.1 Top-level HashWithIndifferentAccess is soft-deprecated","anchor":"#top-level-hashwithindifferentaccess-is-soft-deprecated","code":[],"body":"If your application uses the top-level HashWithIndifferentAccess class, you\nshould slowly move your code to instead use ActiveSupport::HashWithIndifferentAccess.It is only soft-deprecated, which means that your code will not break at the\nmoment and no deprecation warning will be displayed, but this constant will be\nremoved in the future.Also, if you have pretty old YAML documents containing dumps of such objects,\nyou may need to load and dump them again to make sure that they reference\nthe right constant, and that loading them won't break in the future."},{"title":"5.2 application.secrets now loaded with all keys as symbols","anchor":"#application-secrets-now-loaded-with-all-keys-as-symbols","code":["\nRails.application.secrets[:smtp_settings][\"address\"]\n\nRails.application.secrets[:smtp_settings][\"address\"]\n\nCopy\n","\nRails.application.secrets[:smtp_settings][:address]\n\nRails.application.secrets[:smtp_settings][:address]\n\nCopy\n"],"body":"If your application stores nested configuration in config/secrets.yml, all keys\nare now loaded as symbols, so access using strings should be changed.From:To:"},{"code":[],"body":"If your views are using render :text, they will no longer work. The new method\nof rendering text with MIME type of text/plain is to use render :plain.Similarly, render :nothing is also removed and you should use the head method\nto send responses that contain only headers. For example, head :ok sends a\n200 response with no body to render.","title":"5.3 Removed deprecated support to :text and :nothing in render","anchor":"#removed-deprecated-support-to-text-and-nothing-in-render"},{"title":"6 Upgrading from Rails 4.2 to Rails 5.0","anchor":"#upgrading-from-rails-4-2-to-rails-5-0","code":[],"body":"For more information on changes made to Rails 5.0 please see the release notes."},{"title":"6.1 Ruby 2.2.2+ required","anchor":"#ruby-2-2-2-required","code":[],"body":"From Ruby on Rails 5.0 onwards, Ruby 2.2.2+ is the only supported Ruby version.\nMake sure you are on Ruby 2.2.2 version or greater, before you proceed."},{"title":"6.2 Active Record Models Now Inherit from ApplicationRecord by Default","anchor":"#active-record-models-now-inherit-from-applicationrecord-by-default","code":["\nclass ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\nend\n\nclass ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\nend\n\nCopy\n"],"body":"In Rails 4.2, an Active Record model inherits from ActiveRecord::Base. In Rails 5.0,\nall models inherit from ApplicationRecord.ApplicationRecord is a new superclass for all app models, analogous to app\ncontrollers subclassing ApplicationController instead of\nActionController::Base. This gives apps a single spot to configure app-wide\nmodel behavior.When upgrading from Rails 4.2 to Rails 5.0, you need to create an\napplication_record.rb file in app/models/ and add the following content:Then make sure that all your models inherit from it."},{"title":"6.3 Halting Callback Chains via throw(:abort)","anchor":"#halting-callback-chains-via-throw-abort","code":["\nActiveSupport.halt_callback_chains_on_return_false = false\n\nActiveSupport.halt_callback_chains_on_return_false = false\n\nCopy\n"],"body":"In Rails 4.2, when a 'before' callback returns false in Active Record\nand Active Model, then the entire callback chain is halted. In other words,\nsuccessive 'before' callbacks are not executed, and neither is the action wrapped\nin callbacks.In Rails 5.0, returning false in an Active Record or Active Model callback\nwill not have this side effect of halting the callback chain. Instead, callback\nchains must be explicitly halted by calling throw(:abort).When you upgrade from Rails 4.2 to Rails 5.0, returning false in those kind of\ncallbacks will still halt the callback chain, but you will receive a deprecation\nwarning about this upcoming change.When you are ready, you can opt into the new behavior and remove the deprecation\nwarning by adding the following configuration to your config/application.rb:Note that this option will not affect Active Support callbacks since they never\nhalted the chain when any value was returned.See #17227 for more details."},{"title":"6.4 ActiveJob Now Inherits from ApplicationJob by Default","anchor":"#activejob-now-inherits-from-applicationjob-by-default","code":["\nclass ApplicationJob < ActiveJob::Base\nend\n\nclass ApplicationJob < ActiveJob::Base\nend\n\nCopy\n"],"body":"In Rails 4.2, an Active Job inherits from ActiveJob::Base. In Rails 5.0, this\nbehavior has changed to now inherit from ApplicationJob.When upgrading from Rails 4.2 to Rails 5.0, you need to create an\napplication_job.rb file in app/jobs/ and add the following content:Then make sure that all your job classes inherit from it.See #19034 for more details."},{"title":"6.5 Rails Controller Testing","anchor":"#rails-controller-testing","code":[],"body":""},{"title":"6.5.1 Extraction of some helper methods to rails-controller-testing","anchor":"#extraction-of-some-helper-methods-to-rails-controller-testing","code":[],"body":"assigns and assert_template have been extracted to the rails-controller-testing gem. To\ncontinue using these methods in your controller tests, add gem 'rails-controller-testing' to\nyour Gemfile.If you are using RSpec for testing, please see the extra configuration required in the gem's\ndocumentation."},{"title":"6.5.2 New behavior when uploading files","anchor":"#new-behavior-when-uploading-files","code":[],"body":"If you are using ActionDispatch::Http::UploadedFile in your tests to\nupload files, you will need to change to use the similar Rack::Test::UploadedFile\nclass instead.See #26404 for more details."},{"title":"6.6 Autoloading is Disabled After Booting in the Production Environment","anchor":"#autoloading-is-disabled-after-booting-in-the-production-environment","code":[],"body":"Autoloading is now disabled after booting in the production environment by\ndefault.Eager loading the application is part of the boot process, so top-level\nconstants are fine and are still autoloaded, no need to require their files.Constants in deeper places only executed at runtime, like regular method bodies,\nare also fine because the file defining them will have been eager loaded while booting.For the vast majority of applications this change needs no action. But in the\nvery rare event that your application needs autoloading while running in\nproduction, set Rails.application.config.enable_dependency_loading to true."},{"title":"6.7 XML Serialization","anchor":"#xml-serialization","code":[],"body":"ActiveModel::Serializers::Xml has been extracted from Rails to the activemodel-serializers-xml\ngem. To continue using XML serialization in your application, add gem 'activemodel-serializers-xml'\nto your Gemfile."},{"title":"6.8 Removed Support for Legacy mysql Database Adapter","anchor":"#removed-support-for-legacy-mysql-database-adapter","code":[],"body":"Rails 5 removes support for the legacy mysql database adapter. Most users should be able to\nuse mysql2 instead. It will be converted to a separate gem when we find someone to maintain\nit."},{"title":"6.9 Removed Support for Debugger","anchor":"#removed-support-for-debugger","code":[],"body":"debugger is not supported by Ruby 2.2 which is required by Rails 5. Use byebug instead."},{"title":"6.10 Use bin/rails for running tasks and tests","anchor":"#use-bin-rails-for-running-tasks-and-tests","code":[],"body":"Rails 5 adds the ability to run tasks and tests through bin/rails instead of rake. Generally\nthese changes are in parallel with rake, but some were ported over altogether.To use the new test runner simply type bin/rails test.rake dev:cache is now bin/rails dev:cache.Run bin/rails inside your application's root directory to see the list of commands available."},{"title":"6.11 ActionController::Parameters No Longer Inherits from HashWithIndifferentAccess","anchor":"#actioncontroller-parameters-no-longer-inherits-from-hashwithindifferentaccess","code":["\nparams.permit([:proceed_to, :return_to]).to_h\n\nparams.permit([:proceed_to, :return_to]).to_h\n\nCopy\n"],"body":"Calling params in your application will now return an object instead of a hash. If your\nparameters are already permitted, then you will not need to make any changes. If you are using map\nand other methods that depend on being able to read the hash regardless of permitted? you will\nneed to upgrade your application to first permit and then convert to a hash."},{"code":[],"body":"protect_from_forgery defaults to prepend: false which means that it will be inserted into\nthe callback chain at the point in which you call it in your application. If you want\nprotect_from_forgery to always run first, then you should change your application to use\nprotect_from_forgery prepend: true.","title":"6.12 protect_from_forgery Now Defaults to prepend: false","anchor":"#protect-from-forgery-now-defaults-to-prepend-false"},{"title":"6.13 Default Template Handler is Now RAW","anchor":"#default-template-handler-is-now-raw","code":[],"body":"Files without a template handler in their extension will be rendered using the raw handler.\nPreviously Rails would render files using the ERB template handler.If you do not want your file to be handled via the raw handler, you should add an extension\nto your file that can be parsed by the appropriate template handler."},{"title":"6.14 Added Wildcard Matching for Template Dependencies","anchor":"#added-wildcard-matching-for-template-dependencies","code":["\n<% # Template Dependency: recordings/threads/events/subscribers_changed %>\n<% # Template Dependency: recordings/threads/events/completed %>\n<% # Template Dependency: recordings/threads/events/uncompleted %>\n\n<% # Template Dependency: recordings/threads/events/subscribers_changed %>\n<% # Template Dependency: recordings/threads/events/completed %>\n<% # Template Dependency: recordings/threads/events/uncompleted %>\n\nCopy\n","\n<% # Template Dependency: recordings/threads/events/* %>\n\n<% # Template Dependency: recordings/threads/events/* %>\n\nCopy\n"],"body":"You can now use wildcard matching for your template dependencies. For example, if you were\ndefining your templates as such:You can now just call the dependency once with a wildcard."},{"code":["\ngem 'record_tag_helper', '~> 1.0'\n\ngem 'record_tag_helper', '~> 1.0'\n\nCopy\n"],"body":"content_tag_for and div_for have been removed in favor of just using content_tag. To continue using the older methods, add the record_tag_helper gem to your Gemfile:See #18411 for more details.","title":"6.15 ActionView::Helpers::RecordTagHelper moved to external gem (record_tag_helper)","anchor":"#actionview-helpers-recordtaghelper-moved-to-external-gem-record-tag-helper"},{"title":"6.16 Removed Support for protected_attributes Gem","anchor":"#removed-support-for-protected-attributes-gem","code":[],"body":"The protected_attributes gem is no longer supported in Rails 5."},{"title":"6.17 Removed support for activerecord-deprecated_finders gem","anchor":"#removed-support-for-activerecord-deprecated-finders-gem","code":[],"body":"The activerecord-deprecated_finders gem is no longer supported in Rails 5."},{"title":"6.18 ActiveSupport::TestCase Default Test Order is Now Random","anchor":"#activesupport-testcase-default-test-order-is-now-random","code":["\n# config/environments/test.rb\nRails.application.configure do\n  config.active_support.test_order = :sorted\nend\n\n# config/environments/test.rb\nRails.application.configure do\n  config.active_support.test_order = :sorted\nend\n\nCopy\n"],"body":"When tests are run in your application, the default order is now :random\ninstead of :sorted. Use the following config option to set it back to :sorted."},{"code":["\n# This is a work-around for streamed controllers performing authentication with Warden/Devise.\n# See https://github.com/plataformatec/devise/issues/2332\n# Authenticating in the router is another solution as suggested in that issue\nclass StreamingSupport\n  include ActionController::Live # this won't work in production for Rails 5\n  # extend ActiveSupport::Concern # unless you uncomment this line.\n\n  def process(name)\n    super(name)\n  rescue ArgumentError => e\n    if e.message == 'uncaught throw :warden'\n      throw :warden\n    else\n      raise e\n    end\n  end\nend\n\n# This is a work-around for streamed controllers performing authentication with Warden/Devise.\n# See https://github.com/plataformatec/devise/issues/2332\n# Authenticating in the router is another solution as suggested in that issue\nclass StreamingSupport\n  include ActionController::Live # this won't work in production for Rails 5\n  # extend ActiveSupport::Concern # unless you uncomment this line.\n\n  def process(name)\n    super(name)\n  rescue ArgumentError => e\n    if e.message == 'uncaught throw :warden'\n      throw :warden\n    else\n      raise e\n    end\n  end\nend\n\nCopy\n"],"body":"If you include ActionController::Live in another module that is included in your controller, then you\nshould also extend the module with ActiveSupport::Concern. Alternatively, you can use the self.included hook\nto include ActionController::Live directly to the controller once the StreamingSupport is included.This means that if your application used to have its own streaming module, the following code\nwould break in production:","title":"6.19 ActionController::Live became a Concern","anchor":"#actioncontroller-live-became-a-concern"},{"code":[],"body":"","title":"6.20 New Framework Defaults","anchor":"#new-framework-defaults"},{"title":"6.20.1 Active Record belongs_to Required by Default Option","anchor":"#active-record-belongs-to-required-by-default-option","code":["\nconfig.active_record.belongs_to_required_by_default = true\n\nconfig.active_record.belongs_to_required_by_default = true\n\nCopy\n","\nclass Book < ApplicationRecord\n  # model is not yet ready to have its association required by default\n\n  self.belongs_to_required_by_default = false\n  belongs_to(:author)\nend\n\nclass Car < ApplicationRecord\n  # model is ready to have its association required by default\n\n  self.belongs_to_required_by_default = true\n  belongs_to(:pilot)\nend\n\nclass Book < ApplicationRecord\n  # model is not yet ready to have its association required by default\n\n  self.belongs_to_required_by_default = false\n  belongs_to(:author)\nend\n\nclass Car < ApplicationRecord\n  # model is ready to have its association required by default\n\n  self.belongs_to_required_by_default = true\n  belongs_to(:pilot)\nend\n\nCopy\n"],"body":"belongs_to will now trigger a validation error by default if the association is not present.This can be turned off per-association with optional: true.This default will be automatically configured in new applications. If an existing application\nwants to add this feature it will need to be turned on in an initializer:The configuration is by default global for all your models, but you can\noverride it on a per model basis. This should help you migrate all your models to have their\nassociations required by default."},{"code":["\nconfig.action_controller.per_form_csrf_tokens = true\n\nconfig.action_controller.per_form_csrf_tokens = true\n\nCopy\n"],"body":"Rails 5 now supports per-form CSRF tokens to mitigate against code-injection attacks with forms\ncreated by JavaScript. With this option turned on, forms in your application will each have their\nown CSRF token that is specific to the action and method for that form.","title":"6.20.2 Per-form CSRF Tokens","anchor":"#per-form-csrf-tokens"},{"code":["\nconfig.action_controller.forgery_protection_origin_check = true\n\nconfig.action_controller.forgery_protection_origin_check = true\n\nCopy\n"],"body":"You can now configure your application to check if the HTTP Origin header should be checked\nagainst the site's origin as an additional CSRF defense. Set the following in your config to\ntrue:","title":"6.20.3 Forgery Protection with Origin Check","anchor":"#forgery-protection-with-origin-check"},{"code":["\nconfig.action_mailer.deliver_later_queue_name = :new_queue_name\n\nconfig.action_mailer.deliver_later_queue_name = :new_queue_name\n\nCopy\n"],"body":"The default mailer queue name is mailers. This configuration option allows you to globally change\nthe queue name. Set the following in your config:","title":"6.20.4 Allow Configuration of Action Mailer Queue Name","anchor":"#allow-configuration-of-action-mailer-queue-name"},{"code":["\nconfig.action_mailer.perform_caching = true\n\nconfig.action_mailer.perform_caching = true\n\nCopy\n"],"body":"Set config.action_mailer.perform_caching in your config to determine whether your Action Mailer views\nshould support caching.","title":"6.20.5 Support Fragment Caching in Action Mailer Views","anchor":"#support-fragment-caching-in-action-mailer-views"},{"code":["\nconfig.active_record.dump_schemas = :all\n\nconfig.active_record.dump_schemas = :all\n\nCopy\n"],"body":"If you're using schema_search_path or other PostgreSQL extensions, you can control how the schema is\ndumped. Set to :all to generate all dumps, or to :schema_search_path to generate from schema search path.","title":"6.20.6 Configure the Output of db:structure:dump","anchor":"#configure-the-output-of-db-structure-dump"},{"code":["\nconfig.ssl_options = { hsts: { subdomains: true } }\n\nconfig.ssl_options = { hsts: { subdomains: true } }\n\nCopy\n"],"body":"Set the following in your config to enable HSTS when using subdomains:","title":"6.20.7 Configure SSL Options to Enable HSTS with Subdomains","anchor":"#configure-ssl-options-to-enable-hsts-with-subdomains"},{"code":["\nActiveSupport.to_time_preserves_timezone = false\n\nActiveSupport.to_time_preserves_timezone = false\n\nCopy\n"],"body":"When using Ruby 2.4, you can preserve the timezone of the receiver when calling to_time.","title":"6.20.8 Preserve Timezone of the Receiver","anchor":"#preserve-timezone-of-the-receiver"},{"code":[],"body":"In Rails 5.0, how JSON/JSONB attributes are serialized and deserialized changed. Now, if\nyou set a column equal to a String, Active Record will no longer turn that string\ninto a Hash, and will instead only return the string. This is not limited to code\ninteracting with models, but also affects :default column settings in db/schema.rb.\nIt is recommended that you do not set columns equal to a String, but pass a Hash\ninstead, which will be converted to and from a JSON string automatically.","title":"6.21 Changes with JSON/JSONB serialization","anchor":"#changes-with-json-jsonb-serialization"},{"title":"7 Upgrading from Rails 4.1 to Rails 4.2","anchor":"#upgrading-from-rails-4-1-to-rails-4-2","code":[],"body":""},{"title":"7.1 Web Console","anchor":"#web-console","code":[],"body":"First, add gem 'web-console', '~> 2.0' to the :development group in your Gemfile and run bundle install (it won't have been included when you upgraded Rails). Once it's been installed, you can simply drop a reference to the console helper (i.e., <%= console %>) into any view you want to enable it for. A console will also be provided on any error page you view in your development environment."},{"title":"7.2 Responders","anchor":"#responders","code":["\n# app/controllers/users_controller.rb\n\nclass UsersController < ApplicationController\n  respond_to :html, :json\n\n  def show\n    @user = User.find(params[:id])\n    respond_with @user\n  end\nend\n\n# app/controllers/users_controller.rb\n\nclass UsersController < ApplicationController\n  respond_to :html, :json\n\n  def show\n    @user = User.find(params[:id])\n    respond_with @user\n  end\nend\n\nCopy\n","\n# app/controllers/users_controller.rb\n\nclass UsersController < ApplicationController\n  def show\n    @user = User.find(params[:id])\n    respond_to do |format|\n      format.html\n      format.json { render json: @user }\n    end\n  end\nend\n\n# app/controllers/users_controller.rb\n\nclass UsersController < ApplicationController\n  def show\n    @user = User.find(params[:id])\n    respond_to do |format|\n      format.html\n      format.json { render json: @user }\n    end\n  end\nend\n\nCopy\n"],"body":"respond_with and the class-level respond_to methods have been extracted to the responders gem. To use them, simply add gem 'responders', '~> 2.0' to your Gemfile. Calls to respond_with and respond_to (again, at the class level) will no longer work without having included the responders gem in your dependencies:Instance-level respond_to is unaffected and does not require the additional gem:See #16526 for more details."},{"title":"7.3 Error handling in transaction callbacks","anchor":"#error-handling-in-transaction-callbacks","code":["\nconfig.active_record.raise_in_transactional_callbacks = true\n\nconfig.active_record.raise_in_transactional_callbacks = true\n\nCopy\n"],"body":"Currently, Active Record suppresses errors raised\nwithin after_rollback or after_commit callbacks and only prints them to\nthe logs. In the next version, these errors will no longer be suppressed.\nInstead, the errors will propagate normally just like in other Active\nRecord callbacks.When you define an after_rollback or after_commit callback, you\nwill receive a deprecation warning about this upcoming change. When\nyou are ready, you can opt into the new behavior and remove the\ndeprecation warning by adding following configuration to your\nconfig/application.rb:See #14488 and\n#16537 for more details."},{"title":"7.4 Ordering of test cases","anchor":"#ordering-of-test-cases","code":["\n# config/environments/test.rb\nRails.application.configure do\n  config.active_support.test_order = :sorted # or `:random` if you prefer\nend\n\n# config/environments/test.rb\nRails.application.configure do\n  config.active_support.test_order = :sorted # or `:random` if you prefer\nend\n\nCopy\n"],"body":"In Rails 5.0, test cases will be executed in random order by default. In\nanticipation of this change, Rails 4.2 introduced a new configuration option\nactive_support.test_order for explicitly specifying the test ordering. This\nallows you to either lock down the current behavior by setting the option to\n:sorted, or opt into the future behavior by setting the option to :random.If you do not specify a value for this option, a deprecation warning will be\nemitted. To avoid this, add the following line to your test environment:"},{"code":[],"body":"When using a custom coder (e.g. serialize :metadata, JSON),\nassigning nil to a serialized attribute will save it to the database\nas NULL instead of passing the nil value through the coder (e.g. \"null\"\nwhen using the JSON coder).","title":"7.5 Serialized attributes","anchor":"#serialized-attributes"},{"title":"7.6 Production log level","anchor":"#production-log-level","code":["\n# Set to `:info` to match the current default, or set to `:debug` to opt-into\n# the future default.\nconfig.log_level = :info\n\n# Set to `:info` to match the current default, or set to `:debug` to opt-into\n# the future default.\nconfig.log_level = :info\n\nCopy\n"],"body":"In Rails 5, the default log level for the production environment will be changed\nto :debug (from :info). To preserve the current default, add the following\nline to your production.rb:"},{"code":["\n# template.rb\ngenerate(:scaffold, \"person name:string\")\nroute \"root to: 'people#index'\"\nrake(\"db:migrate\")\n\ngit :init\ngit add: \".\"\ngit commit: %Q{ -m 'Initial commit' }\n\n# template.rb\ngenerate(:scaffold, \"person name:string\")\nroute \"root to: 'people#index'\"\nrake(\"db:migrate\")\n\ngit :init\ngit add: \".\"\ngit commit: %Q{ -m 'Initial commit' }\n\nCopy\n","\n# template.rb\ngenerate(:scaffold, \"person name:string\")\nroute \"root to: 'people#index'\"\nrake(\"db:migrate\")\n\nafter_bundle do\n  git :init\n  git add: \".\"\n  git commit: %Q{ -m 'Initial commit' }\nend\n\n# template.rb\ngenerate(:scaffold, \"person name:string\")\nroute \"root to: 'people#index'\"\nrake(\"db:migrate\")\n\nafter_bundle do\n  git :init\n  git add: \".\"\n  git commit: %Q{ -m 'Initial commit' }\nend\n\nCopy\n"],"body":"If you have a Rails template that adds all the files in version control, it\nfails to add the generated binstubs because it gets executed before Bundler:You can now wrap the git calls in an after_bundle block. It will be run\nafter the binstubs have been generated.","title":"7.7 after_bundle in Rails templates","anchor":"#after-bundle-in-rails-templates"},{"code":["\ngem 'rails-deprecated_sanitizer'\n\ngem 'rails-deprecated_sanitizer'\n\nCopy\n"],"body":"There's a new choice for sanitizing HTML fragments in your applications. The\nvenerable html-scanner approach is now officially being deprecated in favor of\nRails HTML Sanitizer.This means the methods sanitize, sanitize_css, strip_tags and\nstrip_links are backed by a new implementation.This new sanitizer uses Loofah internally. Loofah in turn uses Nokogiri, which\nwraps XML parsers written in both C and Java, so sanitization should be faster\nno matter which Ruby version you run.The new version updates sanitize, so it can take a Loofah::Scrubber for\npowerful scrubbing.\nSee some examples of scrubbers here.Two new scrubbers have also been added: PermitScrubber and TargetScrubber.\nRead the gem's readme for more information.The documentation for PermitScrubber and TargetScrubber explains how you\ncan gain complete control over when and how elements should be stripped.If your application needs to use the old sanitizer implementation, include rails-deprecated_sanitizer in your Gemfile:","title":"7.8 Rails HTML Sanitizer","anchor":"#rails-html-sanitizer"},{"code":[],"body":"The TagAssertions module (containing methods such as assert_tag), has been deprecated in favor of the assert_select methods from the SelectorAssertions module, which has been extracted into the rails-dom-testing gem.","title":"7.9 Rails DOM Testing","anchor":"#rails-dom-testing"},{"title":"7.10 Masked Authenticity Tokens","anchor":"#masked-authenticity-tokens","code":[],"body":"In order to mitigate SSL attacks, form_authenticity_token is now masked so that it varies with each request.  Thus, tokens are validated by unmasking and then decrypting.  As a result, any strategies for verifying requests from non-rails forms that relied on a static session CSRF token have to take this into account."},{"title":"7.11 Action Mailer","anchor":"#action-mailer","code":["\nclass Notifier < ActionMailer::Base\n  def notify(user, ...)\n    puts \"Called\"\n    mail(to: user.email, ...)\n  end\nend\n\nclass Notifier < ActionMailer::Base\n  def notify(user, ...)\n    puts \"Called\"\n    mail(to: user.email, ...)\n  end\nend\n\nCopy\n","\nmail = Notifier.notify(user, ...) # Notifier#notify is not yet called at this point\nmail = mail.deliver_now           # Prints \"Called\"\n\nmail = Notifier.notify(user, ...) # Notifier#notify is not yet called at this point\nmail = mail.deliver_now           # Prints \"Called\"\n\nCopy\n","\nclass Notifier < ActionMailer::Base\n  def self.broadcast_notifications(users, ...)\n    users.each { |user| Notifier.notify(user, ...) }\n  end\nend\n\nclass Notifier < ActionMailer::Base\n  def self.broadcast_notifications(users, ...)\n    users.each { |user| Notifier.notify(user, ...) }\n  end\nend\n\nCopy\n"],"body":"Previously, calling a mailer method on a mailer class will result in the\ncorresponding instance method being executed directly. With the introduction of\nActive Job and #deliver_later, this is no longer true. In Rails 4.2, the\ninvocation of the instance methods are deferred until either deliver_now or\ndeliver_later is called. For example:This should not result in any noticeable differences for most applications.\nHowever, if you need some non-mailer methods to be executed synchronously, and\nyou were previously relying on the synchronous proxying behavior, you should\ndefine them as class methods on the mailer class directly:"},{"code":[],"body":"The migration DSL has been expanded to support foreign key definitions. If\nyou've been using the Foreigner gem, you might want to consider removing it.\nNote that the foreign key support of Rails is a subset of Foreigner. This means\nthat not every Foreigner definition can be fully replaced by its Rails\nmigration DSL counterpart.The migration procedure is as follows:","title":"7.12 Foreign Key Support","anchor":"#foreign-key-support"},{"code":[],"body":"","title":"8 Upgrading from Rails 4.0 to Rails 4.1","anchor":"#upgrading-from-rails-4-0-to-rails-4-1"},{"title":"8.1 CSRF protection from remote <script> tags","anchor":"#csrf-protection-from-remote-script-tags","code":["\nget :index, format: :js\n\nget :index, format: :js\n\nCopy\n","\nxhr :get, :index, format: :js\n\nxhr :get, :index, format: :js\n\nCopy\n"],"body":"Or, \"whaaat my tests are failing!!!?\" or \"my <script> widget is busted!!\"Cross-site request forgery (CSRF) protection now covers GET requests with\nJavaScript responses, too. This prevents a third-party site from remotely\nreferencing your JavaScript with a <script> tag to extract sensitive data.This means that your functional and integration tests that usewill now trigger CSRF protection. Switch toto explicitly test an XmlHttpRequest."},{"title":"8.2 Spring","anchor":"#spring","code":[],"body":"If you want to use Spring as your application preloader you need to:"},{"title":"8.3 config/secrets.yml","anchor":"#config-secrets-yml","code":[],"body":"If you want to use the new secrets.yml convention to store your application's\nsecrets, you need to:"},{"code":[],"body":"If your test helper contains a call to\nActiveRecord::Migration.check_pending! this can be removed. The check\nis now done automatically when you require \"rails/test_help\", although\nleaving this line in your helper is not harmful in any way.","title":"8.4 Changes to test helper","anchor":"#changes-to-test-helper"},{"title":"8.5 Cookies serializer","anchor":"#cookies-serializer","code":["\nRails.application.config.action_dispatch.cookies_serializer = :hybrid\n\nRails.application.config.action_dispatch.cookies_serializer = :hybrid\n\nCopy\n","\nclass CookiesController < ApplicationController\n  def set_cookie\n    cookies.encrypted[:expiration_date] = Date.tomorrow # => Thu, 20 Mar 2014\n    redirect_to action: 'read_cookie'\n  end\n\n  def read_cookie\n    cookies.encrypted[:expiration_date] # => \"2014-03-20\"\n  end\nend\n\nclass CookiesController < ApplicationController\n  def set_cookie\n    cookies.encrypted[:expiration_date] = Date.tomorrow # => Thu, 20 Mar 2014\n    redirect_to action: 'read_cookie'\n  end\n\n  def read_cookie\n    cookies.encrypted[:expiration_date] # => \"2014-03-20\"\n  end\nend\n\nCopy\n"],"body":"Applications created before Rails 4.1 uses Marshal to serialize cookie values into\nthe signed and encrypted cookie jars. If you want to use the new JSON-based format\nin your application, you can add an initializer file with the following content:This would transparently migrate your existing Marshal-serialized cookies into the\nnew JSON-based format.When using the :json or :hybrid serializer, you should beware that not all\nRuby objects can be serialized as JSON. For example, Date and Time objects\nwill be serialized as strings, and Hashes will have their keys stringified.It's advisable that you only store simple data (strings and numbers) in cookies.\nIf you have to store complex objects, you would need to handle the conversion\nmanually when reading the values on subsequent requests.If you use the cookie session store, this would apply to the session and\nflash hash as well."},{"title":"8.6 Flash structure changes","anchor":"#flash-structure-changes","code":["\nflash[\"string\"] = \"a string\"\nflash[:symbol] = \"a symbol\"\n\n# Rails < 4.1\nflash.keys # => [\"string\", :symbol]\n\n# Rails >= 4.1\nflash.keys # => [\"string\", \"symbol\"]\n\nflash[\"string\"] = \"a string\"\nflash[:symbol] = \"a symbol\"\n\n# Rails < 4.1\nflash.keys # => [\"string\", :symbol]\n\n# Rails >= 4.1\nflash.keys # => [\"string\", \"symbol\"]\n\nCopy\n"],"body":"Flash message keys are\nnormalized to strings. They\ncan still be accessed using either symbols or strings. Looping through the flash\nwill always yield string keys:Make sure you are comparing Flash message keys against strings."},{"title":"8.7 Changes in JSON handling","anchor":"#changes-in-json-handling","code":[],"body":"There are a few major changes related to JSON handling in Rails 4.1."},{"title":"8.7.1 MultiJSON removal","anchor":"#multijson-removal","code":[],"body":"MultiJSON has reached its end-of-life\nand has been removed from Rails.If your application currently depends on MultiJSON directly, you have a few options:"},{"title":"8.7.2 JSON gem compatibility","anchor":"#json-gem-compatibility","code":["\nclass FooBar\n  def as_json(options = nil)\n    { foo: 'bar' }\n  end\nend\n\nclass FooBar\n  def as_json(options = nil)\n    { foo: 'bar' }\n  end\nend\n\nCopy\n","\nirb> FooBar.new.to_json\n=> \"{\\\"foo\\\":\\\"bar\\\"}\"\nirb> JSON.generate(FooBar.new, quirks_mode: true)\n=> \"\\\"#<FooBar:0x007fa80a481610>\\\"\"\n\nFooBar.new.to_json\nJSON.generate(FooBar.new, quirks_mode: true)\n\nCopy\n"],"body":"Historically, Rails had some compatibility issues with the JSON gem. Using\nJSON.generate and JSON.dump inside a Rails application could produce\nunexpected errors.Rails 4.1 fixed these issues by isolating its own encoder from the JSON gem. The\nJSON gem APIs will function as normal, but they will not have access to any\nRails-specific features. For example:"},{"code":[],"body":"The JSON encoder in Rails 4.1 has been rewritten to take advantage of the JSON\ngem. For most applications, this should be a transparent change. However, as\npart of the rewrite, the following features have been removed from the encoder:If your application depends on one of these features, you can get them back by\nadding the activesupport-json_encoder\ngem to your Gemfile.","title":"8.7.3 New JSON encoder","anchor":"#new-json-encoder"},{"title":"8.7.4 JSON representation of Time objects","anchor":"#json-representation-of-time-objects","code":["\nActiveSupport::JSON::Encoding.time_precision = 0\n\nActiveSupport::JSON::Encoding.time_precision = 0\n\nCopy\n"],"body":"#as_json for objects with time component (Time, DateTime, ActiveSupport::TimeWithZone)\nnow returns millisecond precision by default. If you need to keep old behavior with no millisecond\nprecision, set the following in an initializer:"},{"code":["\nclass ReadOnlyModel < ActiveRecord::Base\n  before_save { return false } # BAD\nend\n\nclass ReadOnlyModel < ActiveRecord::Base\n  before_save { return false } # BAD\nend\n\nCopy\n","\nclass ReadOnlyModel < ActiveRecord::Base\n  before_save { false } # GOOD\nend\n\nclass ReadOnlyModel < ActiveRecord::Base\n  before_save { false } # GOOD\nend\n\nCopy\n","\nclass ReadOnlyModel < ActiveRecord::Base\n  before_save :before_save_callback # GOOD\n\n  private\n    def before_save_callback\n      return false\n    end\nend\n\nclass ReadOnlyModel < ActiveRecord::Base\n  before_save :before_save_callback # GOOD\n\n  private\n    def before_save_callback\n      return false\n    end\nend\n\nCopy\n"],"body":"Previously, Rails allowed inline callback blocks to use return this way:This behavior was never intentionally supported. Due to a change in the internals\nof ActiveSupport::Callbacks, this is no longer allowed in Rails 4.1. Using a\nreturn statement in an inline callback block causes a LocalJumpError to\nbe raised when the callback is executed.Inline callback blocks using return can be refactored to evaluate to the\nreturned value:Alternatively, if return is preferred it is recommended to explicitly define\na method:This change applies to most places in Rails where callbacks are used, including\nActive Record and Active Model callbacks, as well as filters in Action\nController (e.g. before_action).See this pull request for more\ndetails.","title":"8.8 Usage of return within inline callback blocks","anchor":"#usage-of-return-within-inline-callback-blocks"},{"title":"8.9 Methods defined in Active Record fixtures","anchor":"#methods-defined-in-active-record-fixtures","code":["\nmodule FixtureFileHelpers\n  def file_sha(path)\n    Digest::SHA2.hexdigest(File.read(Rails.root.join('test/fixtures', path)))\n  end\nend\n\nActiveRecord::FixtureSet.context_class.include FixtureFileHelpers\n\nmodule FixtureFileHelpers\n  def file_sha(path)\n    Digest::SHA2.hexdigest(File.read(Rails.root.join('test/fixtures', path)))\n  end\nend\n\nActiveRecord::FixtureSet.context_class.include FixtureFileHelpers\n\nCopy\n"],"body":"Rails 4.1 evaluates each fixture's ERB in a separate context, so helper methods\ndefined in a fixture will not be available in other fixtures.Helper methods that are used in multiple fixtures should be defined on modules\nincluded in the newly introduced ActiveRecord::FixtureSet.context_class, in\ntest_helper.rb."},{"code":["\nconfig.i18n.enforce_available_locales = false\n\nconfig.i18n.enforce_available_locales = false\n\nCopy\n"],"body":"Rails 4.1 now defaults the I18n option enforce_available_locales to true. This\nmeans that it will make sure that all locales passed to it must be declared in\nthe available_locales list.To disable it (and allow I18n to accept any locale option) add the following\nconfiguration to your application:Note that this option was added as a security measure, to ensure user input\ncannot be used as locale information unless it is previously known. Therefore,\nit's recommended not to disable this option unless you have a strong reason for\ndoing so.","title":"8.10 I18n enforcing available locales","anchor":"#i18n-enforcing-available-locales"},{"title":"8.11 Mutator methods called on Relation","anchor":"#mutator-methods-called-on-relation","code":["\n# Instead of this\nAuthor.where(name: 'Hank Moody').compact!\n\n# Now you have to do this\nauthors = Author.where(name: 'Hank Moody').to_a\nauthors.compact!\n\n# Instead of this\nAuthor.where(name: 'Hank Moody').compact!\n\n# Now you have to do this\nauthors = Author.where(name: 'Hank Moody').to_a\nauthors.compact!\n\nCopy\n"],"body":"Relation no longer has mutator methods like #map! and #delete_if. Convert\nto an Array by calling #to_a before using these methods.It intends to prevent odd bugs and confusion in code that call mutator\nmethods directly on the Relation."},{"code":["\nclass User < ActiveRecord::Base\n  default_scope { where state: 'pending' }\n  scope :active, -> { where state: 'active' }\n  scope :inactive, -> { where state: 'inactive' }\nend\n\nUser.all\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'pending'\n\nUser.active\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'active'\n\nUser.where(state: 'inactive')\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'inactive'\n\nclass User < ActiveRecord::Base\n  default_scope { where state: 'pending' }\n  scope :active, -> { where state: 'active' }\n  scope :inactive, -> { where state: 'inactive' }\nend\n\nUser.all\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'pending'\n\nUser.active\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'active'\n\nUser.where(state: 'inactive')\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'inactive'\n\nCopy\n","\nclass User < ActiveRecord::Base\n  default_scope { where state: 'pending' }\n  scope :active, -> { where state: 'active' }\n  scope :inactive, -> { where state: 'inactive' }\nend\n\nUser.all\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'pending'\n\nUser.active\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'pending' AND \"users\".\"state\" = 'active'\n\nUser.where(state: 'inactive')\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'pending' AND \"users\".\"state\" = 'inactive'\n\nclass User < ActiveRecord::Base\n  default_scope { where state: 'pending' }\n  scope :active, -> { where state: 'active' }\n  scope :inactive, -> { where state: 'inactive' }\nend\n\nUser.all\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'pending'\n\nUser.active\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'pending' AND \"users\".\"state\" = 'active'\n\nUser.where(state: 'inactive')\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'pending' AND \"users\".\"state\" = 'inactive'\n\nCopy\n","\nclass User < ActiveRecord::Base\n  default_scope { where state: 'pending' }\n  scope :active, -> { unscope(where: :state).where(state: 'active') }\n  scope :inactive, -> { rewhere state: 'inactive' }\nend\n\nUser.all\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'pending'\n\nUser.active\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'active'\n\nUser.inactive\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'inactive'\n\nclass User < ActiveRecord::Base\n  default_scope { where state: 'pending' }\n  scope :active, -> { unscope(where: :state).where(state: 'active') }\n  scope :inactive, -> { rewhere state: 'inactive' }\nend\n\nUser.all\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'pending'\n\nUser.active\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'active'\n\nUser.inactive\n# SELECT \"users\".* FROM \"users\" WHERE \"users\".\"state\" = 'inactive'\n\nCopy\n"],"body":"Default scopes are no longer overridden by chained conditions.In previous versions when you defined a default_scope in a model\nit was overridden by chained conditions in the same field. Now it\nis merged like any other scope.Before:After:To get the previous behavior it is needed to explicitly remove the\ndefault_scope condition using unscoped, unscope, rewhere or\nexcept.","title":"8.12 Changes on Default Scopes","anchor":"#changes-on-default-scopes"},{"code":[],"body":"Rails 4.1 introduces :plain, :html, and :body options to render. Those\noptions are now the preferred way to render string-based content, as it allows\nyou to specify which content type you want the response sent as.From the security standpoint, if you don't expect to have any markup in your\nresponse body, you should be using render :plain as most browsers will escape\nunsafe content in the response for you.We will be deprecating the use of render :text in a future version. So please\nstart using the more precise :plain, :html, and :body options instead.\nUsing render :text may pose a security risk, as the content is sent as\ntext/html.","title":"8.13 Rendering content from string","anchor":"#rendering-content-from-string"},{"title":"8.14 PostgreSQL json and hstore datatypes","anchor":"#postgresql-json-and-hstore-datatypes","code":[],"body":"Rails 4.1 will map json and hstore columns to a string-keyed Ruby Hash.\nIn earlier versions, a HashWithIndifferentAccess was used. This means that\nsymbol access is no longer supported. This is also the case for\nstore_accessors based on top of json or hstore columns. Make sure to use\nstring keys consistently."},{"title":"8.15 Explicit block use for ActiveSupport::Callbacks","anchor":"#explicit-block-use-for-activesupport-callbacks","code":["\n# Previously in Rails 4.0\nset_callback :save, :around, ->(r, &block) { stuff; result = block.call; stuff }\n\n# Now in Rails 4.1\nset_callback :save, :around, ->(r, block) { stuff; result = block.call; stuff }\n\n# Previously in Rails 4.0\nset_callback :save, :around, ->(r, &block) { stuff; result = block.call; stuff }\n\n# Now in Rails 4.1\nset_callback :save, :around, ->(r, block) { stuff; result = block.call; stuff }\n\nCopy\n"],"body":"Rails 4.1 now expects an explicit block to be passed when calling\nActiveSupport::Callbacks.set_callback. This change stems from\nActiveSupport::Callbacks being largely rewritten for the 4.1 release."},{"code":[],"body":"If your application is currently on any version of Rails older than 3.2.x, you should upgrade to Rails 3.2 before attempting one to Rails 4.0.The following changes are meant for upgrading your application to Rails 4.0.","title":"9 Upgrading from Rails 3.2 to Rails 4.0","anchor":"#upgrading-from-rails-3-2-to-rails-4-0"},{"title":"9.1 HTTP PATCH","anchor":"#http-patch","code":["\nresources :users\n\nresources :users\n\nCopy\n","\n<%= form_for @user do |f| %>\n\n<%= form_for @user do |f| %>\n\nCopy\n","\nclass UsersController < ApplicationController\n  def update\n    # No change needed; PATCH will be preferred, and PUT will still work.\n  end\nend\n\nclass UsersController < ApplicationController\n  def update\n    # No change needed; PATCH will be preferred, and PUT will still work.\n  end\nend\n\nCopy\n","\nresources :users do\n  put :update_name, on: :member\nend\n\nresources :users do\n  put :update_name, on: :member\nend\n\nCopy\n","\n<%= form_for [ :update_name, @user ] do |f| %>\n\n<%= form_for [ :update_name, @user ] do |f| %>\n\nCopy\n","\nclass UsersController < ApplicationController\n  def update_name\n    # Change needed; form_for will try to use a non-existent PATCH route.\n  end\nend\n\nclass UsersController < ApplicationController\n  def update_name\n    # Change needed; form_for will try to use a non-existent PATCH route.\n  end\nend\n\nCopy\n","\nresources :users do\n  patch :update_name, on: :member\nend\n\nresources :users do\n  patch :update_name, on: :member\nend\n\nCopy\n","\n<%= form_for [ :update_name, @user ], method: :put do |f| %>\n\n<%= form_for [ :update_name, @user ], method: :put do |f| %>\n\nCopy\n"],"body":"Rails 4 now uses PATCH as the primary HTTP verb for updates when a RESTful\nresource is declared in config/routes.rb. The update action is still used,\nand PUT requests will continue to be routed to the update action as well.\nSo, if you're using only the standard RESTful routes, no changes need to be made:However, you will need to make a change if you are using form_for to update\na resource in conjunction with a custom route using the PUT HTTP method:If the action is not being used in a public API and you are free to change the\nHTTP method, you can update your route to use patch instead of put:PUT requests to /users/:id in Rails 4 get routed to update as they are\ntoday. So, if you have an API that gets real PUT requests it is going to work.\nThe router also routes PATCH requests to /users/:id to the update action.If the action is being used in a public API and you can't change to HTTP method\nbeing used, you can update your form to use the PUT method instead:For more on PATCH and why this change was made, see this post\non the Rails blog."},{"title":"9.1.1 A note about media types","anchor":"#a-note-about-media-types","code":["\n# in your controller:\ndef update\n  respond_to do |format|\n    format.json do\n      # perform a partial update\n      @article.update params[:article]\n    end\n\n    format.json_patch do\n      # perform sophisticated change\n    end\n  end\nend\n\n# in your controller:\ndef update\n  respond_to do |format|\n    format.json do\n      # perform a partial update\n      @article.update params[:article]\n    end\n\n    format.json_patch do\n      # perform sophisticated change\n    end\n  end\nend\n\nCopy\n","\n# config/initializers/json_patch.rb\nMime::Type.register 'application/json-patch+json', :json_patch\n\n# config/initializers/json_patch.rb\nMime::Type.register 'application/json-patch+json', :json_patch\n\nCopy\n"],"body":"The errata for the PATCH verb specifies that a 'diff' media type should be\nused with PATCH. One\nsuch format is JSON Patch. While Rails\ndoes not support JSON Patch natively, it's easy enough to add support:As JSON Patch was only recently made into an RFC, there aren't a lot of great\nRuby libraries yet. Aaron Patterson's\nhana is one such gem, but doesn't have\nfull support for the last few changes in the specification."},{"title":"9.2 Gemfile","anchor":"#upgrading-from-rails-3-2-to-rails-4-0-gemfile","code":["\n# Require the gems listed in Gemfile, including any gems\n# you've limited to :test, :development, or :production.\nBundler.require(*Rails.groups)\n\n# Require the gems listed in Gemfile, including any gems\n# you've limited to :test, :development, or :production.\nBundler.require(*Rails.groups)\n\nCopy\n"],"body":"Rails 4.0 removed the assets group from Gemfile. You'd need to remove that\nline from your Gemfile when upgrading. You should also update your application\nfile (in config/application.rb):"},{"code":[],"body":"Rails 4.0 no longer supports loading plugins from vendor/plugins. You must replace any plugins by extracting them to gems and adding them to your Gemfile. If you choose not to make them gems, you can move them into, say, lib/my_plugin/* and add an appropriate initializer in config/initializers/my_plugin.rb.","title":"9.3 vendor/plugins","anchor":"#upgrading-from-rails-3-2-to-rails-4-0-vendor-plugins"},{"title":"9.4 Active Record","anchor":"#upgrading-from-rails-3-2-to-rails-4-0-active-record","code":[],"body":""},{"code":[],"body":"Rails 4.0 extracted Active Resource to its own gem. If you still need the feature you can add the Active Resource gem in your Gemfile.","title":"9.5 Active Resource","anchor":"#active-resource"},{"title":"9.6 Active Model","anchor":"#active-model","code":[],"body":""},{"code":[],"body":"","title":"9.7 Action Pack","anchor":"#action-pack"},{"code":[],"body":"Rails 4.0 removes the j alias for ERB::Util#json_escape since j is already used for ActionView::Helpers::JavaScriptHelper#escape_javascript.","title":"9.8 Active Support","anchor":"#active-support"},{"title":"9.8.1 Cache","anchor":"#cache","code":[],"body":"The caching method changed between Rails 3.x and 4.0. You should change the cache namespace and roll out with a cold cache."},{"title":"9.9 Helpers Loading Order","anchor":"#helpers-loading-order","code":[],"body":"The order in which helpers from more than one directory are loaded has changed in Rails 4.0. Previously, they were gathered and then sorted alphabetically. After upgrading to Rails 4.0, helpers will preserve the order of loaded directories and will be sorted alphabetically only within each directory. Unless you explicitly use the helpers_path parameter, this change will only impact the way of loading helpers from engines. If you rely on the ordering, you should check if correct methods are available after upgrade. If you would like to change the order in which engines are loaded, you can use config.railties_order= method."},{"title":"9.10 Active Record Observer and Action Controller Sweeper","anchor":"#active-record-observer-and-action-controller-sweeper","code":[],"body":"ActiveRecord::Observer and ActionController::Caching::Sweeper have been extracted to the rails-observers gem. You will need to add the rails-observers gem if you require these features."},{"title":"9.11 sprockets-rails","anchor":"#sprockets-rails","code":[],"body":""},{"code":[],"body":"","title":"9.12 sass-rails","anchor":"#sass-rails"},{"code":[],"body":"If your application is currently on any version of Rails older than 3.1.x, you\nshould upgrade to Rails 3.1 before attempting an update to Rails 3.2.The following changes are meant for upgrading your application to the latest\n3.2.x version of Rails.","title":"10 Upgrading from Rails 3.1 to Rails 3.2","anchor":"#upgrading-from-rails-3-1-to-rails-3-2"},{"title":"10.1 Gemfile","anchor":"#upgrading-from-rails-3-1-to-rails-3-2-gemfile","code":["\ngem 'rails', '3.2.21'\n\ngroup :assets do\n  gem 'sass-rails',   '~> 3.2.6'\n  gem 'coffee-rails', '~> 3.2.2'\n  gem 'uglifier',     '>= 1.0.3'\nend\n\ngem 'rails', '3.2.21'\n\ngroup :assets do\n  gem 'sass-rails',   '~> 3.2.6'\n  gem 'coffee-rails', '~> 3.2.2'\n  gem 'uglifier',     '>= 1.0.3'\nend\n\nCopy\n"],"body":"Make the following changes to your Gemfile."},{"code":["\n# Raise exception on mass assignment protection for Active Record models\nconfig.active_record.mass_assignment_sanitizer = :strict\n\n# Log the query plan for queries taking more than this (works\n# with SQLite, MySQL, and PostgreSQL)\nconfig.active_record.auto_explain_threshold_in_seconds = 0.5\n\n# Raise exception on mass assignment protection for Active Record models\nconfig.active_record.mass_assignment_sanitizer = :strict\n\n# Log the query plan for queries taking more than this (works\n# with SQLite, MySQL, and PostgreSQL)\nconfig.active_record.auto_explain_threshold_in_seconds = 0.5\n\nCopy\n"],"body":"There are a couple of new configuration settings that you should add to your development environment:","title":"10.2 config/environments/development.rb","anchor":"#upgrading-from-rails-3-1-to-rails-3-2-config-environments-development-rb"},{"code":["\n# Raise exception on mass assignment protection for Active Record models\nconfig.active_record.mass_assignment_sanitizer = :strict\n\n# Raise exception on mass assignment protection for Active Record models\nconfig.active_record.mass_assignment_sanitizer = :strict\n\nCopy\n"],"body":"The mass_assignment_sanitizer configuration setting should also be added to config/environments/test.rb:","title":"10.3 config/environments/test.rb","anchor":"#upgrading-from-rails-3-1-to-rails-3-2-config-environments-test-rb"},{"code":[],"body":"Rails 3.2 deprecates vendor/plugins and Rails 4.0 will remove them completely. While it's not strictly necessary as part of a Rails 3.2 upgrade, you can start replacing any plugins by extracting them to gems and adding them to your Gemfile. If you choose not to make them gems, you can move them into, say, lib/my_plugin/* and add an appropriate initializer in config/initializers/my_plugin.rb.","title":"10.4 vendor/plugins","anchor":"#upgrading-from-rails-3-1-to-rails-3-2-vendor-plugins"},{"title":"10.5 Active Record","anchor":"#upgrading-from-rails-3-1-to-rails-3-2-active-record","code":[],"body":"Option :dependent => :restrict has been removed from belongs_to. If you want to prevent deleting the object if there are any associated objects, you can set :dependent => :destroy and return false after checking for existence of association from any of the associated object's destroy callbacks."},{"title":"11 Upgrading from Rails 3.0 to Rails 3.1","anchor":"#upgrading-from-rails-3-0-to-rails-3-1","code":[],"body":"If your application is currently on any version of Rails older than 3.0.x, you should upgrade to Rails 3.0 before attempting an update to Rails 3.1.The following changes are meant for upgrading your application to Rails 3.1.12, the last 3.1.x version of Rails."},{"title":"11.1 Gemfile","anchor":"#gemfile","code":["\ngem 'rails', '3.1.12'\ngem 'mysql2'\n\n# Needed for the new asset pipeline\ngroup :assets do\n  gem 'sass-rails',   '~> 3.1.7'\n  gem 'coffee-rails', '~> 3.1.1'\n  gem 'uglifier',     '>= 1.0.3'\nend\n\n# jQuery is the default JavaScript library in Rails 3.1\ngem 'jquery-rails'\n\ngem 'rails', '3.1.12'\ngem 'mysql2'\n\n# Needed for the new asset pipeline\ngroup :assets do\n  gem 'sass-rails',   '~> 3.1.7'\n  gem 'coffee-rails', '~> 3.1.1'\n  gem 'uglifier',     '>= 1.0.3'\nend\n\n# jQuery is the default JavaScript library in Rails 3.1\ngem 'jquery-rails'\n\nCopy\n"],"body":"Make the following changes to your Gemfile."},{"code":["\nconfig.assets.enabled = true\nconfig.assets.version = '1.0'\n\nconfig.assets.enabled = true\nconfig.assets.version = '1.0'\n\nCopy\n","\n# Defaults to '/assets'\nconfig.assets.prefix = '/asset-files'\n\n# Defaults to '/assets'\nconfig.assets.prefix = '/asset-files'\n\nCopy\n"],"body":"The asset pipeline requires the following additions:If your application is using an \"/assets\" route for a resource you may want to change the prefix used for assets to avoid conflicts:","title":"11.2 config/application.rb","anchor":"#config-application-rb"},{"code":["\n# Do not compress assets\nconfig.assets.compress = false\n\n# Expands the lines which load the assets\nconfig.assets.debug = true\n\n# Do not compress assets\nconfig.assets.compress = false\n\n# Expands the lines which load the assets\nconfig.assets.debug = true\n\nCopy\n"],"body":"Remove the RJS setting config.action_view.debug_rjs = true.Add these settings if you enable the asset pipeline:","title":"11.3 config/environments/development.rb","anchor":"#upgrading-from-rails-3-0-to-rails-3-1-config-environments-development-rb"},{"code":["\n# Compress JavaScripts and CSS\nconfig.assets.compress = true\n\n# Don't fallback to assets pipeline if a precompiled asset is missed\nconfig.assets.compile = false\n\n# Generate digests for assets URLs\nconfig.assets.digest = true\n\n# Defaults to Rails.root.join(\"public/assets\")\n# config.assets.manifest = YOUR_PATH\n\n# Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)\n# config.assets.precompile += %w( admin.js admin.css )\n\n# Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.\n# config.force_ssl = true\n\n# Compress JavaScripts and CSS\nconfig.assets.compress = true\n\n# Don't fallback to assets pipeline if a precompiled asset is missed\nconfig.assets.compile = false\n\n# Generate digests for assets URLs\nconfig.assets.digest = true\n\n# Defaults to Rails.root.join(\"public/assets\")\n# config.assets.manifest = YOUR_PATH\n\n# Precompile additional assets (application.js, application.css, and all non-JS/CSS are already added)\n# config.assets.precompile += %w( admin.js admin.css )\n\n# Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.\n# config.force_ssl = true\n\nCopy\n"],"body":"Again, most of the changes below are for the asset pipeline. You can read more about these in the Asset Pipeline guide.","title":"11.4 config/environments/production.rb","anchor":"#config-environments-production-rb"},{"code":["\n# Configure static asset server for tests with Cache-Control for performance\nconfig.public_file_server.enabled = true\nconfig.public_file_server.headers = {\n  'Cache-Control' => 'public, max-age=3600'\n}\n\n# Configure static asset server for tests with Cache-Control for performance\nconfig.public_file_server.enabled = true\nconfig.public_file_server.headers = {\n  'Cache-Control' => 'public, max-age=3600'\n}\n\nCopy\n"],"body":"You can help test performance with these additions to your test environment:","title":"11.5 config/environments/test.rb","anchor":"#upgrading-from-rails-3-0-to-rails-3-1-config-environments-test-rb"},{"code":["\n# Be sure to restart your server when you modify this file.\n# This file contains settings for ActionController::ParamsWrapper which\n# is enabled by default.\n\n# Enable parameter wrapping for JSON. You can disable this by setting :format to an empty array.\nActiveSupport.on_load(:action_controller) do\n  wrap_parameters format: [:json]\nend\n\n# Disable root element in JSON by default.\nActiveSupport.on_load(:active_record) do\n  self.include_root_in_json = false\nend\n\n# Be sure to restart your server when you modify this file.\n# This file contains settings for ActionController::ParamsWrapper which\n# is enabled by default.\n\n# Enable parameter wrapping for JSON. You can disable this by setting :format to an empty array.\nActiveSupport.on_load(:action_controller) do\n  wrap_parameters format: [:json]\nend\n\n# Disable root element in JSON by default.\nActiveSupport.on_load(:active_record) do\n  self.include_root_in_json = false\nend\n\nCopy\n"],"body":"Add this file with the following contents, if you wish to wrap parameters into a nested hash. This is on by default in new applications.","title":"11.6 config/initializers/wrap_parameters.rb","anchor":"#config-initializers-wrap-parameters-rb"},{"code":["\n# in config/initializers/session_store.rb\nAppName::Application.config.session_store :cookie_store, key: 'SOMETHINGNEW'\n\n# in config/initializers/session_store.rb\nAppName::Application.config.session_store :cookie_store, key: 'SOMETHINGNEW'\n\nCopy\n","\n$ bin/rake db:sessions:clear\n\nbin/rake db:sessions:clear\n\nCopy\n"],"body":"You need to change your session key to something new, or remove all sessions:or","title":"11.7 config/initializers/session_store.rb","anchor":"#config-initializers-session-store-rb"},{"code":[],"body":"","title":"11.8 Remove :cache and :concat options in asset helpers references in views","anchor":"#remove-cache-and-concat-options-in-asset-helpers-references-in-views"}]