[{"code":[],"body":"Currently, Rails plugins are built as gems, gemified plugins. They can be shared across\ndifferent Rails applications using RubyGems and Bundler if desired.","title":"1 Setup","anchor":"#setup"},{"title":"1.1 Generate a gemified plugin.","anchor":"#generate-a-gemified-plugin","code":["\n$ rails plugin new yaffle\n\nrails plugin new yaffle\n\nCopy\n","\n$ rails plugin new --help\n\nrails plugin new --help\n\nCopy\n"],"body":"Rails ships with a rails plugin new command which creates a\nskeleton for developing any kind of Rails extension with the ability\nto run integration tests using a dummy Rails application. Create your\nplugin with the command:See usage and options by asking for help:"},{"code":["\n  1 runs, 1 assertions, 0 failures, 0 errors, 0 skips\n\n  1 runs, 1 assertions, 0 failures, 0 errors, 0 skips\n\nCopy\n"],"body":"You can navigate to the directory that contains the plugin, run the bundle install command\nand run the one generated test using the bin/test command.You should see:This will tell you that everything got generated properly and you are ready to start adding functionality.","title":"2 Testing Your Newly Generated Plugin","anchor":"#testing-your-newly-generated-plugin"},{"title":"3 Extending Core Classes","anchor":"#extending-core-classes","code":["\n# yaffle/test/core_ext_test.rb\n\nrequire \"test_helper\"\n\nclass CoreExtTest < ActiveSupport::TestCase\n  def test_to_squawk_prepends_the_word_squawk\n    assert_equal \"squawk! Hello World\", \"Hello World\".to_squawk\n  end\nend\n\n# yaffle/test/core_ext_test.rb\n\nrequire \"test_helper\"\n\nclass CoreExtTest < ActiveSupport::TestCase\n  def test_to_squawk_prepends_the_word_squawk\n    assert_equal \"squawk! Hello World\", \"Hello World\".to_squawk\n  end\nend\n\nCopy\n","\nE\n\nError:\nCoreExtTest#test_to_squawk_prepends_the_word_squawk:\nNoMethodError: undefined method `to_squawk' for \"Hello World\":String\n\n\nbin/test /path/to/yaffle/test/core_ext_test.rb:4\n\n.\n\nFinished in 0.003358s, 595.6483 runs/s, 297.8242 assertions/s.\n\n2 runs, 1 assertions, 0 failures, 1 errors, 0 skips\n\nE\n\nError:\nCoreExtTest#test_to_squawk_prepends_the_word_squawk:\nNoMethodError: undefined method `to_squawk' for \"Hello World\":String\n\n\nbin/test /path/to/yaffle/test/core_ext_test.rb:4\n\n.\n\nFinished in 0.003358s, 595.6483 runs/s, 297.8242 assertions/s.\n\n2 runs, 1 assertions, 0 failures, 1 errors, 0 skips\n\nCopy\n","\n# yaffle/lib/yaffle.rb\n\nrequire \"yaffle/railtie\"\nrequire \"yaffle/core_ext\"\n\nmodule Yaffle\n  # Your code goes here...\nend\n\n# yaffle/lib/yaffle.rb\n\nrequire \"yaffle/railtie\"\nrequire \"yaffle/core_ext\"\n\nmodule Yaffle\n  # Your code goes here...\nend\n\nCopy\n","\n# yaffle/lib/yaffle/core_ext.rb\n\nclass String\n  def to_squawk\n    \"squawk! #{self}\".strip\n  end\nend\n\n# yaffle/lib/yaffle/core_ext.rb\n\nclass String\n  def to_squawk\n    \"squawk! #{self}\".strip\n  end\nend\n\nCopy\n","\n  2 runs, 2 assertions, 0 failures, 0 errors, 0 skips\n\n  2 runs, 2 assertions, 0 failures, 0 errors, 0 skips\n\nCopy\n","\nirb> \"Hello World\".to_squawk\n=> \"squawk! Hello World\"\n\n\"Hello World\".to_squawk\n\nCopy\n"],"body":"This section will explain how to add a method to String that will be available anywhere in your Rails application.In this example you will add a method to String named to_squawk. To begin, create a new test file with a few assertions:Run bin/test to run the test. This test should fail because we haven't implemented the to_squawk method:Great - now you are ready to start development.In lib/yaffle.rb, add require \"yaffle/core_ext\":Finally, create the core_ext.rb file and add the to_squawk method:To test that your method does what it says it does, run the unit tests with bin/test from your plugin directory.To see this in action, change to the test/dummy directory, start bin/rails console, and commence squawking:"},{"code":["\n# yaffle/test/acts_as_yaffle_test.rb\n\nrequire \"test_helper\"\n\nclass ActsAsYaffleTest < ActiveSupport::TestCase\nend\n\n# yaffle/test/acts_as_yaffle_test.rb\n\nrequire \"test_helper\"\n\nclass ActsAsYaffleTest < ActiveSupport::TestCase\nend\n\nCopy\n","\n# yaffle/lib/yaffle.rb\n\nrequire \"yaffle/railtie\"\nrequire \"yaffle/core_ext\"\nrequire \"yaffle/acts_as_yaffle\"\n\nmodule Yaffle\n  # Your code goes here...\nend\n\n# yaffle/lib/yaffle.rb\n\nrequire \"yaffle/railtie\"\nrequire \"yaffle/core_ext\"\nrequire \"yaffle/acts_as_yaffle\"\n\nmodule Yaffle\n  # Your code goes here...\nend\n\nCopy\n","\n# yaffle/lib/yaffle/acts_as_yaffle.rb\n\nmodule Yaffle\n  module ActsAsYaffle\n  end\nend\n\n# yaffle/lib/yaffle/acts_as_yaffle.rb\n\nmodule Yaffle\n  module ActsAsYaffle\n  end\nend\n\nCopy\n"],"body":"A common pattern in plugins is to add a method called acts_as_something to models. In this case, you\nwant to write a method called acts_as_yaffle that adds a squawk method to your Active Record models.To begin, set up your files so that you have:","title":"4 Add an \"acts_as\" Method to Active Record","anchor":"#add-an-acts-as-method-to-active-record"},{"code":["\n# yaffle/test/acts_as_yaffle_test.rb\n\nrequire \"test_helper\"\n\nclass ActsAsYaffleTest < ActiveSupport::TestCase\n  def test_a_hickwalls_yaffle_text_field_should_be_last_squawk\n    assert_equal \"last_squawk\", Hickwall.yaffle_text_field\n  end\n\n  def test_a_wickwalls_yaffle_text_field_should_be_last_tweet\n    assert_equal \"last_tweet\", Wickwall.yaffle_text_field\n  end\nend\n\n# yaffle/test/acts_as_yaffle_test.rb\n\nrequire \"test_helper\"\n\nclass ActsAsYaffleTest < ActiveSupport::TestCase\n  def test_a_hickwalls_yaffle_text_field_should_be_last_squawk\n    assert_equal \"last_squawk\", Hickwall.yaffle_text_field\n  end\n\n  def test_a_wickwalls_yaffle_text_field_should_be_last_tweet\n    assert_equal \"last_tweet\", Wickwall.yaffle_text_field\n  end\nend\n\nCopy\n","\n# Running:\n\n..E\n\nError:\nActsAsYaffleTest#test_a_wickwalls_yaffle_text_field_should_be_last_tweet:\nNameError: uninitialized constant ActsAsYaffleTest::Wickwall\n\n\nbin/test /path/to/yaffle/test/acts_as_yaffle_test.rb:8\n\nE\n\nError:\nActsAsYaffleTest#test_a_hickwalls_yaffle_text_field_should_be_last_squawk:\nNameError: uninitialized constant ActsAsYaffleTest::Hickwall\n\n\nbin/test /path/to/yaffle/test/acts_as_yaffle_test.rb:4\n\n\n\nFinished in 0.004812s, 831.2949 runs/s, 415.6475 assertions/s.\n\n4 runs, 2 assertions, 0 failures, 2 errors, 0 skips\n\n# Running:\n\n..E\n\nError:\nActsAsYaffleTest#test_a_wickwalls_yaffle_text_field_should_be_last_tweet:\nNameError: uninitialized constant ActsAsYaffleTest::Wickwall\n\n\nbin/test /path/to/yaffle/test/acts_as_yaffle_test.rb:8\n\nE\n\nError:\nActsAsYaffleTest#test_a_hickwalls_yaffle_text_field_should_be_last_squawk:\nNameError: uninitialized constant ActsAsYaffleTest::Hickwall\n\n\nbin/test /path/to/yaffle/test/acts_as_yaffle_test.rb:4\n\n\n\nFinished in 0.004812s, 831.2949 runs/s, 415.6475 assertions/s.\n\n4 runs, 2 assertions, 0 failures, 2 errors, 0 skips\n\nCopy\n","\n$ cd test/dummy\n$ bin/rails generate model Hickwall last_squawk:string\n$ bin/rails generate model Wickwall last_squawk:string last_tweet:string\n\ncd test/dummy\nbin/rails generate model Hickwall last_squawk:string\nbin/rails generate model Wickwall last_squawk:string last_tweet:string\n\nCopy\n","\n$ cd test/dummy\n$ bin/rails db:migrate\n\ncd test/dummy\nbin/rails db:migrate\n\nCopy\n","\n# test/dummy/app/models/hickwall.rb\n\nclass Hickwall < ApplicationRecord\n  acts_as_yaffle\nend\n\n# test/dummy/app/models/hickwall.rb\n\nclass Hickwall < ApplicationRecord\n  acts_as_yaffle\nend\n\nCopy\n","\n# test/dummy/app/models/wickwall.rb\n\nclass Wickwall < ApplicationRecord\n  acts_as_yaffle yaffle_text_field: :last_tweet\nend\n\n# test/dummy/app/models/wickwall.rb\n\nclass Wickwall < ApplicationRecord\n  acts_as_yaffle yaffle_text_field: :last_tweet\nend\n\nCopy\n","\n# yaffle/lib/yaffle/acts_as_yaffle.rb\n\nmodule Yaffle\n  module ActsAsYaffle\n    extend ActiveSupport::Concern\n\n    class_methods do\n      def acts_as_yaffle(options = {})\n      end\n    end\n  end\nend\n\n# yaffle/lib/yaffle/acts_as_yaffle.rb\n\nmodule Yaffle\n  module ActsAsYaffle\n    extend ActiveSupport::Concern\n\n    class_methods do\n      def acts_as_yaffle(options = {})\n      end\n    end\n  end\nend\n\nCopy\n","\n# test/dummy/app/models/application_record.rb\n\nclass ApplicationRecord < ActiveRecord::Base\n  include Yaffle::ActsAsYaffle\n\n  self.abstract_class = true\nend\n\n# test/dummy/app/models/application_record.rb\n\nclass ApplicationRecord < ActiveRecord::Base\n  include Yaffle::ActsAsYaffle\n\n  self.abstract_class = true\nend\n\nCopy\n","\n# Running:\n\n.E\n\nError:\nActsAsYaffleTest#test_a_hickwalls_yaffle_text_field_should_be_last_squawk:\nNoMethodError: undefined method `yaffle_text_field' for #<Class:0x0055974ebbe9d8>\n\n\nbin/test /path/to/yaffle/test/acts_as_yaffle_test.rb:4\n\nE\n\nError:\nActsAsYaffleTest#test_a_wickwalls_yaffle_text_field_should_be_last_tweet:\nNoMethodError: undefined method `yaffle_text_field' for #<Class:0x0055974eb8cfc8>\n\n\nbin/test /path/to/yaffle/test/acts_as_yaffle_test.rb:8\n\n.\n\nFinished in 0.008263s, 484.0999 runs/s, 242.0500 assertions/s.\n\n4 runs, 2 assertions, 0 failures, 2 errors, 0 skips\n\n# Running:\n\n.E\n\nError:\nActsAsYaffleTest#test_a_hickwalls_yaffle_text_field_should_be_last_squawk:\nNoMethodError: undefined method `yaffle_text_field' for #<Class:0x0055974ebbe9d8>\n\n\nbin/test /path/to/yaffle/test/acts_as_yaffle_test.rb:4\n\nE\n\nError:\nActsAsYaffleTest#test_a_wickwalls_yaffle_text_field_should_be_last_tweet:\nNoMethodError: undefined method `yaffle_text_field' for #<Class:0x0055974eb8cfc8>\n\n\nbin/test /path/to/yaffle/test/acts_as_yaffle_test.rb:8\n\n.\n\nFinished in 0.008263s, 484.0999 runs/s, 242.0500 assertions/s.\n\n4 runs, 2 assertions, 0 failures, 2 errors, 0 skips\n\nCopy\n","\n# yaffle/lib/yaffle/acts_as_yaffle.rb\n\nmodule Yaffle\n  module ActsAsYaffle\n    extend ActiveSupport::Concern\n\n    class_methods do\n      def acts_as_yaffle(options = {})\n        cattr_accessor :yaffle_text_field, default: (options[:yaffle_text_field] || :last_squawk).to_s\n      end\n    end\n  end\nend\n\n# yaffle/lib/yaffle/acts_as_yaffle.rb\n\nmodule Yaffle\n  module ActsAsYaffle\n    extend ActiveSupport::Concern\n\n    class_methods do\n      def acts_as_yaffle(options = {})\n        cattr_accessor :yaffle_text_field, default: (options[:yaffle_text_field] || :last_squawk).to_s\n      end\n    end\n  end\nend\n\nCopy\n","\n# test/dummy/app/models/application_record.rb\n\nclass ApplicationRecord < ActiveRecord::Base\n  include Yaffle::ActsAsYaffle\n\n  self.abstract_class = true\nend\n\n# test/dummy/app/models/application_record.rb\n\nclass ApplicationRecord < ActiveRecord::Base\n  include Yaffle::ActsAsYaffle\n\n  self.abstract_class = true\nend\n\nCopy\n","\n  4 runs, 4 assertions, 0 failures, 0 errors, 0 skips\n\n  4 runs, 4 assertions, 0 failures, 0 errors, 0 skips\n\nCopy\n"],"body":"This plugin will expect that you've added a method to your model named last_squawk. However, the\nplugin users might have already defined a method on their model named last_squawk that they use\nfor something else. This plugin will allow the name to be changed by adding a class method called yaffle_text_field.To start out, write a failing test that shows the behavior you'd like:When you run bin/test, you should see the following:This tells us that we don't have the necessary models (Hickwall and Wickwall) that we are trying to test.\nWe can easily generate these models in our \"dummy\" Rails application by running the following commands from the\ntest/dummy directory:Now you can create the necessary database tables in your testing database by navigating to your dummy app\nand migrating the database. First, run:While you are here, change the Hickwall and Wickwall models so that they know that they are supposed to act\nlike yaffles.We will also add code to define the acts_as_yaffle method.You can then return to the root directory (cd ../..) of your plugin and rerun the tests using bin/test.Getting closer... Now we will implement the code of the acts_as_yaffle method to make the tests pass.When you run bin/test, you should see the tests all pass:","title":"4.1 Add a Class Method","anchor":"#add-a-class-method"},{"code":["\n# yaffle/test/acts_as_yaffle_test.rb\nrequire \"test_helper\"\n\nclass ActsAsYaffleTest < ActiveSupport::TestCase\n  def test_a_hickwalls_yaffle_text_field_should_be_last_squawk\n    assert_equal \"last_squawk\", Hickwall.yaffle_text_field\n  end\n\n  def test_a_wickwalls_yaffle_text_field_should_be_last_tweet\n    assert_equal \"last_tweet\", Wickwall.yaffle_text_field\n  end\n\n  def test_hickwalls_squawk_should_populate_last_squawk\n    hickwall = Hickwall.new\n    hickwall.squawk(\"Hello World\")\n    assert_equal \"squawk! Hello World\", hickwall.last_squawk\n  end\n\n  def test_wickwalls_squawk_should_populate_last_tweet\n    wickwall = Wickwall.new\n    wickwall.squawk(\"Hello World\")\n    assert_equal \"squawk! Hello World\", wickwall.last_tweet\n  end\nend\n\n# yaffle/test/acts_as_yaffle_test.rb\nrequire \"test_helper\"\n\nclass ActsAsYaffleTest < ActiveSupport::TestCase\n  def test_a_hickwalls_yaffle_text_field_should_be_last_squawk\n    assert_equal \"last_squawk\", Hickwall.yaffle_text_field\n  end\n\n  def test_a_wickwalls_yaffle_text_field_should_be_last_tweet\n    assert_equal \"last_tweet\", Wickwall.yaffle_text_field\n  end\n\n  def test_hickwalls_squawk_should_populate_last_squawk\n    hickwall = Hickwall.new\n    hickwall.squawk(\"Hello World\")\n    assert_equal \"squawk! Hello World\", hickwall.last_squawk\n  end\n\n  def test_wickwalls_squawk_should_populate_last_tweet\n    wickwall = Wickwall.new\n    wickwall.squawk(\"Hello World\")\n    assert_equal \"squawk! Hello World\", wickwall.last_tweet\n  end\nend\n\nCopy\n","\n# yaffle/lib/yaffle/acts_as_yaffle.rb\n\nmodule Yaffle\n  module ActsAsYaffle\n    extend ActiveSupport::Concern\n\n    included do\n      def squawk(string)\n        write_attribute(self.class.yaffle_text_field, string.to_squawk)\n      end\n    end\n\n    class_methods do\n      def acts_as_yaffle(options = {})\n        cattr_accessor :yaffle_text_field, default: (options[:yaffle_text_field] || :last_squawk).to_s\n      end\n    end\n  end\nend\n\n# yaffle/lib/yaffle/acts_as_yaffle.rb\n\nmodule Yaffle\n  module ActsAsYaffle\n    extend ActiveSupport::Concern\n\n    included do\n      def squawk(string)\n        write_attribute(self.class.yaffle_text_field, string.to_squawk)\n      end\n    end\n\n    class_methods do\n      def acts_as_yaffle(options = {})\n        cattr_accessor :yaffle_text_field, default: (options[:yaffle_text_field] || :last_squawk).to_s\n      end\n    end\n  end\nend\n\nCopy\n","\n# test/dummy/app/models/application_record.rb\n\nclass ApplicationRecord < ActiveRecord::Base\n  include Yaffle::ActsAsYaffle\n\n  self.abstract_class = true\nend\n\n# test/dummy/app/models/application_record.rb\n\nclass ApplicationRecord < ActiveRecord::Base\n  include Yaffle::ActsAsYaffle\n\n  self.abstract_class = true\nend\n\nCopy\n","\n  6 runs, 6 assertions, 0 failures, 0 errors, 0 skips\n\n  6 runs, 6 assertions, 0 failures, 0 errors, 0 skips\n\nCopy\n","\nsend(\"#{self.class.yaffle_text_field}=\", string.to_squawk)\n\nsend(\"#{self.class.yaffle_text_field}=\", string.to_squawk)\n\nCopy\n"],"body":"This plugin will add a method named 'squawk' to any Active Record object that calls acts_as_yaffle. The 'squawk'\nmethod will simply set the value of one of the fields in the database.To start out, write a failing test that shows the behavior you'd like:Run the test to make sure the last two tests fail with an error that contains \"NoMethodError: undefined method `squawk'\",\nthen update acts_as_yaffle.rb to look like this:Run bin/test one final time and you should see:","title":"4.2 Add an Instance Method","anchor":"#add-an-instance-method"},{"code":[],"body":"Generators can be included in your gem simply by creating them in a lib/generators directory of your plugin. More information about\nthe creation of generators can be found in the Generators Guide.","title":"5 Generators","anchor":"#generators"},{"title":"6 Publishing Your Gem","anchor":"#publishing-your-gem","code":["\ngem \"yaffle\", git: \"https://github.com/rails/yaffle.git\"\n\ngem \"yaffle\", git: \"https://github.com/rails/yaffle.git\"\n\nCopy\n","\n$ bundle exec rake -T\n\n$ bundle exec rake build\n# Build yaffle-0.1.0.gem into the pkg directory\n\n$ bundle exec rake install\n# Build and install yaffle-0.1.0.gem into system gems\n\n$ bundle exec rake release\n# Create tag v0.1.0 and build and push yaffle-0.1.0.gem to Rubygems\n\nbundle exec rake -T\nbundle exec rake build\nbundle exec rake install\nbundle exec rake release\n\nCopy\n"],"body":"Gem plugins currently in development can easily be shared from any Git repository. To share the Yaffle gem with others, simply\ncommit the code to a Git repository (like GitHub) and add a line to the Gemfile of the application in question:After running bundle install, your gem functionality will be available to the application.When the gem is ready to be shared as a formal release, it can be published to RubyGems.Alternatively, you can benefit from Bundler's Rake tasks. You can see a full list with the following:For more information about publishing gems to RubyGems, see: Publishing your gem."},{"title":"7 RDoc Documentation","anchor":"#rdoc-documentation","code":["\n$ bundle exec rake rdoc\n\nbundle exec rake rdoc\n\nCopy\n"],"body":"Once your plugin is stable and you are ready to deploy, do everyone else a favor and document it! Luckily, writing documentation for your plugin is easy.The first step is to update the README file with detailed information about how to use your plugin. A few key things to include are:Once your README is solid, go through and add rdoc comments to all of the methods that developers will use. It's also customary to add #:nodoc: comments to those parts of the code that are not included in the public API.Once your comments are good to go, navigate to your plugin directory and run:"},{"code":[],"body":"","title":"7.1 References","anchor":"#references"}]