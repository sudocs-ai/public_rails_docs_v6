[{"code":[],"body":"Rails offers four standard spots to place initialization code:","title":"1 Locations for Initialization Code","anchor":"#locations-for-initialization-code"},{"code":[],"body":"In the rare event that your application needs to run some code before Rails itself is loaded, put it above the call to require \"rails/all\" in config/application.rb.","title":"2 Running Code Before Rails","anchor":"#running-code-before-rails"},{"title":"3 Configuring Rails Components","anchor":"#configuring-rails-components","code":["\nconfig.time_zone = 'Central Time (US & Canada)'\n\nconfig.time_zone = 'Central Time (US & Canada)'\n\nCopy\n","\nconfig.active_record.schema_format = :ruby\n\nconfig.active_record.schema_format = :ruby\n\nCopy\n"],"body":"In general, the work of configuring Rails means configuring the components of Rails, as well as configuring Rails itself. The configuration file config/application.rb and environment-specific configuration files (such as config/environments/production.rb) allow you to specify the various settings that you want to pass down to all of the components.For example, you could add this setting to config/application.rb file:This is a setting for Rails itself. If you want to pass settings to individual Rails components, you can do so via the same config object in config/application.rb:Rails will use that particular setting to configure Active Record."},{"title":"3.1 Rails General Configuration","anchor":"#rails-general-configuration","code":[],"body":"These configuration methods are to be called on a Rails::Railtie object, such as a subclass of Rails::Engine or Rails::Application."},{"code":[],"body":"","title":"3.2 Configuring Assets","anchor":"#configuring-assets"},{"code":["\nconfig.generators do |g|\n  g.orm :active_record\n  g.test_framework :test_unit\nend\n\nconfig.generators do |g|\n  g.orm :active_record\n  g.test_framework :test_unit\nend\n\nCopy\n"],"body":"Rails allows you to alter what generators are used with the config.generators method. This method takes a block:The full set of methods that can be used in this block are as follows:","title":"3.3 Configuring Generators","anchor":"#configuring-generators"},{"code":["\nconfig.middleware.use Magical::Unicorns\n\nconfig.middleware.use Magical::Unicorns\n\nCopy\n","\nconfig.middleware.insert_before Rack::Head, Magical::Unicorns\n\nconfig.middleware.insert_before Rack::Head, Magical::Unicorns\n\nCopy\n","\nconfig.middleware.insert_before 0, Magical::Unicorns\n\nconfig.middleware.insert_before 0, Magical::Unicorns\n\nCopy\n","\nconfig.middleware.insert_after Rack::Head, Magical::Unicorns\n\nconfig.middleware.insert_after Rack::Head, Magical::Unicorns\n\nCopy\n","\nconfig.middleware.swap ActionController::Failsafe, Lifo::Failsafe\n\nconfig.middleware.swap ActionController::Failsafe, Lifo::Failsafe\n\nCopy\n","\nconfig.middleware.move_before ActionDispatch::Flash, Magical::Unicorns\n\nconfig.middleware.move_before ActionDispatch::Flash, Magical::Unicorns\n\nCopy\n","\nconfig.middleware.move_after ActionDispatch::Flash, Magical::Unicorns\n\nconfig.middleware.move_after ActionDispatch::Flash, Magical::Unicorns\n\nCopy\n","\nconfig.middleware.delete Rack::MethodOverride\n\nconfig.middleware.delete Rack::MethodOverride\n\nCopy\n"],"body":"Every Rails application comes with a standard set of middleware which it uses in this order in the development environment:Besides these usual middleware, you can add your own by using the config.middleware.use method:This will put the Magical::Unicorns middleware on the end of the stack. You can use insert_before if you wish to add a middleware before another.Or you can insert a middleware to exact position by using indexes. For example, if you want to insert Magical::Unicorns middleware on top of the stack, you can do it, like so:There's also insert_after which will insert a middleware after another:Middlewares can also be completely swapped out and replaced with others:Middlewares can be moved from one place to another:This will move the Magical::Unicorns middleware before\nActionDispatch::Flash. You can also move it after:They can also be removed from the stack completely:","title":"3.4 Configuring Middleware","anchor":"#configuring-middleware"},{"code":[],"body":"All these configuration options are delegated to the I18n library.","title":"3.5 Configuring i18n","anchor":"#configuring-i18n"},{"code":[],"body":"","title":"3.6 Configuring Active Model","anchor":"#configuring-active-model"},{"code":[],"body":"config.active_record includes a variety of configuration options:The MySQL adapter adds one additional configuration option:The PostgreSQL adapter adds one additional configuration option:The schema dumper adds two additional configuration options:","title":"3.7 Configuring Active Record","anchor":"#configuring-active-record"},{"code":[],"body":"config.action_controller includes a number of configuration settings:","title":"3.8 Configuring Action Controller","anchor":"#configuring-action-controller"},{"code":[],"body":"","title":"3.9 Configuring Action Dispatch","anchor":"#configuring-action-dispatch"},{"code":[],"body":"config.action_view includes a small number of configuration settings:","title":"3.10 Configuring Action View","anchor":"#configuring-action-view"},{"code":[],"body":"config.action_mailbox provides the following configuration options:","title":"3.11 Configuring Action Mailbox","anchor":"#configuring-action-mailbox"},{"code":[],"body":"There are a number of settings available on config.action_mailer:","title":"3.12 Configuring Action Mailer","anchor":"#configuring-action-mailer"},{"code":[],"body":"There are a few configuration options available in Active Support:","title":"3.13 Configuring Active Support","anchor":"#configuring-active-support"},{"code":[],"body":"config.active_job provides the following configuration options:","title":"3.14 Configuring Active Job","anchor":"#configuring-active-job"},{"code":[],"body":"You can find more detailed configuration options in the\nAction Cable Overview.","title":"3.15 Configuring Action Cable","anchor":"#configuring-action-cable"},{"title":"3.16 Configuring Active Storage","anchor":"#configuring-active-storage","code":[],"body":"config.active_storage provides the following configuration options:"},{"code":[],"body":"config.load_defaults sets new defaults up to and including the version passed. Such that passing, say, 6.0 also gets the new defaults from every version before it.","title":"3.17 Results of config.load_defaults","anchor":"#results-of-config-load-defaults"},{"title":"3.17.1 For '6.1', defaults from previous versions below and:","anchor":"#for-6-1-defaults-from-previous-versions-below-and","code":[],"body":""},{"code":[],"body":"","title":"3.17.2 For '6.0', defaults from previous versions below and:","anchor":"#for-6-0-defaults-from-previous-versions-below-and"},{"code":[],"body":"","title":"3.17.3 For '5.2', defaults from previous versions below and:","anchor":"#for-5-2-defaults-from-previous-versions-below-and"},{"code":[],"body":"","title":"3.17.4 For '5.1', defaults from previous versions below and:","anchor":"#for-5-1-defaults-from-previous-versions-below-and"},{"code":[],"body":"","title":"3.17.5 For '5.0', baseline defaults from below and:","anchor":"#for-5-0-baseline-defaults-from-below-and"},{"code":[],"body":"","title":"3.17.6 Baseline defaults:","anchor":"#baseline-defaults"},{"code":["\ndevelopment:\n  adapter: postgresql\n  database: blog_development\n  pool: 5\n\ndevelopment:\n  adapter: postgresql\n  database: blog_development\n  pool: 5\n\nCopy\n","\nENV['DATABASE_URL'] # => \"postgresql://localhost/blog_development?pool=5\"\n\nENV['DATABASE_URL'] # => \"postgresql://localhost/blog_development?pool=5\"\n\nCopy\n","\ndevelopment:\n  url: postgresql://localhost/blog_development?pool=5\n\ndevelopment:\n  url: postgresql://localhost/blog_development?pool=5\n\nCopy\n"],"body":"Just about every Rails application will interact with a database. You can connect to the database by setting an environment variable ENV['DATABASE_URL'] or by using a configuration file called config/database.yml.Using the config/database.yml file you can specify all the information needed to access your database:This will connect to the database named blog_development using the postgresql adapter. This same information can be stored in a URL and provided via an environment variable like this:The config/database.yml file contains sections for three different environments in which Rails can run by default:If you wish, you can manually specify a URL inside of your config/database.ymlThe config/database.yml file can contain ERB tags <%= %>. Anything in the tags will be evaluated as Ruby code. You can use this to pull out data from an environment variable or to perform calculations to generate the needed connection information.","title":"3.18 Configuring a Database","anchor":"#configuring-a-database"},{"title":"3.19 Connection Preference","anchor":"#connection-preference","code":["\n$ cat config/database.yml\n\n$ echo $DATABASE_URL\npostgresql://localhost/my_database\n\ncat config/database.yml\necho $DATABASE_URL\n\nCopy\n","\n$ cat config/database.yml\ndevelopment:\n  adapter: postgresql\n  database: my_database\n  host: localhost\n\n$ echo $DATABASE_URL\n\ncat config/database.yml\necho $DATABASE_URL\n\nCopy\n","\n$ cat config/database.yml\ndevelopment:\n  adapter: sqlite3\n  database: NOT_my_database\n  host: localhost\n\n$ echo $DATABASE_URL\npostgresql://localhost/my_database\n\n$ bin/rails runner 'puts ActiveRecord::Base.configurations'\n#<ActiveRecord::DatabaseConfigurations:0x00007fd50e209a28>\n\n$ bin/rails runner 'puts ActiveRecord::Base.configurations.inspect'\n#<ActiveRecord::DatabaseConfigurations:0x00007fc8eab02880 @configurations=[\n  #<ActiveRecord::DatabaseConfigurations::UrlConfig:0x00007fc8eab020b0\n    @env_name=\"development\", @spec_name=\"primary\",\n    @config={\"adapter\"=>\"postgresql\", \"database\"=>\"my_database\", \"host\"=>\"localhost\"}\n    @url=\"postgresql://localhost/my_database\">\n  ]\n\ncat config/database.yml\necho $DATABASE_URL\nbin/rails runner 'puts ActiveRecord::Base.configurations'\nbin/rails runner 'puts ActiveRecord::Base.configurations.inspect'\n\nCopy\n","\n$ cat config/database.yml\ndevelopment:\n  adapter: sqlite3\n  pool: 5\n\n$ echo $DATABASE_URL\npostgresql://localhost/my_database\n\n$ bin/rails runner 'puts ActiveRecord::Base.configurations'\n#<ActiveRecord::DatabaseConfigurations:0x00007fd50e209a28>\n\n$ bin/rails runner 'puts ActiveRecord::Base.configurations.inspect'\n#<ActiveRecord::DatabaseConfigurations:0x00007fc8eab02880 @configurations=[\n  #<ActiveRecord::DatabaseConfigurations::UrlConfig:0x00007fc8eab020b0\n    @env_name=\"development\", @spec_name=\"primary\",\n    @config={\"adapter\"=>\"postgresql\", \"database\"=>\"my_database\", \"host\"=>\"localhost\", \"pool\"=>5}\n    @url=\"postgresql://localhost/my_database\">\n  ]\n\ncat config/database.yml\necho $DATABASE_URL\nbin/rails runner 'puts ActiveRecord::Base.configurations'\nbin/rails runner 'puts ActiveRecord::Base.configurations.inspect'\n\nCopy\n","\n$ cat config/database.yml\ndevelopment:\n  url: sqlite3:NOT_my_database\n\n$ echo $DATABASE_URL\npostgresql://localhost/my_database\n\n$ bin/rails runner 'puts ActiveRecord::Base.configurations'\n#<ActiveRecord::DatabaseConfigurations:0x00007fd50e209a28>\n\n$ bin/rails runner 'puts ActiveRecord::Base.configurations.inspect'\n#<ActiveRecord::DatabaseConfigurations:0x00007fc8eab02880 @configurations=[\n  #<ActiveRecord::DatabaseConfigurations::UrlConfig:0x00007fc8eab020b0\n    @env_name=\"development\", @spec_name=\"primary\",\n    @config={\"adapter\"=>\"sqlite3\", \"database\"=>\"NOT_my_database\"}\n    @url=\"sqlite3:NOT_my_database\">\n  ]\n\ncat config/database.yml\necho $DATABASE_URL\nbin/rails runner 'puts ActiveRecord::Base.configurations'\nbin/rails runner 'puts ActiveRecord::Base.configurations.inspect'\n\nCopy\n","\n$ cat config/database.yml\nproduction:\n  url: <%= ENV['DATABASE_URL'] %>\n\ncat config/database.yml\n\nCopy\n"],"body":"Since there are two ways to configure your connection (using config/database.yml or using an environment variable) it is important to understand how they can interact.If you have an empty config/database.yml file but your ENV['DATABASE_URL'] is present, then Rails will connect to the database via your environment variable:If you have a config/database.yml but no ENV['DATABASE_URL'] then this file will be used to connect to your database:If you have both config/database.yml and ENV['DATABASE_URL'] set then Rails will merge the configuration together. To better understand this we must see some examples.When duplicate connection information is provided the environment variable will take precedence:Here the adapter, host, and database match the information in ENV['DATABASE_URL'].If non-duplicate information is provided you will get all unique values, environment variable still takes precedence in cases of any conflicts.Since pool is not in the ENV['DATABASE_URL'] provided connection information its information is merged in. Since adapter is duplicate, the ENV['DATABASE_URL'] connection information wins.The only way to explicitly not use the connection information in ENV['DATABASE_URL'] is to specify an explicit URL connection using the \"url\" sub key:Here the connection information in ENV['DATABASE_URL'] is ignored, note the different adapter and database name.Since it is possible to embed ERB in your config/database.yml it is best practice to explicitly show you are using the ENV['DATABASE_URL'] to connect to your database. This is especially useful in production since you should not commit secrets like your database password into your source control (such as Git).Now the behavior is clear, that we are only using the connection information in ENV['DATABASE_URL']."},{"title":"3.19.1 Configuring an SQLite3 Database","anchor":"#configuring-an-sqlite3-database","code":["\ndevelopment:\n  adapter: sqlite3\n  database: db/development.sqlite3\n  pool: 5\n  timeout: 5000\n\ndevelopment:\n  adapter: sqlite3\n  database: db/development.sqlite3\n  pool: 5\n  timeout: 5000\n\nCopy\n"],"body":"Rails comes with built-in support for SQLite3, which is a lightweight serverless database application. While a busy production environment may overload SQLite, it works well for development and testing. Rails defaults to using an SQLite database when creating a new project, but you can always change it later.Here's the section of the default configuration file (config/database.yml) with connection information for the development environment:"},{"title":"3.19.2 Configuring a MySQL or MariaDB Database","anchor":"#configuring-a-mysql-or-mariadb-database","code":["\ndevelopment:\n  adapter: mysql2\n  encoding: utf8mb4\n  database: blog_development\n  pool: 5\n  username: root\n  password:\n  socket: /tmp/mysql.sock\n\ndevelopment:\n  adapter: mysql2\n  encoding: utf8mb4\n  database: blog_development\n  pool: 5\n  username: root\n  password:\n  socket: /tmp/mysql.sock\n\nCopy\n","\nproduction:\n  adapter: mysql2\n  advisory_locks: false\n\nproduction:\n  adapter: mysql2\n  advisory_locks: false\n\nCopy\n"],"body":"If you choose to use MySQL or MariaDB instead of the shipped SQLite3 database, your config/database.yml will look a little different. Here's the development section:If your development database has a root user with an empty password, this configuration should work for you. Otherwise, change the username and password in the development section as appropriate.Advisory Locks are enabled by default on MySQL and are used to make database migrations concurrent safe. You can disable advisory locks by setting advisory_locks to false:"},{"code":["\ndevelopment:\n  adapter: postgresql\n  encoding: unicode\n  database: blog_development\n  pool: 5\n\ndevelopment:\n  adapter: postgresql\n  encoding: unicode\n  database: blog_development\n  pool: 5\n\nCopy\n","\nproduction:\n  adapter: postgresql\n  prepared_statements: false\n  advisory_locks: false\n\nproduction:\n  adapter: postgresql\n  prepared_statements: false\n  advisory_locks: false\n\nCopy\n","\nproduction:\n  adapter: postgresql\n  statement_limit: 200\n\nproduction:\n  adapter: postgresql\n  statement_limit: 200\n\nCopy\n"],"body":"If you choose to use PostgreSQL, your config/database.yml will be customized to use PostgreSQL databases:By default Active Record uses database features like prepared statements and advisory locks. You might need to disable those features if you're using an external connection pooler like PgBouncer:If enabled, Active Record will create up to 1000 prepared statements per database connection by default. To modify this behavior you can set statement_limit to a different value:The more prepared statements in use: the more memory your database will require. If your PostgreSQL database is hitting memory limits, try lowering statement_limit or disabling prepared statements.","title":"3.19.3 Configuring a PostgreSQL Database","anchor":"#configuring-a-postgresql-database"},{"title":"3.19.4 Configuring an SQLite3 Database for JRuby Platform","anchor":"#configuring-an-sqlite3-database-for-jruby-platform","code":["\ndevelopment:\n  adapter: jdbcsqlite3\n  database: db/development.sqlite3\n\ndevelopment:\n  adapter: jdbcsqlite3\n  database: db/development.sqlite3\n\nCopy\n"],"body":"If you choose to use SQLite3 and are using JRuby, your config/database.yml will look a little different. Here's the development section:"},{"code":["\ndevelopment:\n  adapter: jdbcmysql\n  database: blog_development\n  username: root\n  password:\n\ndevelopment:\n  adapter: jdbcmysql\n  database: blog_development\n  username: root\n  password:\n\nCopy\n"],"body":"If you choose to use MySQL or MariaDB and are using JRuby, your config/database.yml will look a little different. Here's the development section:","title":"3.19.5 Configuring a MySQL or MariaDB Database for JRuby Platform","anchor":"#configuring-a-mysql-or-mariadb-database-for-jruby-platform"},{"code":["\ndevelopment:\n  adapter: jdbcpostgresql\n  encoding: unicode\n  database: blog_development\n  username: blog\n  password:\n\ndevelopment:\n  adapter: jdbcpostgresql\n  encoding: unicode\n  database: blog_development\n  username: blog\n  password:\n\nCopy\n"],"body":"If you choose to use PostgreSQL and are using JRuby, your config/database.yml will look a little different. Here's the development section:Change the username and password in the development section as appropriate.","title":"3.19.6 Configuring a PostgreSQL Database for JRuby Platform","anchor":"#configuring-a-postgresql-database-for-jruby-platform"},{"title":"3.19.7 Configuring Metadata Storage","anchor":"#configuring-metadata-storage","code":["\ndevelopment:\n  adapter: postgresql\n  use_metadata_table: false\n\ndevelopment:\n  adapter: postgresql\n  use_metadata_table: false\n\nCopy\n"],"body":"By default Rails will store information about your Rails environment and schema\nin an internal table named ar_internal_metadata.To turn this off per connection, set use_metadata_table in your database\nconfiguration. This is useful when working with a shared database and/or\ndatabase user that cannot create tables."},{"code":[],"body":"By default Rails ships with three environments: \"development\", \"test\", and \"production\". While these are sufficient for most use cases, there are circumstances when you want more environments.Imagine you have a server which mirrors the production environment but is only used for testing. Such a server is commonly called a \"staging server\". To define an environment called \"staging\" for this server, just create a file called config/environments/staging.rb. Please use the contents of any existing file in config/environments as a starting point and make the necessary changes from there.That environment is no different than the default ones, start a server with bin/rails server -e staging, a console with bin/rails console -e staging, Rails.env.staging? works, etc.","title":"3.20 Creating Rails Environments","anchor":"#creating-rails-environments"},{"title":"3.21 Deploy to a Subdirectory (relative URL root)","anchor":"#deploy-to-a-subdirectory-relative-url-root","code":["\nconfig.relative_url_root = \"/app1\"\n\nconfig.relative_url_root = \"/app1\"\n\nCopy\n"],"body":"By default Rails expects that your application is running at the root\n(e.g. /). This section explains how to run your application inside a directory.Let's assume we want to deploy our application to \"/app1\". Rails needs to know\nthis directory to generate the appropriate routes:alternatively you can set the RAILS_RELATIVE_URL_ROOT environment\nvariable.Rails will now prepend \"/app1\" when generating links."},{"title":"3.21.1 Using Passenger","anchor":"#using-passenger","code":[],"body":"Passenger makes it easy to run your application in a subdirectory. You can find the relevant configuration in the Passenger manual."},{"title":"3.21.2 Using a Reverse Proxy","anchor":"#using-a-reverse-proxy","code":["\nupstream application_server {\n  server 0.0.0.0:8080;\n}\n\nserver {\n  listen 80;\n  server_name localhost;\n\n  root /root/path/to/your_app/public;\n\n  try_files $uri/index.html $uri.html @app;\n\n  location @app {\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n    proxy_redirect off;\n    proxy_pass http://application_server;\n  }\n\n  # some other configuration\n}\n\nupstream application_server {\n  server 0.0.0.0:8080;\n}\n\nserver {\n  listen 80;\n  server_name localhost;\n\n  root /root/path/to/your_app/public;\n\n  try_files $uri/index.html $uri.html @app;\n\n  location @app {\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n    proxy_redirect off;\n    proxy_pass http://application_server;\n  }\n\n  # some other configuration\n}\n\nCopy\n"],"body":"Deploying your application using a reverse proxy has definite advantages over traditional deploys. They allow you to have more control over your server by layering the components required by your application.Many modern web servers can be used as a proxy server to balance third-party elements such as caching servers or application servers.One such application server you can use is Unicorn to run behind a reverse proxy.In this case, you would need to configure the proxy server (NGINX, Apache, etc) to accept connections from your application server (Unicorn). By default Unicorn will listen for TCP connections on port 8080, but you can change the port or configure it to use sockets instead.You can find more information in the Unicorn readme and understand the philosophy behind it.Once you've configured the application server, you must proxy requests to it by configuring your web server appropriately. For example your NGINX config may include:Be sure to read the NGINX documentation for the most up-to-date information."},{"title":"4 Rails Environment Settings","anchor":"#rails-environment-settings","code":[],"body":"Some parts of Rails can also be configured externally by supplying environment variables. The following environment variables are recognized by various parts of Rails:"},{"code":[],"body":"After loading the framework and any gems in your application, Rails turns to\nloading initializers. An initializer is any Ruby file stored under\nconfig/initializers in your application. You can use initializers to hold\nconfiguration settings that should be made after all of the frameworks and gems\nare loaded, such as options to configure settings for these parts.The files in config/initializers (and any subdirectories of\nconfig/initializers) are sorted and loaded one by one as part of\nthe load_config_initializers initializer.If an initializer has code that relies on code in another initializer, you can\ncombine them into a single initializer instead. This makes the dependencies more\nexplicit, and can help surface new concepts within your application. Rails also\nsupports numbering of initializer file names, but this can lead to file name\nchurn. Explicitly loading initializers with require is not recommended, since\nit will cause the initializer to get loaded twice.","title":"5 Using Initializer Files","anchor":"#using-initializer-files"},{"title":"6 Initialization events","anchor":"#initialization-events","code":["\nmodule YourApp\n  class Application < Rails::Application\n    config.before_initialize do\n      # initialization code goes here\n    end\n  end\nend\n\nmodule YourApp\n  class Application < Rails::Application\n    config.before_initialize do\n      # initialization code goes here\n    end\n  end\nend\n\nCopy\n","\nRails.application.config.before_initialize do\n  # initialization code goes here\nend\n\nRails.application.config.before_initialize do\n  # initialization code goes here\nend\n\nCopy\n"],"body":"Rails has 5 initialization events which can be hooked into (listed in the order that they are run):To define an event for these hooks, use the block syntax within a Rails::Application, Rails::Railtie or Rails::Engine subclass:Alternatively, you can also do it through the config method on the Rails.application object:"},{"title":"6.1 Rails::Railtie#initializer","anchor":"#rails-railtie-initializer","code":["\ninitializer \"action_controller.set_helpers_path\" do |app|\n  ActionController::Helpers.helpers_path = app.helpers_paths\nend\n\ninitializer \"action_controller.set_helpers_path\" do |app|\n  ActionController::Helpers.helpers_path = app.helpers_paths\nend\n\nCopy\n"],"body":"Rails has several initializers that run on startup that are all defined by using the initializer method from Rails::Railtie. Here's an example of the set_helpers_path initializer from Action Controller:The initializer method takes three arguments with the first being the name for the initializer and the second being an options hash (not shown here) and the third being a block. The :before key in the options hash can be specified to specify which initializer this new initializer must run before, and the :after key will specify which initializer to run this initializer after.Initializers defined using the initializer method will be run in the order they are defined in, with the exception of ones that use the :before or :after methods.The block argument of the initializer method is the instance of the application itself, and so we can access the configuration on it by using the config method as done in the example.Because Rails::Application inherits from Rails::Railtie (indirectly), you can use the initializer method in config/application.rb to define initializers for the application."},{"title":"6.2 Initializers","anchor":"#initializers","code":[],"body":"Below is a comprehensive list of all the initializers found in Rails in the order that they are defined (and therefore run in, unless otherwise stated)."},{"code":["\ndevelopment:\n  adapter: sqlite3\n  database: db/development.sqlite3\n  pool: 5\n  timeout: 5000\n\ndevelopment:\n  adapter: sqlite3\n  database: db/development.sqlite3\n  pool: 5\n  timeout: 5000\n\nCopy\n","\nActiveRecord::ConnectionTimeoutError - could not obtain a database connection within 5.000 seconds (waited 5.000 seconds)\n\nActiveRecord::ConnectionTimeoutError - could not obtain a database connection within 5.000 seconds (waited 5.000 seconds)\n\nCopy\n"],"body":"Active Record database connections are managed by ActiveRecord::ConnectionAdapters::ConnectionPool which ensures that a connection pool synchronizes the amount of thread access to a limited number of database connections. This limit defaults to 5 and can be configured in database.yml.Since the connection pooling is handled inside of Active Record by default, all application servers (Thin, Puma, Unicorn, etc.) should behave the same. The database connection pool is initially empty. As demand for connections increases it will create them until it reaches the connection pool limit.Any one request will check out a connection the first time it requires access to the database. At the end of the request it will check the connection back in. This means that the additional connection slot will be available again for the next request in the queue.If you try to use more connections than are available, Active Record will block\nyou and wait for a connection from the pool. If it cannot get a connection, a\ntimeout error similar to that given below will be thrown.If you get the above error, you might want to increase the size of the\nconnection pool by incrementing the pool option in database.yml","title":"7 Database pooling","anchor":"#database-pooling"},{"title":"8 Custom configuration","anchor":"#custom-configuration","code":["\nconfig.x.payment_processing.schedule = :daily\nconfig.x.payment_processing.retries  = 3\nconfig.super_debugger = true\n\nconfig.x.payment_processing.schedule = :daily\nconfig.x.payment_processing.retries  = 3\nconfig.super_debugger = true\n\nCopy\n","\nRails.configuration.x.payment_processing.schedule # => :daily\nRails.configuration.x.payment_processing.retries  # => 3\nRails.configuration.x.payment_processing.not_set  # => nil\nRails.configuration.super_debugger                # => true\n\nRails.configuration.x.payment_processing.schedule # => :daily\nRails.configuration.x.payment_processing.retries  # => 3\nRails.configuration.x.payment_processing.not_set  # => nil\nRails.configuration.super_debugger                # => true\n\nCopy\n","\n# config/payment.yml:\nproduction:\n  environment: production\n  merchant_id: production_merchant_id\n  public_key:  production_public_key\n  private_key: production_private_key\n\ndevelopment:\n  environment: sandbox\n  merchant_id: development_merchant_id\n  public_key:  development_public_key\n  private_key: development_private_key\n\n# config/payment.yml:\nproduction:\n  environment: production\n  merchant_id: production_merchant_id\n  public_key:  production_public_key\n  private_key: production_private_key\n\ndevelopment:\n  environment: sandbox\n  merchant_id: development_merchant_id\n  public_key:  development_public_key\n  private_key: development_private_key\n\nCopy\n","\n# config/application.rb\nmodule MyApp\n  class Application < Rails::Application\n    config.payment = config_for(:payment)\n  end\nend\n\n# config/application.rb\nmodule MyApp\n  class Application < Rails::Application\n    config.payment = config_for(:payment)\n  end\nend\n\nCopy\n","\nRails.configuration.payment['merchant_id'] # => production_merchant_id or development_merchant_id\n\nRails.configuration.payment['merchant_id'] # => production_merchant_id or development_merchant_id\n\nCopy\n","\n# config/example.yml\nshared:\n  foo:\n    bar:\n      baz: 1\n\ndevelopment:\n  foo:\n    bar:\n      qux: 2\n\n# config/example.yml\nshared:\n  foo:\n    bar:\n      baz: 1\n\ndevelopment:\n  foo:\n    bar:\n      qux: 2\n\nCopy\n","\n# development environment\nRails.application.config_for(:example)[:foo][:bar] #=> { baz: 1, qux: 2 }\n\n# development environment\nRails.application.config_for(:example)[:foo][:bar] #=> { baz: 1, qux: 2 }\n\nCopy\n"],"body":"You can configure your own code through the Rails configuration object with\ncustom configuration under either the config.x namespace, or config directly.\nThe key difference between these two is that you should be using config.x if you\nare defining nested configuration (ex: config.x.nested.hi), and just\nconfig for single level configuration (ex: config.hello).These configuration points are then available through the configuration object:You can also use Rails::Application.config_for to load whole configuration files:Rails::Application.config_for supports a shared configuration to group common\nconfigurations. The shared configuration will be merged into the environment\nconfiguration."},{"code":["\nUser-agent: *\nDisallow: /\n\nUser-agent: *\nDisallow: /\n\nCopy\n"],"body":"Sometimes, you may want to prevent some pages of your application to be visible\non search sites like Google, Bing, Yahoo, or Duck Duck Go. The robots that index\nthese sites will first analyze the http://your-site.com/robots.txt file to\nknow which pages it is allowed to index.Rails creates this file for you inside the /public folder. By default, it allows\nsearch engines to index all pages of your application. If you want to block\nindexing on all pages of your application, use this:To block just specific pages, it's necessary to use a more complex syntax. Learn\nit on the official documentation.","title":"9 Search Engines Indexing","anchor":"#search-engines-indexing"},{"title":"10 Evented File System Monitor","anchor":"#evented-file-system-monitor","code":["\ngroup :development do\n  gem 'listen', '~> 3.3'\nend\n\ngroup :development do\n  gem 'listen', '~> 3.3'\nend\n\nCopy\n"],"body":"If the listen gem is loaded Rails uses an\nevented file system monitor to detect changes when config.cache_classes is\nfalse:Otherwise, in every request Rails walks the application tree to check if\nanything has changed.On Linux and macOS no additional gems are needed, but some are required\nfor *BSD and\nfor Windows.Note that some setups are unsupported."}]