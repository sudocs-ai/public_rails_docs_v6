[{"code":[],"body":"If you're upgrading an existing application, it's a great idea to have good test\ncoverage before going in. You should also first upgrade to Rails 5.0 in case you\nhaven't and make sure your application still runs as expected before attempting\nan update to Rails 5.1. A list of things to watch out for when upgrading is\navailable in the\nUpgrading Ruby on Rails\nguide.","title":"1 Upgrading to Rails 5.1","anchor":"#upgrading-to-rails-5-1"},{"title":"2 Major Features","anchor":"#major-features","code":[],"body":""},{"title":"2.1 Yarn Support","anchor":"#yarn-support","code":[],"body":"Pull RequestRails 5.1 allows managing JavaScript dependencies\nfrom npm via Yarn. This will make it easy to use libraries like React, VueJS\nor any other library from npm world. The Yarn support is integrated with\nthe asset pipeline so that all dependencies will work seamlessly with the\nRails 5.1 app."},{"title":"2.2 Optional Webpack support","anchor":"#optional-webpack-support","code":[],"body":"Pull RequestRails apps can integrate with Webpack, a JavaScript\nasset bundler, more easily using the new Webpacker\ngem. Use the --webpack flag when generating new applications to enable Webpack\nintegration.This is fully compatible with the asset pipeline, which you can continue to use for\nimages, fonts, sounds, and other assets. You can even have some JavaScript code\nmanaged by the asset pipeline, and other code processed via Webpack. All of this is managed\nby Yarn, which is enabled by default."},{"title":"2.3 jQuery no longer a default dependency","anchor":"#jquery-no-longer-a-default-dependency","code":[],"body":"Pull RequestjQuery was required by default in earlier versions of Rails to provide features\nlike data-remote, data-confirm and other parts of Rails' Unobtrusive JavaScript\nofferings. It is no longer required, as the UJS has been rewritten to use plain,\nvanilla JavaScript. This code now ships inside of Action View as\nrails-ujs.You can still use jQuery if needed, but it is no longer required by default."},{"title":"2.4 System tests","anchor":"#system-tests","code":[],"body":"Pull RequestRails 5.1 has baked-in support for writing Capybara tests, in the form of\nSystem tests. You no longer need to worry about configuring Capybara and\ndatabase cleaning strategies for such tests. Rails 5.1 provides a wrapper\nfor running tests in Chrome with additional features such as failure\nscreenshots."},{"title":"2.5 Encrypted secrets","anchor":"#encrypted-secrets","code":[],"body":"Pull RequestRails now allows management of application secrets in a secure way,\ninspired by the sekrets gem.Run bin/rails secrets:setup to set up a new encrypted secrets file. This will\nalso generate a master key, which must be stored outside of the repository. The\nsecrets themselves can then be safely checked into the revision control system,\nin an encrypted form.Secrets will be decrypted in production, using a key stored either in the\nRAILS_MASTER_KEY environment variable, or in a key file."},{"title":"2.6 Parameterized mailers","anchor":"#parameterized-mailers","code":["\nclass InvitationsMailer < ApplicationMailer\n  before_action { @inviter, @invitee = params[:inviter], params[:invitee] }\n  before_action { @account = params[:inviter].account }\n\n  def account_invitation\n    mail subject: \"#{@inviter.name} invited you to their Basecamp (#{@account.name})\"\n  end\nend\n\nclass InvitationsMailer < ApplicationMailer\n  before_action { @inviter, @invitee = params[:inviter], params[:invitee] }\n  before_action { @account = params[:inviter].account }\n\n  def account_invitation\n    mail subject: \"#{@inviter.name} invited you to their Basecamp (#{@account.name})\"\n  end\nend\n\nCopy\n","\nInvitationsMailer.with(inviter: person_a, invitee: person_b)\n                 .account_invitation.deliver_later\n\nInvitationsMailer.with(inviter: person_a, invitee: person_b)\n                 .account_invitation.deliver_later\n\nCopy\n"],"body":"Pull RequestAllows specifying common parameters used for all methods in a mailer class in\norder to share instance variables, headers, and other common setup."},{"code":["\nresource :basket\n\nresolve(\"Basket\") { [:basket] }\n\nresource :basket\n\nresolve(\"Basket\") { [:basket] }\n\nCopy\n","\n<%= form_for @basket do |form| %>\n  <!-- basket form -->\n<% end %>\n\n<%= form_for @basket do |form| %>\n  <!-- basket form -->\n<% end %>\n\nCopy\n","\ndirect(:homepage) { \"http://www.rubyonrails.org\" }\n\nhomepage_url # => \"http://www.rubyonrails.org\"\n\ndirect(:homepage) { \"http://www.rubyonrails.org\" }\n\nhomepage_url # => \"http://www.rubyonrails.org\"\n\nCopy\n","\ndirect :commentable do |model|\n  [ model, anchor: model.dom_id ]\nend\n\ndirect :main do\n  { controller: 'pages', action: 'index', subdomain: 'www' }\nend\n\ndirect :commentable do |model|\n  [ model, anchor: model.dom_id ]\nend\n\ndirect :main do\n  { controller: 'pages', action: 'index', subdomain: 'www' }\nend\n\nCopy\n"],"body":"Pull RequestRails 5.1 adds two new methods, resolve and direct, to the routing\nDSL. The resolve method allows customizing polymorphic mapping of models.This will generate the singular URL /basket instead of the usual /baskets/:id.The direct method allows creation of custom URL helpers.The return value of the block must be a valid argument for the url_for\nmethod. So, you can pass a valid string URL, Hash, Array, an\nActive Model instance, or an Active Model class.","title":"2.7 Direct & resolved routes","anchor":"#direct-resolved-routes"},{"code":["\n<%= form_with url: posts_path do |form| %>\n  <%= form.text_field :title %>\n<% end %>\n\n<%# Will generate %>\n\n<form action=\"/posts\" method=\"post\" data-remote=\"true\">\n  <input type=\"text\" name=\"title\">\n</form>\n\n<%= form_with url: posts_path do |form| %>\n  <%= form.text_field :title %>\n<% end %>\n\n<%# Will generate %>\n\n<form action=\"/posts\" method=\"post\" data-remote=\"true\">\n  <input type=\"text\" name=\"title\">\n</form>\n\nCopy\n","\n<%= form_with scope: :post, url: posts_path do |form| %>\n  <%= form.text_field :title %>\n<% end %>\n\n<%# Will generate %>\n\n<form action=\"/posts\" method=\"post\" data-remote=\"true\">\n  <input type=\"text\" name=\"post[title]\">\n</form>\n\n<%= form_with scope: :post, url: posts_path do |form| %>\n  <%= form.text_field :title %>\n<% end %>\n\n<%# Will generate %>\n\n<form action=\"/posts\" method=\"post\" data-remote=\"true\">\n  <input type=\"text\" name=\"post[title]\">\n</form>\n\nCopy\n","\n<%= form_with model: Post.new do |form| %>\n  <%= form.text_field :title %>\n<% end %>\n\n<%# Will generate %>\n\n<form action=\"/posts\" method=\"post\" data-remote=\"true\">\n  <input type=\"text\" name=\"post[title]\">\n</form>\n\n<%= form_with model: Post.new do |form| %>\n  <%= form.text_field :title %>\n<% end %>\n\n<%# Will generate %>\n\n<form action=\"/posts\" method=\"post\" data-remote=\"true\">\n  <input type=\"text\" name=\"post[title]\">\n</form>\n\nCopy\n","\n<%= form_with model: Post.first do |form| %>\n  <%= form.text_field :title %>\n<% end %>\n\n<%# Will generate %>\n\n<form action=\"/posts/1\" method=\"post\" data-remote=\"true\">\n  <input type=\"hidden\" name=\"_method\" value=\"patch\">\n  <input type=\"text\" name=\"post[title]\" value=\"<the title of the post>\">\n</form>\n\n<%= form_with model: Post.first do |form| %>\n  <%= form.text_field :title %>\n<% end %>\n\n<%# Will generate %>\n\n<form action=\"/posts/1\" method=\"post\" data-remote=\"true\">\n  <input type=\"hidden\" name=\"_method\" value=\"patch\">\n  <input type=\"text\" name=\"post[title]\" value=\"<the title of the post>\">\n</form>\n\nCopy\n"],"body":"Pull RequestBefore Rails 5.1, there were two interfaces for handling HTML forms:\nform_for for model instances and form_tag for custom URLs.Rails 5.1 combines both of these interfaces with form_with, and\ncan generate form tags based on URLs, scopes, or models.Using just a URL:Adding a scope prefixes the input field names:Using a model infers both the URL and scope:An existing model makes an update form and fills out field values:","title":"2.8 Unification of form_for and form_tag into form_with","anchor":"#unification-of-form-for-and-form-tag-into-form-with"},{"code":[],"body":"The following changes may require immediate action upon upgrade.","title":"3 Incompatibilities","anchor":"#incompatibilities"},{"title":"3.1 Transactional tests with multiple connections","anchor":"#transactional-tests-with-multiple-connections","code":[],"body":"Transactional tests now wrap all Active Record connections in database\ntransactions.When a test spawns additional threads, and those threads obtain database\nconnections, those connections are now handled specially:The threads will share a single connection, which is inside the managed\ntransaction. This ensures all threads see the database in the same\nstate, ignoring the outermost transaction. Previously, such additional\nconnections were unable to see the fixture rows, for example.When a thread enters a nested transaction, it will temporarily obtain\nexclusive use of the connection, to maintain isolation.If your tests currently rely on obtaining a separate,\noutside-of-transaction, connection in a spawned thread, you'll need to\nswitch to more explicit connection management.If your tests spawn threads and those threads interact while also using\nexplicit database transactions, this change may introduce a deadlock.The easy way to opt out of this new behavior is to disable transactional\ntests on any test cases it affects."},{"title":"4 Railties","anchor":"#railties","code":[],"body":"Please refer to the Changelog for detailed changes."},{"title":"4.1 Removals","anchor":"#railties-removals","code":[],"body":""},{"code":[],"body":"","title":"4.2 Notable changes","anchor":"#railties-notable-changes"},{"code":[],"body":"Please refer to the Changelog for detailed changes.","title":"5 Action Cable","anchor":"#action-cable"},{"title":"5.1 Notable changes","anchor":"#action-cable-notable-changes","code":[],"body":""},{"code":[],"body":"Please refer to the Changelog for detailed changes.","title":"6 Action Pack","anchor":"#action-pack"},{"title":"6.1 Removals","anchor":"#action-pack-removals","code":[],"body":""},{"code":[],"body":"","title":"6.2 Deprecations","anchor":"#action-pack-deprecations"},{"code":[],"body":"","title":"6.3 Notable changes","anchor":"#action-pack-notable-changes"},{"code":[],"body":"Please refer to the Changelog for detailed changes.","title":"7 Action View","anchor":"#action-view"},{"title":"7.1 Removals","anchor":"#action-view-removals","code":[],"body":""},{"code":[],"body":"","title":"7.2 Deprecations","anchor":"#action-view-deprecations"},{"code":[],"body":"","title":"7.3 Notable changes","anchor":"#action-view-notable-changes"},{"code":[],"body":"Please refer to the Changelog for detailed changes.","title":"8 Action Mailer","anchor":"#action-mailer"},{"title":"8.1 Notable changes","anchor":"#action-mailer-notable-changes","code":[],"body":""},{"code":[],"body":"Please refer to the Changelog for detailed changes.","title":"9 Active Record","anchor":"#active-record"},{"title":"9.1 Removals","anchor":"#active-record-removals","code":[],"body":""},{"code":[],"body":"","title":"9.2 Deprecations","anchor":"#active-record-deprecations"},{"code":[],"body":"","title":"9.3 Notable changes","anchor":"#active-record-notable-changes"},{"code":[],"body":"Please refer to the Changelog for detailed changes.","title":"10 Active Model","anchor":"#active-model"},{"title":"10.1 Removals","anchor":"#active-model-removals","code":[],"body":""},{"code":[],"body":"","title":"10.2 Notable changes","anchor":"#active-model-notable-changes"},{"code":[],"body":"Please refer to the Changelog for detailed changes.","title":"11 Active Job","anchor":"#active-job"},{"title":"11.1 Removals","anchor":"#active-job-removals","code":[],"body":""},{"code":[],"body":"","title":"11.2 Notable changes","anchor":"#active-job-notable-changes"},{"code":[],"body":"Please refer to the Changelog for detailed changes.","title":"12 Active Support","anchor":"#active-support"},{"title":"12.1 Removals","anchor":"#removals","code":[],"body":""},{"code":[],"body":"","title":"12.2 Deprecations","anchor":"#active-support-deprecations"},{"code":[],"body":"","title":"12.3 Notable changes","anchor":"#notable-changes"},{"code":[],"body":"See the\nfull list of contributors to Rails for\nthe many people who spent many hours making Rails, the stable and robust\nframework it is. Kudos to all of them.","title":"13 Credits","anchor":"#credits"}]