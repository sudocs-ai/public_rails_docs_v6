[{"code":["\n$ bundle exec rake rdoc\n\nbundle exec rake rdoc\n\nCopy\n"],"body":"The Rails API documentation is generated with\nRDoc. To generate it, make sure you are\nin the rails root directory, run bundle install and execute:Resulting HTML files can be found in the ./doc/rdoc directory.Please consult the RDoc documentation for help with the\nmarkup,\nand also take into account these additional\ndirectives.","title":"1 RDoc","anchor":"#rdoc"},{"title":"2 Wording","anchor":"#wording","code":["\n# Declares an attribute reader backed by an internally-named\n# instance variable.\ndef attr_internal_reader(*attrs)\n  # ...\nend\n\n# Declares an attribute reader backed by an internally-named\n# instance variable.\ndef attr_internal_reader(*attrs)\n  # ...\nend\n\nCopy\n","\nIf you need to use `return` statements in your callbacks, it is recommended that you explicitly define them as methods.\n\nIf you need to use `return` statements in your callbacks, it is recommended that you explicitly define them as methods.\n\nCopy\n","\nIf `return` is needed it is recommended to explicitly define a method.\n\nIf `return` is needed it is recommended to explicitly define a method.\n\nCopy\n"],"body":"Write simple, declarative sentences. Brevity is a plus: get to the point.Write in present tense: \"Returns a hash that...\", rather than \"Returned a hash that...\" or \"Will return a hash that...\".Start comments in upper case. Follow regular punctuation rules:Communicate to the reader the current way of doing things, both explicitly and implicitly. Use the idioms recommended in edge. Reorder sections to emphasize favored approaches if needed, etc. The documentation should be a model for best practices and canonical, modern Rails usage.Documentation has to be concise but comprehensive. Explore and document edge cases. What happens if a module is anonymous? What if a collection is empty? What if an argument is nil?The proper names of Rails components have a space in between the words, like \"Active Support\". ActiveRecord is a Ruby module, whereas Active Record is an ORM. All Rails documentation should consistently refer to Rails components by their proper name, and if in your next blog post or presentation you remember this tidbit and take it into account that'd be phenomenal.Spell names correctly: Arel, minitest, RSpec, HTML, MySQL, JavaScript, ERB. When in doubt, please have a look at some authoritative source like their official documentation.Use the article \"an\" for \"SQL\", as in \"an SQL statement\". Also \"an SQLite database\".Prefer wordings that avoid \"you\"s and \"your\"s. For example, instead ofuse this style:That said, when using pronouns in reference to a hypothetical person, such as \"a\nuser with a session cookie\", gender neutral pronouns (they/their/them) should be\nused. Instead of:"},{"code":[],"body":"Please use American English (color, center, modularize, etc). See a list of American and British English spelling differences here.","title":"3 English","anchor":"#english"},{"title":"4 Oxford Comma","anchor":"#oxford-comma","code":[],"body":"Please use the Oxford comma\n(\"red, white, and blue\", instead of \"red, white and blue\")."},{"title":"5 Example Code","anchor":"#example-code","code":["\n# Converts a collection of elements into a formatted string by\n# calling +to_s+ on all elements and joining them.\n#\n#   Blog.all.to_formatted_s # => \"First PostSecond PostThird Post\"\n\n# Converts a collection of elements into a formatted string by\n# calling +to_s+ on all elements and joining them.\n#\n#   Blog.all.to_formatted_s # => \"First PostSecond PostThird Post\"\n\nCopy\n","\n# ==== Examples\n#\n#   Person.exists?(5)\n#   Person.exists?('5')\n#   Person.exists?(name: \"David\")\n#   Person.exists?(['name LIKE ?', \"%#{query}%\"])\n\n# ==== Examples\n#\n#   Person.exists?(5)\n#   Person.exists?('5')\n#   Person.exists?(name: \"David\")\n#   Person.exists?(['name LIKE ?', \"%#{query}%\"])\n\nCopy\n","\n# For checking if an integer is even or odd.\n#\n#   1.even? # => false\n#   1.odd?  # => true\n#   2.even? # => true\n#   2.odd?  # => false\n\n# For checking if an integer is even or odd.\n#\n#   1.even? # => false\n#   1.odd?  # => true\n#   2.even? # => true\n#   2.odd?  # => false\n\nCopy\n","\n#   label(:article, :title)\n#   # => <label for=\"article_title\">Title</label>\n#\n#   label(:article, :title, \"A short title\")\n#   # => <label for=\"article_title\">A short title</label>\n#\n#   label(:article, :title, \"A short title\", class: \"title_label\")\n#   # => <label for=\"article_title\" class=\"title_label\">A short title</label>\n\n#   label(:article, :title)\n#   # => <label for=\"article_title\">Title</label>\n#\n#   label(:article, :title, \"A short title\")\n#   # => <label for=\"article_title\">A short title</label>\n#\n#   label(:article, :title, \"A short title\", class: \"title_label\")\n#   # => <label for=\"article_title\" class=\"title_label\">A short title</label>\n\nCopy\n","\n#   polymorphic_url(record)  # same as comment_url(record)\n\n#   polymorphic_url(record)  # same as comment_url(record)\n\nCopy\n"],"body":"Choose meaningful examples that depict and cover the basics as well as interesting points or gotchas.Use two spaces to indent chunks of code--that is, for markup purposes, two spaces with respect to the left margin. The examples themselves should use Rails coding conventions.Short docs do not need an explicit \"Examples\" label to introduce snippets; they just follow paragraphs:On the other hand, big chunks of structured documentation may have a separate \"Examples\" section:The results of expressions follow them and are introduced by \"# => \", vertically aligned:If a line is too long, the comment may be placed on the next line:Avoid using any printing methods like puts or p for that purpose.On the other hand, regular comments do not use an arrow:"},{"code":["\n`config.action_mailer.perform_deliveries` specifies whether mail will actually be delivered and is true by default\n\n`config.action_mailer.perform_deliveries` specifies whether mail will actually be delivered and is true by default\n\nCopy\n","\n# Returns true if the collection is empty.\n#\n# If the collection has been loaded\n# it is equivalent to <tt>collection.size.zero?</tt>. If the\n# collection has not been loaded, it is equivalent to\n# <tt>!collection.exists?</tt>. If the collection has not already been\n# loaded and you are going to fetch the records anyway it is better to\n# check <tt>collection.length.zero?</tt>.\ndef empty?\n  if loaded?\n    size.zero?\n  else\n    @target.blank? && !scope.exists?\n  end\nend\n\n# Returns true if the collection is empty.\n#\n# If the collection has been loaded\n# it is equivalent to <tt>collection.size.zero?</tt>. If the\n# collection has not been loaded, it is equivalent to\n# <tt>!collection.exists?</tt>. If the collection has not already been\n# loaded and you are going to fetch the records anyway it is better to\n# check <tt>collection.length.zero?</tt>.\ndef empty?\n  if loaded?\n    size.zero?\n  else\n    @target.blank? && !scope.exists?\n  end\nend\n\nCopy\n"],"body":"In predicates and flags prefer documenting boolean semantics over exact values.When \"true\" or \"false\" are used as defined in Ruby use regular font. The\nsingletons true and false need fixed-width font. Please avoid terms like\n\"truthy\", Ruby defines what is true and false in the language, and thus those\nwords have a technical meaning and need no substitutes.As a rule of thumb, do not document singletons unless absolutely necessary. That\nprevents artificial constructs like !! or ternaries, allows refactors, and the\ncode does not need to rely on the exact values returned by methods being called\nin the implementation.For example:the user does not need to know which is the actual default value of the flag,\nand so we only document its boolean semantics.An example with a predicate:The API is careful not to commit to any particular value, the method has\npredicate semantics, that's enough.","title":"6 Booleans","anchor":"#booleans"},{"title":"7 File Names","anchor":"#file-names","code":["\nconfig/routes.rb            # YES\nroutes.rb                   # NO\nRAILS_ROOT/config/routes.rb # NO\n\nconfig/routes.rb            # YES\nroutes.rb                   # NO\nRAILS_ROOT/config/routes.rb # NO\n\nCopy\n"],"body":"As a rule of thumb, use filenames relative to the application root:"},{"code":[],"body":"","title":"8 Fonts","anchor":"#fonts"},{"title":"8.1 Fixed-width Font","anchor":"#fixed-width-font","code":["\nclass Array\n  # Calls +to_param+ on all its elements and joins the result with\n  # slashes. This is used by +url_for+ in Action Pack.\n  def to_param\n    collect { |e| e.to_param }.join '/'\n  end\nend\n\nclass Array\n  # Calls +to_param+ on all its elements and joins the result with\n  # slashes. This is used by +url_for+ in Action Pack.\n  def to_param\n    collect { |e| e.to_param }.join '/'\n  end\nend\n\nCopy\n","\n$ echo \"+:to_param+\" | rdoc --pipe\n# => <p><code>:to_param</code></p>\n\necho \"+:to_param+\" | rdoc --pipe\n\nCopy\n"],"body":"Use fixed-width fonts for:You can quickly test the RDoc output with the following command:"},{"code":["\n# Runs all the validations within the specified context.\n# Returns true if no errors are found, false otherwise.\n#\n# If the argument is false (default is +nil+), the context is\n# set to <tt>:create</tt> if <tt>new_record?</tt> is true,\n# and to <tt>:update</tt> if it is not.\n#\n# Validations with no <tt>:on</tt> option will run no\n# matter the context. Validations with # some <tt>:on</tt>\n# option will only run in the specified context.\ndef valid?(context = nil)\n  # ...\nend\n\n# Runs all the validations within the specified context.\n# Returns true if no errors are found, false otherwise.\n#\n# If the argument is false (default is +nil+), the context is\n# set to <tt>:create</tt> if <tt>new_record?</tt> is true,\n# and to <tt>:update</tt> if it is not.\n#\n# Validations with no <tt>:on</tt> option will run no\n# matter the context. Validations with # some <tt>:on</tt>\n# option will only run in the specified context.\ndef valid?(context = nil)\n  # ...\nend\n\nCopy\n"],"body":"When \"true\" and \"false\" are English words rather than Ruby keywords use a regular font:","title":"8.2 Regular Font","anchor":"#regular-font"},{"code":["\n# * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.\n\n# * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.\n\nCopy\n"],"body":"In lists of options, parameters, etc. use a hyphen between the item and its description (reads better than a colon because normally options are symbols):The description starts in upper case and ends with a full stop-it's standard English.","title":"9 Description Lists","anchor":"#description-lists"},{"title":"10 Dynamically Generated Methods","anchor":"#dynamically-generated-methods","code":["\nfor severity in Severity.constants\n  class_eval <<-EOT, __FILE__, __LINE__ + 1\n    def #{severity.downcase}(message = nil, progname = nil, &block)  # def debug(message = nil, progname = nil, &block)\n      add(#{severity}, message, progname, &block)                    #   add(DEBUG, message, progname, &block)\n    end                                                              # end\n                                                                     #\n    def #{severity.downcase}?                                        # def debug?\n      #{severity} >= @level                                          #   DEBUG >= @level\n    end                                                              # end\n  EOT\nend\n\nfor severity in Severity.constants\n  class_eval <<-EOT, __FILE__, __LINE__ + 1\n    def #{severity.downcase}(message = nil, progname = nil, &block)  # def debug(message = nil, progname = nil, &block)\n      add(#{severity}, message, progname, &block)                    #   add(DEBUG, message, progname, &block)\n    end                                                              # end\n                                                                     #\n    def #{severity.downcase}?                                        # def debug?\n      #{severity} >= @level                                          #   DEBUG >= @level\n    end                                                              # end\n  EOT\nend\n\nCopy\n","\n# def self.find_by_login_and_activated(*args)\n#   options = args.extract_options!\n#   ...\n# end\nself.class_eval %{\n  def self.#{method_id}(*args)\n    options = args.extract_options!\n    ...\n  end\n}\n\n# def self.find_by_login_and_activated(*args)\n#   options = args.extract_options!\n#   ...\n# end\nself.class_eval %{\n  def self.#{method_id}(*args)\n    options = args.extract_options!\n    ...\n  end\n}\n\nCopy\n"],"body":"Methods created with (module|class)_eval(STRING) have a comment by their side with an instance of the generated code. That comment is 2 spaces away from the template:If the resulting lines are too wide, say 200 columns or more, put the comment above the call:"},{"code":["\nmodule ActiveRecord::Core::ClassMethods\n  def arel_table #:nodoc:\n    # do some magic..\n  end\nend\n\nmodule ActiveRecord::Core::ClassMethods\n  def arel_table #:nodoc:\n    # do some magic..\n  end\nend\n\nCopy\n"],"body":"When writing documentation for Rails, it's important to understand the difference between public user-facing API vs internal API.Rails, like most libraries, uses the private keyword from Ruby for defining internal API. However, public API follows a slightly different convention. Instead of assuming all public methods are designed for user consumption, Rails uses the :nodoc: directive to annotate these kinds of methods as internal API.This means that there are methods in Rails with public visibility that aren't meant for user consumption.An example of this is ActiveRecord::Core::ClassMethods#arel_table:If you thought, \"this method looks like a public class method for ActiveRecord::Core\", you were right. But actually the Rails team doesn't want users to rely on this method. So they mark it as :nodoc: and it's removed from public documentation. The reasoning behind this is to allow the team to change these methods according to their internal needs across releases as they see fit. The name of this method could change, or the return value, or this entire class may disappear; there's no guarantee and so you shouldn't depend on this API in your plugins or applications. Otherwise, you risk your app or gem breaking when you upgrade to a newer release of Rails.As a contributor, it's important to think about whether this API is meant for end-user consumption. The Rails team is committed to not making any breaking changes to public API across releases without going through a full deprecation cycle. It's recommended that you :nodoc: any of your internal methods/classes unless they're already private (meaning visibility), in which case it's internal by default. Once the API stabilizes the visibility can change, but changing public API is much harder due to backwards compatibility.A class or module is marked with :nodoc: to indicate that all methods are internal API and should never be used directly.To summarize, the Rails team uses :nodoc: to mark publicly visible methods and classes for internal use; changes to the visibility of API should be considered carefully and discussed over a pull request first.","title":"11 Method Visibility","anchor":"#method-visibility"},{"title":"12 Regarding the Rails Stack","anchor":"#regarding-the-rails-stack","code":["\n# image_tag(\"icon.png\")\n#   # => <img src=\"/assets/icon.png\" />\n\n# image_tag(\"icon.png\")\n#   # => <img src=\"/assets/icon.png\" />\n\nCopy\n"],"body":"When documenting parts of Rails API, it's important to remember all of the\npieces that go into the Rails stack.This means that behavior may change depending on the scope or context of the\nmethod or class you're trying to document.In various places there is different behavior when you take the entire stack\ninto account, one such example is\nActionView::Helpers::AssetTagHelper#image_tag:Although the default behavior for #image_tag is to always return\n/images/icon.png, we take into account the full Rails stack (including the\nAsset Pipeline) we may see the result seen above.We're only concerned with the behavior experienced when using the full default\nRails stack.In this case, we want to document the behavior of the framework, and not just\nthis specific method.If you have a question on how the Rails team handles certain API, don't hesitate to open a ticket or send a patch to the issue tracker."}]