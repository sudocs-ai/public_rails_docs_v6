[{"code":[],"body":"Action Mailer allows you to send emails from your application using mailer classes\nand views.","title":"1 What is Action Mailer?","anchor":"#what-is-action-mailer-questionmark"},{"title":"1.1 Mailers are similar to controllers","anchor":"#mailers-are-similar-to-controllers","code":[],"body":"They inherit from ActionMailer::Base and live in app/mailers. Mailers also work\nvery similarly to controllers. Some examples of similarities are enumerated below.\nMailers have:"},{"code":[],"body":"This section will provide a step-by-step guide to creating a mailer and its\nviews.","title":"2 Sending Emails","anchor":"#sending-emails"},{"title":"2.1 Walkthrough to Generating a Mailer","anchor":"#walkthrough-to-generating-a-mailer","code":[],"body":""},{"title":"2.1.1 Create the Mailer","anchor":"#create-the-mailer","code":["\n$ bin/rails generate mailer User\ncreate  app/mailers/user_mailer.rb\ncreate  app/mailers/application_mailer.rb\ninvoke  erb\ncreate    app/views/user_mailer\ncreate    app/views/layouts/mailer.text.erb\ncreate    app/views/layouts/mailer.html.erb\ninvoke  test_unit\ncreate    test/mailers/user_mailer_test.rb\ncreate    test/mailers/previews/user_mailer_preview.rb\n\nbin/rails generate mailer User\n\nCopy\n","\n# app/mailers/application_mailer.rb\nclass ApplicationMailer < ActionMailer::Base\n  default from: \"from@example.com\"\n  layout 'mailer'\nend\n\n# app/mailers/application_mailer.rb\nclass ApplicationMailer < ActionMailer::Base\n  default from: \"from@example.com\"\n  layout 'mailer'\nend\n\nCopy\n","\n# app/mailers/user_mailer.rb\nclass UserMailer < ApplicationMailer\nend\n\n# app/mailers/user_mailer.rb\nclass UserMailer < ApplicationMailer\nend\n\nCopy\n","\nclass MyMailer < ActionMailer::Base\nend\n\nclass MyMailer < ActionMailer::Base\nend\n\nCopy\n"],"body":"As you can see, you can generate mailers just like you use other generators with\nRails.If you didn't want to use a generator, you could create your own file inside of\napp/mailers, just make sure that it inherits from ActionMailer::Base:"},{"code":["\nclass UserMailer < ApplicationMailer\nend\n\nclass UserMailer < ApplicationMailer\nend\n\nCopy\n","\nclass UserMailer < ApplicationMailer\n  default from: 'notifications@example.com'\n\n  def welcome_email\n    @user = params[:user]\n    @url  = 'http://example.com/login'\n    mail(to: @user.email, subject: 'Welcome to My Awesome Site')\n  end\nend\n\nclass UserMailer < ApplicationMailer\n  default from: 'notifications@example.com'\n\n  def welcome_email\n    @user = params[:user]\n    @url  = 'http://example.com/login'\n    mail(to: @user.email, subject: 'Welcome to My Awesome Site')\n  end\nend\n\nCopy\n"],"body":"Mailers have methods called \"actions\" and they use views to structure their content.\nWhere a controller generates content like HTML to send back to the client, a Mailer\ncreates a message to be delivered via email.app/mailers/user_mailer.rb contains an empty mailer:Let's add a method called welcome_email, that will send an email to the user's\nregistered email address:Here is a quick explanation of the items presented in the preceding method. For\na full list of all available options, please have a look further down at the\nComplete List of Action Mailer user-settable attributes section.","title":"2.1.2 Edit the Mailer","anchor":"#edit-the-mailer"},{"code":["\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta content='text/html; charset=UTF-8' http-equiv='Content-Type' />\n  </head>\n  <body>\n    <h1>Welcome to example.com, <%= @user.name %></h1>\n    <p>\n      You have successfully signed up to example.com,\n      your username is: <%= @user.login %>.<br>\n    </p>\n    <p>\n      To login to the site, just follow this link: <%= @url %>.\n    </p>\n    <p>Thanks for joining and have a great day!</p>\n  </body>\n</html>\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta content='text/html; charset=UTF-8' http-equiv='Content-Type' />\n  </head>\n  <body>\n    <h1>Welcome to example.com, <%= @user.name %></h1>\n    <p>\n      You have successfully signed up to example.com,\n      your username is: <%= @user.login %>.<br>\n    </p>\n    <p>\n      To login to the site, just follow this link: <%= @url %>.\n    </p>\n    <p>Thanks for joining and have a great day!</p>\n  </body>\n</html>\n\nCopy\n","\nWelcome to example.com, <%= @user.name %>\n===============================================\n\nYou have successfully signed up to example.com,\nyour username is: <%= @user.login %>.\n\nTo login to the site, just follow this link: <%= @url %>.\n\nThanks for joining and have a great day!\n\nWelcome to example.com, <%= @user.name %>\n===============================================\n\nYou have successfully signed up to example.com,\nyour username is: <%= @user.login %>.\n\nTo login to the site, just follow this link: <%= @url %>.\n\nThanks for joining and have a great day!\n\nCopy\n"],"body":"Create a file called welcome_email.html.erb in app/views/user_mailer/. This\nwill be the template used for the email, formatted in HTML:Let's also make a text part for this email. Not all clients prefer HTML emails,\nand so sending both is best practice. To do this, create a file called\nwelcome_email.text.erb in app/views/user_mailer/:When you call the mail method now, Action Mailer will detect the two templates\n(text and HTML) and automatically generate a multipart/alternative email.","title":"2.1.3 Create a Mailer View","anchor":"#create-a-mailer-view"},{"title":"2.1.4 Calling the Mailer","anchor":"#calling-the-mailer","code":["\n$ bin/rails generate scaffold user name email login\n$ bin/rails db:migrate\n\nbin/rails generate scaffold user name email login\nbin/rails db:migrate\n\nCopy\n","\nclass UsersController < ApplicationController\n  # POST /users\n  # POST /users.json\n  def create\n    @user = User.new(params[:user])\n\n    respond_to do |format|\n      if @user.save\n        # Tell the UserMailer to send a welcome email after save\n        UserMailer.with(user: @user).welcome_email.deliver_later\n\n        format.html { redirect_to(@user, notice: 'User was successfully created.') }\n        format.json { render json: @user, status: :created, location: @user }\n      else\n        format.html { render action: 'new' }\n        format.json { render json: @user.errors, status: :unprocessable_entity }\n      end\n    end\n  end\nend\n\nclass UsersController < ApplicationController\n  # POST /users\n  # POST /users.json\n  def create\n    @user = User.new(params[:user])\n\n    respond_to do |format|\n      if @user.save\n        # Tell the UserMailer to send a welcome email after save\n        UserMailer.with(user: @user).welcome_email.deliver_later\n\n        format.html { redirect_to(@user, notice: 'User was successfully created.') }\n        format.json { render json: @user, status: :created, location: @user }\n      else\n        format.html { render action: 'new' }\n        format.json { render json: @user.errors, status: :unprocessable_entity }\n      end\n    end\n  end\nend\n\nCopy\n","\nclass SendWeeklySummary\n  def run\n    User.find_each do |user|\n      UserMailer.with(user: user).weekly_summary.deliver_now\n    end\n  end\nend\n\nclass SendWeeklySummary\n  def run\n    User.find_each do |user|\n      UserMailer.with(user: user).weekly_summary.deliver_now\n    end\n  end\nend\n\nCopy\n"],"body":"Mailers are really just another way to render a view. Instead of rendering a\nview and sending it over the HTTP protocol, they are sending it out through\nthe email protocols instead. Due to this, it makes sense to have your\ncontroller tell the Mailer to send an email when a user is successfully created.Setting this up is simple.First, let's create a User scaffold:Now that we have a user model to play with, we will edit the\napp/controllers/users_controller.rb file, make it instruct the UserMailer to deliver\nan email to the newly created user by editing the create action and inserting a\ncall to UserMailer.with(user: @user).welcome_email right after the user is successfully saved.Action Mailer is nicely integrated with Active Job so you can send emails outside\nof the request-response cycle, so the user doesn't have to wait on it:If you want to send emails right away (from a cronjob for example) just call\ndeliver_now:Any key value pair passed to with just becomes the params for the mailer\naction. So with(user: @user, account: @user.account) makes params[:user] and\nparams[:account] available in the mailer action. Just like controllers have\nparams.The method welcome_email returns an ActionMailer::MessageDelivery object which\ncan then be told to deliver_now or deliver_later to send itself out. The\nActionMailer::MessageDelivery object is a wrapper around a Mail::Message. If\nyou want to inspect, alter, or do anything else with the Mail::Message object you can\naccess it with the message method on the ActionMailer::MessageDelivery object."},{"title":"2.2 Auto encoding header values","anchor":"#auto-encoding-header-values","code":[],"body":"Action Mailer handles the auto encoding of multibyte characters inside of\nheaders and bodies.For more complex examples such as defining alternate character sets or\nself-encoding text first, please refer to the\nMail library."},{"title":"2.3 Complete List of Action Mailer Methods","anchor":"#complete-list-of-action-mailer-methods","code":[],"body":"There are just three methods that you need to send pretty much any email\nmessage:"},{"code":[],"body":"Action Mailer makes it very easy to add attachments.  When the mail method will be triggered, it will send a multipart email with\n  an attachment, properly nested with the top level being multipart/mixed and\n  the first part being a multipart/alternative containing the plain text and\n  HTML email messages.","title":"2.3.1 Adding Attachments","anchor":"#adding-attachments"},{"title":"2.3.2 Making Inline Attachments","anchor":"#making-inline-attachments","code":[],"body":"Action Mailer 3.0 makes inline attachments, which involved a lot of hacking in pre 3.0 versions, much simpler and trivial as they should be."},{"code":["\nclass AdminMailer < ApplicationMailer\n  default to: -> { Admin.pluck(:email) },\n          from: 'notification@example.com'\n\n  def new_registration(user)\n    @user = user\n    mail(subject: \"New User Signup: #{@user.email}\")\n  end\nend\n\nclass AdminMailer < ApplicationMailer\n  default to: -> { Admin.pluck(:email) },\n          from: 'notification@example.com'\n\n  def new_registration(user)\n    @user = user\n    mail(subject: \"New User Signup: #{@user.email}\")\n  end\nend\n\nCopy\n"],"body":"It is possible to send email to one or more recipients in one email (e.g.,\ninforming all admins of a new signup) by setting the list of emails to the :to\nkey. The list of emails can be an array of email addresses or a single string\nwith the addresses separated by commas.The same format can be used to set carbon copy (Cc:) and blind carbon copy\n(Bcc:) recipients, by using the :cc and :bcc keys respectively.","title":"2.3.3 Sending Email To Multiple Recipients","anchor":"#sending-email-to-multiple-recipients"},{"title":"2.3.4 Sending Email With Name","anchor":"#sending-email-with-name","code":["\ndef welcome_email\n  @user = params[:user]\n  mail(\n    to: email_address_with_name(@user.email, @user.name),\n    subject: 'Welcome to My Awesome Site'\n  )\nend\n\ndef welcome_email\n  @user = params[:user]\n  mail(\n    to: email_address_with_name(@user.email, @user.name),\n    subject: 'Welcome to My Awesome Site'\n  )\nend\n\nCopy\n"],"body":"Sometimes you wish to show the name of the person instead of just their email\naddress when they receive the email. You can use email_address_with_name for\nthat:"},{"code":["\nclass UserMailer < ApplicationMailer\n  default from: 'notifications@example.com'\n\n  def welcome_email\n    @user = params[:user]\n    @url  = 'http://example.com/login'\n    mail(to: @user.email,\n         subject: 'Welcome to My Awesome Site',\n         template_path: 'notifications',\n         template_name: 'another')\n  end\nend\n\nclass UserMailer < ApplicationMailer\n  default from: 'notifications@example.com'\n\n  def welcome_email\n    @user = params[:user]\n    @url  = 'http://example.com/login'\n    mail(to: @user.email,\n         subject: 'Welcome to My Awesome Site',\n         template_path: 'notifications',\n         template_name: 'another')\n  end\nend\n\nCopy\n","\nclass UserMailer < ApplicationMailer\n  default from: 'notifications@example.com'\n\n  def welcome_email\n    @user = params[:user]\n    @url  = 'http://example.com/login'\n    mail(to: @user.email,\n         subject: 'Welcome to My Awesome Site') do |format|\n      format.html { render 'another_template' }\n      format.text { render plain: 'Render text' }\n    end\n  end\nend\n\nclass UserMailer < ApplicationMailer\n  default from: 'notifications@example.com'\n\n  def welcome_email\n    @user = params[:user]\n    @url  = 'http://example.com/login'\n    mail(to: @user.email,\n         subject: 'Welcome to My Awesome Site') do |format|\n      format.html { render 'another_template' }\n      format.text { render plain: 'Render text' }\n    end\n  end\nend\n\nCopy\n","\nclass UserMailer < ApplicationMailer\n  prepend_view_path \"custom/path/to/mailer/view\"\n\n  # This will try to load \"custom/path/to/mailer/view/welcome_email\" template\n  def welcome_email\n    # ...\n  end\nend\n\nclass UserMailer < ApplicationMailer\n  prepend_view_path \"custom/path/to/mailer/view\"\n\n  # This will try to load \"custom/path/to/mailer/view/welcome_email\" template\n  def welcome_email\n    # ...\n  end\nend\n\nCopy\n"],"body":"Mailer views are located in the app/views/name_of_mailer_class directory. The\nspecific mailer view is known to the class because its name is the same as the\nmailer method. In our example from above, our mailer view for the\nwelcome_email method will be in app/views/user_mailer/welcome_email.html.erb\nfor the HTML version and welcome_email.text.erb for the plain text version.To change the default mailer view for your action you do something like:In this case it will look for templates at app/views/notifications with name\nanother.  You can also specify an array of paths for template_path, and they\nwill be searched in order.If you want more flexibility you can also pass a block and render specific\ntemplates or even render inline or text without using a template file:This will render the template 'another_template.html.erb' for the HTML part and\nuse the rendered text for the text part. The render command is the same one used\ninside of Action Controller, so you can use all the same options, such as\n:text, :inline, etc.If you would like to render a template located outside of the default app/views/mailer_name/ directory, you can apply the prepend_view_path, like so:You can also consider using the append_view_path method.","title":"2.4 Mailer Views","anchor":"#mailer-views"},{"title":"2.4.1 Caching mailer view","anchor":"#caching-mailer-view","code":["\n<% cache do %>\n  <%= @company.name %>\n<% end %>\n\n<% cache do %>\n  <%= @company.name %>\n<% end %>\n\nCopy\n","\nconfig.action_mailer.perform_caching = true\n\nconfig.action_mailer.perform_caching = true\n\nCopy\n"],"body":"You can perform fragment caching in mailer views like in application views using the cache method.And in order to use this feature, you need to configure your application with this:Fragment caching is also supported in multipart emails.\nRead more about caching in the Rails caching guide."},{"title":"2.5 Action Mailer Layouts","anchor":"#action-mailer-layouts","code":["\nclass UserMailer < ApplicationMailer\n  layout 'awesome' # use awesome.(html|text).erb as the layout\nend\n\nclass UserMailer < ApplicationMailer\n  layout 'awesome' # use awesome.(html|text).erb as the layout\nend\n\nCopy\n","\nclass UserMailer < ApplicationMailer\n  def welcome_email\n    mail(to: params[:user].email) do |format|\n      format.html { render layout: 'my_layout' }\n      format.text\n    end\n  end\nend\n\nclass UserMailer < ApplicationMailer\n  def welcome_email\n    mail(to: params[:user].email) do |format|\n      format.html { render layout: 'my_layout' }\n      format.text\n    end\n  end\nend\n\nCopy\n"],"body":"Just like controller views, you can also have mailer layouts. The layout name\nneeds to be the same as your mailer, such as user_mailer.html.erb and\nuser_mailer.text.erb to be automatically recognized by your mailer as a\nlayout.In order to use a different file, call layout in your mailer:Just like with controller views, use yield to render the view inside the\nlayout.You can also pass in a layout: 'layout_name' option to the render call inside\nthe format block to specify different layouts for different formats:Will render the HTML part using the my_layout.html.erb file and the text part\nwith the usual user_mailer.text.erb file if it exists."},{"title":"2.6 Previewing Emails","anchor":"#previewing-emails","code":["\nclass UserMailerPreview < ActionMailer::Preview\n  def welcome_email\n    UserMailer.with(user: User.first).welcome_email\n  end\nend\n\nclass UserMailerPreview < ActionMailer::Preview\n  def welcome_email\n    UserMailer.with(user: User.first).welcome_email\n  end\nend\n\nCopy\n","\nconfig.action_mailer.preview_path = \"#{Rails.root}/lib/mailer_previews\"\n\nconfig.action_mailer.preview_path = \"#{Rails.root}/lib/mailer_previews\"\n\nCopy\n"],"body":"Action Mailer previews provide a way to see how emails look by visiting a\nspecial URL that renders them. In the above example, the preview class for\nUserMailer should be named UserMailerPreview and located in\ntest/mailers/previews/user_mailer_preview.rb. To see the preview of\nwelcome_email, implement a method that has the same name and call\nUserMailer.welcome_email:Then the preview will be available in http://localhost:3000/rails/mailers/user_mailer/welcome_email.If you change something in app/views/user_mailer/welcome_email.html.erb\nor the mailer itself, it'll automatically reload and render it so you can\nvisually see the new style instantly. A list of previews are also available\nin http://localhost:3000/rails/mailers.By default, these preview classes live in test/mailers/previews.\nThis can be configured using the preview_path option. For example, if you\nwant to change it to lib/mailer_previews, you can configure it in\nconfig/application.rb:"},{"code":["\nconfig.action_mailer.default_url_options = { host: 'example.com' }\n\nconfig.action_mailer.default_url_options = { host: 'example.com' }\n\nCopy\n","\n<%= link_to 'welcome', welcome_path %>\n\n<%= link_to 'welcome', welcome_path %>\n\nCopy\n","\n<%= link_to 'welcome', welcome_url %>\n\n<%= link_to 'welcome', welcome_url %>\n\nCopy\n"],"body":"Unlike controllers, the mailer instance doesn't have any context about the\nincoming request so you'll need to provide the :host parameter yourself.As the :host usually is consistent across the application you can configure it\nglobally in config/application.rb:Because of this behavior you cannot use any of the *_path helpers inside of\nan email. Instead you will need to use the associated *_url helper. For example\ninstead of usingYou will need to use:By using the full URL, your links will now work in your emails.","title":"2.7 Generating URLs in Action Mailer Views","anchor":"#generating-urls-in-action-mailer-views"},{"title":"2.7.1 Generating URLs with url_for","anchor":"#generating-urls-with-url-for","code":["\n<%= url_for(host: 'example.com',\n            controller: 'welcome',\n            action: 'greeting') %>\n\n<%= url_for(host: 'example.com',\n            controller: 'welcome',\n            action: 'greeting') %>\n\nCopy\n"],"body":"url_for generates a full URL by default in templates.If you did not configure the :host option globally make sure to pass it to\nurl_for."},{"code":["\n<%= user_url(@user, host: 'example.com') %>\n\n<%= user_url(@user, host: 'example.com') %>\n\nCopy\n"],"body":"Email clients have no web context and so paths have no base URL to form complete\nweb addresses. Thus, you should always use the *_url variant of named route\nhelpers.If you did not configure the :host option globally make sure to pass it to the\nURL helper.","title":"2.7.2 Generating URLs with Named Routes","anchor":"#generating-urls-with-named-routes"},{"title":"2.8 Adding images in Action Mailer Views","anchor":"#adding-images-in-action-mailer-views","code":["\nconfig.asset_host = 'http://example.com'\n\nconfig.asset_host = 'http://example.com'\n\nCopy\n","\n<%= image_tag 'image.jpg' %>\n\n<%= image_tag 'image.jpg' %>\n\nCopy\n"],"body":"Unlike controllers, the mailer instance doesn't have any context about the\nincoming request so you'll need to provide the :asset_host parameter yourself.As the :asset_host usually is consistent across the application you can\nconfigure it globally in config/application.rb:Now you can display an image inside your email."},{"code":[],"body":"Action Mailer will automatically send multipart emails if you have different\ntemplates for the same action. So, for our UserMailer example, if you have\nwelcome_email.text.erb and welcome_email.html.erb in\napp/views/user_mailer, Action Mailer will automatically send a multipart email\nwith the HTML and text versions setup as different parts.The order of the parts getting inserted is determined by the :parts_order\ninside of the ActionMailer::Base.default method.","title":"2.9 Sending Multipart Emails","anchor":"#sending-multipart-emails"},{"title":"2.10 Sending Emails with Dynamic Delivery Options","anchor":"#sending-emails-with-dynamic-delivery-options","code":["\nclass UserMailer < ApplicationMailer\n  def welcome_email\n    @user = params[:user]\n    @url  = user_url(@user)\n    delivery_options = { user_name: params[:company].smtp_user,\n                         password: params[:company].smtp_password,\n                         address: params[:company].smtp_host }\n    mail(to: @user.email,\n         subject: \"Please see the Terms and Conditions attached\",\n         delivery_method_options: delivery_options)\n  end\nend\n\nclass UserMailer < ApplicationMailer\n  def welcome_email\n    @user = params[:user]\n    @url  = user_url(@user)\n    delivery_options = { user_name: params[:company].smtp_user,\n                         password: params[:company].smtp_password,\n                         address: params[:company].smtp_host }\n    mail(to: @user.email,\n         subject: \"Please see the Terms and Conditions attached\",\n         delivery_method_options: delivery_options)\n  end\nend\n\nCopy\n"],"body":"If you wish to override the default delivery options (e.g. SMTP credentials)\nwhile delivering emails, you can do this using delivery_method_options in the\nmailer action."},{"code":["\nclass UserMailer < ApplicationMailer\n  def welcome_email\n    mail(to: params[:user].email,\n         body: params[:email_body],\n         content_type: \"text/html\",\n         subject: \"Already rendered!\")\n  end\nend\n\nclass UserMailer < ApplicationMailer\n  def welcome_email\n    mail(to: params[:user].email,\n         body: params[:email_body],\n         content_type: \"text/html\",\n         subject: \"Already rendered!\")\n  end\nend\n\nCopy\n"],"body":"There may be cases in which you want to skip the template rendering step and\nsupply the email body as a string. You can achieve this using the :body\noption. In such cases don't forget to add the :content_type option. Rails\nwill default to text/plain otherwise.","title":"2.11 Sending Emails without Template Rendering","anchor":"#sending-emails-without-template-rendering"},{"code":["\nclass InvitationsMailer < ApplicationMailer\n  before_action :set_inviter_and_invitee\n  before_action { @account = params[:inviter].account }\n\n  default to:       -> { @invitee.email_address },\n          from:     -> { common_address(@inviter) },\n          reply_to: -> { @inviter.email_address_with_name }\n\n  def account_invitation\n    mail subject: \"#{@inviter.name} invited you to their Basecamp (#{@account.name})\"\n  end\n\n  def project_invitation\n    @project    = params[:project]\n    @summarizer = ProjectInvitationSummarizer.new(@project.bucket)\n\n    mail subject: \"#{@inviter.name.familiar} added you to a project in Basecamp (#{@account.name})\"\n  end\n\n  private\n\n  def set_inviter_and_invitee\n    @inviter = params[:inviter]\n    @invitee = params[:invitee]\n  end\nend\n\nclass InvitationsMailer < ApplicationMailer\n  before_action :set_inviter_and_invitee\n  before_action { @account = params[:inviter].account }\n\n  default to:       -> { @invitee.email_address },\n          from:     -> { common_address(@inviter) },\n          reply_to: -> { @inviter.email_address_with_name }\n\n  def account_invitation\n    mail subject: \"#{@inviter.name} invited you to their Basecamp (#{@account.name})\"\n  end\n\n  def project_invitation\n    @project    = params[:project]\n    @summarizer = ProjectInvitationSummarizer.new(@project.bucket)\n\n    mail subject: \"#{@inviter.name.familiar} added you to a project in Basecamp (#{@account.name})\"\n  end\n\n  private\n\n  def set_inviter_and_invitee\n    @inviter = params[:inviter]\n    @invitee = params[:invitee]\n  end\nend\n\nCopy\n","\nclass UserMailer < ApplicationMailer\n  before_action { @business, @user = params[:business], params[:user] }\n\n  after_action :set_delivery_options,\n               :prevent_delivery_to_guests,\n               :set_business_headers\n\n  def feedback_message\n  end\n\n  def campaign_message\n  end\n\n  private\n\n    def set_delivery_options\n      # You have access to the mail instance,\n      # @business and @user instance variables here\n      if @business && @business.has_smtp_settings?\n        mail.delivery_method.settings.merge!(@business.smtp_settings)\n      end\n    end\n\n    def prevent_delivery_to_guests\n      if @user && @user.guest?\n        mail.perform_deliveries = false\n      end\n    end\n\n    def set_business_headers\n      if @business\n        headers[\"X-SMTPAPI-CATEGORY\"] = @business.code\n      end\n    end\nend\n\nclass UserMailer < ApplicationMailer\n  before_action { @business, @user = params[:business], params[:user] }\n\n  after_action :set_delivery_options,\n               :prevent_delivery_to_guests,\n               :set_business_headers\n\n  def feedback_message\n  end\n\n  def campaign_message\n  end\n\n  private\n\n    def set_delivery_options\n      # You have access to the mail instance,\n      # @business and @user instance variables here\n      if @business && @business.has_smtp_settings?\n        mail.delivery_method.settings.merge!(@business.smtp_settings)\n      end\n    end\n\n    def prevent_delivery_to_guests\n      if @user && @user.guest?\n        mail.perform_deliveries = false\n      end\n    end\n\n    def set_business_headers\n      if @business\n        headers[\"X-SMTPAPI-CATEGORY\"] = @business.code\n      end\n    end\nend\n\nCopy\n"],"body":"Action Mailer allows for you to specify a before_action, after_action and\naround_action.","title":"3 Action Mailer Callbacks","anchor":"#action-mailer-callbacks"},{"code":["\n<%= stylesheet_link_tag mailer.name.underscore %>\n<h1><%= message.subject %></h1>\n\n<%= stylesheet_link_tag mailer.name.underscore %>\n<h1><%= message.subject %></h1>\n\nCopy\n"],"body":"Action Mailer inherits from AbstractController, so you have access to most\nof the same helpers as you do in Action Controller.There are also some Action Mailer-specific helper methods available in\nActionMailer::MailHelper. For example, these allow accessing the mailer\ninstance from your view with mailer, and accessing the message as message:","title":"4 Using Action Mailer Helpers","anchor":"#using-action-mailer-helpers"},{"code":[],"body":"The following configuration options are best made in one of the environment\nfiles (environment.rb, production.rb, etc...)For a complete writeup of possible configurations see the\nConfiguring Action Mailer in\nour Configuring Rails Applications guide.","title":"5 Action Mailer Configuration","anchor":"#action-mailer-configuration"},{"title":"5.1 Example Action Mailer Configuration","anchor":"#example-action-mailer-configuration","code":["\nconfig.action_mailer.delivery_method = :sendmail\n# Defaults to:\n# config.action_mailer.sendmail_settings = {\n#   location: '/usr/sbin/sendmail',\n#   arguments: '-i'\n# }\nconfig.action_mailer.perform_deliveries = true\nconfig.action_mailer.raise_delivery_errors = true\nconfig.action_mailer.default_options = {from: 'no-reply@example.com'}\n\nconfig.action_mailer.delivery_method = :sendmail\n# Defaults to:\n# config.action_mailer.sendmail_settings = {\n#   location: '/usr/sbin/sendmail',\n#   arguments: '-i'\n# }\nconfig.action_mailer.perform_deliveries = true\nconfig.action_mailer.raise_delivery_errors = true\nconfig.action_mailer.default_options = {from: 'no-reply@example.com'}\n\nCopy\n"],"body":"An example would be adding the following to your appropriate\nconfig/environments/$RAILS_ENV.rb file:"},{"code":["\nconfig.action_mailer.delivery_method = :smtp\nconfig.action_mailer.smtp_settings = {\n  address:              'smtp.gmail.com',\n  port:                 587,\n  domain:               'example.com',\n  user_name:            '<username>',\n  password:             '<password>',\n  authentication:       'plain',\n  enable_starttls_auto: true }\n\nconfig.action_mailer.delivery_method = :smtp\nconfig.action_mailer.smtp_settings = {\n  address:              'smtp.gmail.com',\n  port:                 587,\n  domain:               'example.com',\n  user_name:            '<username>',\n  password:             '<password>',\n  authentication:       'plain',\n  enable_starttls_auto: true }\n\nCopy\n"],"body":"As Action Mailer now uses the Mail gem, this\nbecomes as simple as adding to your config/environments/$RAILS_ENV.rb file:","title":"5.2 Action Mailer Configuration for Gmail","anchor":"#action-mailer-configuration-for-gmail"},{"title":"6 Mailer Testing","anchor":"#mailer-testing","code":[],"body":"You can find detailed instructions on how to test your mailers in the\ntesting guide."},{"title":"7 Intercepting and Observing Emails","anchor":"#intercepting-and-observing-emails","code":[],"body":"Action Mailer provides hooks into the Mail observer and interceptor methods. These allow you to register classes that are called during the mail delivery life cycle of every email sent."},{"title":"7.1 Intercepting Emails","anchor":"#intercepting-emails","code":["\nclass SandboxEmailInterceptor\n  def self.delivering_email(message)\n    message.to = ['sandbox@example.com']\n  end\nend\n\nclass SandboxEmailInterceptor\n  def self.delivering_email(message)\n    message.to = ['sandbox@example.com']\n  end\nend\n\nCopy\n","\nif Rails.env.staging?\n  ActionMailer::Base.register_interceptor(SandboxEmailInterceptor)\nend\n\nif Rails.env.staging?\n  ActionMailer::Base.register_interceptor(SandboxEmailInterceptor)\nend\n\nCopy\n"],"body":"Interceptors allow you to make modifications to emails before they are handed off to the delivery agents. An interceptor class must implement the ::delivering_email(message) method which will be called before the email is sent.Before the interceptor can do its job you need to register it using\nregister_interceptor. You can do this in an initializer file like\nconfig/initializers/sandbox_email_interceptor.rb:"},{"title":"7.2 Observing Emails","anchor":"#observing-emails","code":["\nclass EmailDeliveryObserver\n  def self.delivered_email(message)\n    EmailDelivery.log(message)\n  end\nend\n\nclass EmailDeliveryObserver\n  def self.delivered_email(message)\n    EmailDelivery.log(message)\n  end\nend\n\nCopy\n","\nActionMailer::Base.register_observer(EmailDeliveryObserver)\n\nActionMailer::Base.register_observer(EmailDeliveryObserver)\n\nCopy\n"],"body":"Observers give you access to the email message after it has been sent. An observer class must implement the :delivered_email(message) method, which will be called after the email is sent.Similar to interceptors, you must register observers using register_observer. You can do this in an initializer file\nlike config/initializers/email_delivery_observer.rb:"}]