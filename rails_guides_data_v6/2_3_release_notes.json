[{"code":[],"body":"There are two major changes in the architecture of Rails applications: complete integration of the Rack modular web server interface, and renewed support for Rails Engines.","title":"1 Application Architecture","anchor":"#application-architecture"},{"title":"1.1 Rack Integration","anchor":"#rack-integration","code":[],"body":"Rails has now broken with its CGI past, and uses Rack everywhere. This required and resulted in a tremendous number of internal changes (but if you use CGI, don't worry; Rails now supports CGI through a proxy interface). Still, this is a major change to Rails internals. After upgrading to 2.3, you should test on your local environment and your production environment. Some things to test:Here's a summary of the rack-related changes:"},{"code":[],"body":"After some versions without an upgrade, Rails 2.3 offers some new features for Rails Engines (Rails applications that can be embedded within other applications). First, routing files in engines are automatically loaded and reloaded now, just like your routes.rb file (this also applies to routing files in other plugins). Second, if your plugin has an app folder, then app/[models|controllers|helpers] will automatically be added to the Rails load path. Engines also support adding view paths now, and Action Mailer as well as Action View will use views from engines and other plugins.","title":"1.2 Renewed Support for Rails Engines","anchor":"#renewed-support-for-rails-engines"},{"title":"2 Documentation","anchor":"#documentation","code":[],"body":"The Ruby on Rails guides project has published several additional guides for Rails 2.3. In addition, a separate site maintains updated copies of the Guides for Edge Rails. Other documentation efforts include a relaunch of the Rails wiki and early planning for a Rails Book."},{"code":[],"body":"Rails 2.3 should pass all of its own tests whether you are running on Ruby 1.8 or the now-released Ruby 1.9.1. You should be aware, though, that moving to 1.9.1 entails checking all of the data adapters, plugins, and other code that you depend on for Ruby 1.9.1 compatibility, as well as Rails core.","title":"3 Ruby 1.9.1 Support","anchor":"#ruby-1-9-1-support"},{"title":"4 Active Record","anchor":"#active-record","code":[],"body":"Active Record gets quite a number of new features and bug fixes in Rails 2.3. The highlights include nested attributes, nested transactions, dynamic and default scopes, and batch processing."},{"title":"4.1 Nested Attributes","anchor":"#nested-attributes","code":["\nclass Book < ActiveRecord::Base\n  has_one :author\n  has_many :pages\n\n  accepts_nested_attributes_for :author, :pages\nend\n\nclass Book < ActiveRecord::Base\n  has_one :author\n  has_many :pages\n\n  accepts_nested_attributes_for :author, :pages\nend\n\nCopy\n","\naccepts_nested_attributes_for :author,\n  :reject_if => proc { |attributes| attributes['name'].blank? }\n\naccepts_nested_attributes_for :author,\n  :reject_if => proc { |attributes| attributes['name'].blank? }\n\nCopy\n"],"body":"Active Record can now update the attributes on nested models directly, provided you tell it to do so:Turning on nested attributes enables a number of things: automatic (and atomic) saving of a record together with its associated children, child-aware validations, and support for nested forms (discussed later).You can also specify requirements for any new records that are added via nested attributes using the :reject_if option:"},{"code":["\nUser.transaction do\n  User.create(:username => 'Admin')\n  User.transaction(:requires_new => true) do\n    User.create(:username => 'Regular')\n    raise ActiveRecord::Rollback\n  end\nend\n\nUser.find(:all)  # => Returns only Admin\n\nUser.transaction do\n  User.create(:username => 'Admin')\n  User.transaction(:requires_new => true) do\n    User.create(:username => 'Regular')\n    raise ActiveRecord::Rollback\n  end\nend\n\nUser.find(:all)  # => Returns only Admin\n\nCopy\n"],"body":"Active Record now supports nested transactions, a much-requested feature. Now you can write code like this:Nested transactions let you roll back an inner transaction without affecting the state of the outer transaction. If you want a transaction to be nested, you must explicitly add the :requires_new option; otherwise, a nested transaction simply becomes part of the parent transaction (as it does currently on Rails 2.2). Under the covers, nested transactions are using savepoints so they're supported even on databases that don't have true nested transactions. There is also a bit of magic going on to make these transactions play well with transactional fixtures during testing.","title":"4.2 Nested Transactions","anchor":"#nested-transactions"},{"code":["\nOrder.scoped_by_customer_id(12)\nOrder.scoped_by_customer_id(12).find(:all,\n  :conditions => \"status = 'open'\")\nOrder.scoped_by_customer_id(12).scoped_by_status(\"open\")\n\nOrder.scoped_by_customer_id(12)\nOrder.scoped_by_customer_id(12).find(:all,\n  :conditions => \"status = 'open'\")\nOrder.scoped_by_customer_id(12).scoped_by_status(\"open\")\n\nCopy\n"],"body":"You know about dynamic finders in Rails (which allow you to concoct methods like find_by_color_and_flavor on the fly) and named scopes (which allow you to encapsulate reusable query conditions into friendly names like currently_active). Well, now you can have dynamic scope methods. The idea is to put together syntax that allows filtering on the fly and method chaining. For example:There's nothing to define to use dynamic scopes: they just work.","title":"4.3 Dynamic Scopes","anchor":"#dynamic-scopes"},{"code":[],"body":"Rails 2.3 will introduce the notion of default scopes similar to named scopes, but applying to all named scopes or find methods within the model. For example, you can write default_scope :order => 'name ASC' and any time you retrieve records from that model they'll come out sorted by name (unless you override the option, of course).","title":"4.4 Default Scopes","anchor":"#default-scopes"},{"code":["\nCustomer.find_in_batches(:conditions => {:active => true}) do |customer_group|\n  customer_group.each { |customer| customer.update_account_balance! }\nend\n\nCustomer.find_in_batches(:conditions => {:active => true}) do |customer_group|\n  customer_group.each { |customer| customer.update_account_balance! }\nend\n\nCopy\n","\nCustomer.find_each do |customer|\n  customer.update_account_balance!\nend\n\nCustomer.find_each do |customer|\n  customer.update_account_balance!\nend\n\nCopy\n"],"body":"You can now process large numbers of records from an Active Record model with less pressure on memory by using find_in_batches:You can pass most of the find options into find_in_batches. However, you cannot specify the order that records will be returned in (they will always be returned in ascending order of primary key, which must be an integer), or use the :limit option. Instead, use the :batch_size option, which defaults to 1000, to set the number of records that will be returned in each batch.The new find_each method provides a wrapper around find_in_batches that returns individual records, with the find itself being done in batches (of 1000 by default):Note that you should only use this method for batch processing: for small numbers of records (less than 1000), you should just use the regular find methods with your own loop.","title":"4.5 Batch Processing","anchor":"#batch-processing"},{"code":["\nbefore_save :update_credit_rating, :if => :active,\n  :unless => [:admin, :cash_only]\n\nbefore_save :update_credit_rating, :if => :active,\n  :unless => [:admin, :cash_only]\n\nCopy\n"],"body":"When using Active Record callbacks, you can now combine :if and :unless options on the same callback, and supply multiple conditions as an array:","title":"4.6 Multiple Conditions for Callbacks","anchor":"#multiple-conditions-for-callbacks"},{"code":["\ndevelopers = Developer.find(:all, :group => \"salary\",\n  :having => \"sum(salary) > 10000\", :select => \"salary\")\n\ndevelopers = Developer.find(:all, :group => \"salary\",\n  :having => \"sum(salary) > 10000\", :select => \"salary\")\n\nCopy\n"],"body":"Rails now has a :having option on find (as well as on has_many and has_and_belongs_to_many associations) for filtering records in grouped finds. As those with heavy SQL backgrounds know, this allows filtering based on grouped results:","title":"4.7 Find with having","anchor":"#find-with-having"},{"code":[],"body":"MySQL supports a reconnect flag in its connections - if set to true, then the client will try reconnecting to the server before giving up in case of a lost connection. You can now set reconnect = true for your MySQL connections in database.yml to get this behavior from a Rails application. The default is false, so the behavior of existing applications doesn't change.","title":"4.8 Reconnecting MySQL Connections","anchor":"#reconnecting-mysql-connections"},{"code":[],"body":"","title":"4.9 Other Active Record Changes","anchor":"#other-active-record-changes"},{"code":[],"body":"Action Controller rolls out some significant changes to rendering, as well as improvements in routing and other areas, in this release.","title":"5 Action Controller","anchor":"#action-controller"},{"title":"5.1 Unified Rendering","anchor":"#unified-rendering","code":["\nrender :file => '/tmp/random_file.erb'\nrender :template => 'other_controller/action'\nrender :action => 'show'\n\nrender :file => '/tmp/random_file.erb'\nrender :template => 'other_controller/action'\nrender :action => 'show'\n\nCopy\n","\nrender '/tmp/random_file.erb'\nrender 'other_controller/action'\nrender 'show'\nrender :show\n\nrender '/tmp/random_file.erb'\nrender 'other_controller/action'\nrender 'show'\nrender :show\n\nCopy\n"],"body":"ActionController::Base#render is a lot smarter about deciding what to render. Now you can just tell it what to render and expect to get the right results. In older versions of Rails, you often need to supply explicit information to render:Now in Rails 2.3, you can just supply what you want to render:Rails chooses between file, template, and action depending on whether there is a leading slash, an embedded slash, or no slash at all in what's to be rendered. Note that you can also use a symbol instead of a string when rendering an action. Other rendering styles (:inline, :text, :update, :nothing, :json, :xml, :js) still require an explicit option."},{"title":"5.2 Application Controller Renamed","anchor":"#application-controller-renamed","code":[],"body":"If you're one of the people who has always been bothered by the special-case naming of application.rb, rejoice! It's been reworked to be application_controller.rb in Rails 2.3. In addition, there's a new rake task, rake rails:update:application_controller to do this automatically for you - and it will be run as part of the normal rake rails:update process."},{"code":["\nclass PostsController < ApplicationController\n  Users = {\"dhh\" => \"secret\"}\n  before_filter :authenticate\n\n  def secret\n    render :text => \"Password Required!\"\n  end\n\n  private\n  def authenticate\n    realm = \"Application\"\n    authenticate_or_request_with_http_digest(realm) do |name|\n      Users[name]\n    end\n  end\nend\n\nclass PostsController < ApplicationController\n  Users = {\"dhh\" => \"secret\"}\n  before_filter :authenticate\n\n  def secret\n    render :text => \"Password Required!\"\n  end\n\n  private\n  def authenticate\n    realm = \"Application\"\n    authenticate_or_request_with_http_digest(realm) do |name|\n      Users[name]\n    end\n  end\nend\n\nCopy\n"],"body":"Rails now has built-in support for HTTP digest authentication. To use it, you call authenticate_or_request_with_http_digest with a block that returns the user's password (which is then hashed and compared against the transmitted credentials):","title":"5.3 HTTP Digest Authentication Support","anchor":"#http-digest-authentication-support"},{"code":[],"body":"There are a couple of significant routing changes in Rails 2.3. The formatted_ route helpers are gone, in favor just passing in :format as an option. This cuts down the route generation process by 50% for any resource - and can save a substantial amount of memory (up to 100MB on large applications). If your code uses the formatted_ helpers, it will still work for the time being - but that behavior is deprecated and your application will be more efficient if you rewrite those routes using the new standard. Another big change is that Rails now supports multiple routing files, not just routes.rb. You can use RouteSet#add_configuration_file to bring in more routes at any time - without clearing the currently-loaded routes. While this change is most useful for Engines, you can use it in any application that needs to load routes in batches.","title":"5.4 More Efficient Routing","anchor":"#more-efficient-routing"},{"code":[],"body":"A big change pushed the underpinnings of Action Controller session storage down to the Rack level. This involved a good deal of work in the code, though it should be completely transparent to your Rails applications (as a bonus, some icky patches around the old CGI session handler got removed). It's still significant, though, for one simple reason: non-Rails Rack applications have access to the same session storage handlers (and therefore the same session) as your Rails applications. In addition, sessions are now lazy-loaded (in line with the loading improvements to the rest of the framework). This means that you no longer need to explicitly disable sessions if you don't want them; just don't refer to them and they won't load.","title":"5.5 Rack-based Lazy-loaded Sessions","anchor":"#rack-based-lazy-loaded-sessions"},{"title":"5.6 MIME Type Handling Changes","anchor":"#mime-type-handling-changes","code":["\nif content_type && Mime::JS =~ content_type\n  # do something cool\nend\n\nMime::JS =~ \"text/javascript\"        => true\nMime::JS =~ \"application/javascript\" => true\n\nif content_type && Mime::JS =~ content_type\n  # do something cool\nend\n\nMime::JS =~ \"text/javascript\"        => true\nMime::JS =~ \"application/javascript\" => true\n\nCopy\n"],"body":"There are a couple of changes to the code for handling MIME types in Rails. First, MIME::Type now implements the =~ operator, making things much cleaner when you need to check for the presence of a type that has synonyms:The other change is that the framework now uses the Mime::JS when checking for JavaScript in various spots, making it handle those alternatives cleanly."},{"code":[],"body":"In some of the first fruits of the Rails-Merb team merger, Rails 2.3 includes some optimizations for the respond_to method, which is of course heavily used in many Rails applications to allow your controller to format results differently based on the MIME type of the incoming request. After eliminating a call to method_missing and some profiling and tweaking, we're seeing an 8% improvement in the number of requests per second served with a simple respond_to that switches between three formats. The best part? No change at all required to the code of your application to take advantage of this speedup.","title":"5.7 Optimization of respond_to","anchor":"#optimization-of-respond-to"},{"title":"5.8 Improved Caching Performance","anchor":"#improved-caching-performance","code":[],"body":"Rails now keeps a per-request local cache of read from the remote cache stores, cutting down on unnecessary reads and leading to better site performance. While this work was originally limited to MemCacheStore, it is available to any remote store than implements the required methods."},{"code":[],"body":"Rails can now provide localized views, depending on the locale that you have set. For example, suppose you have a Posts controller with a show action. By default, this will render app/views/posts/show.html.erb. But if you set I18n.locale = :da, it will render app/views/posts/show.da.html.erb. If the localized template isn't present, the undecorated version will be used. Rails also includes I18n#available_locales and I18n::SimpleBackend#available_locales, which return an array of the translations that are available in the current Rails project.In addition, you can use the same scheme to localize the rescue files in the public directory: public/500.da.html or public/404.en.html work, for example.","title":"5.9 Localized Views","anchor":"#localized-views"},{"title":"5.10 Partial Scoping for Translations","anchor":"#partial-scoping-for-translations","code":[],"body":"A change to the translation API makes things easier and less repetitive to write key translations within partials. If you call translate(\".foo\") from the people/index.html.erb template, you'll actually be calling I18n.translate(\"people.index.foo\") If you don't prepend the key with a period, then the API doesn't scope, just as before."},{"title":"5.11 Other Action Controller Changes","anchor":"#other-action-controller-changes","code":[],"body":""},{"code":[],"body":"Action View in Rails 2.3 picks up nested model forms, improvements to render, more flexible prompts for the date select helpers, and a speedup in asset caching, among other things.","title":"6 Action View","anchor":"#action-view"},{"title":"6.1 Nested Object Forms","anchor":"#nested-object-forms","code":["\nclass Customer < ActiveRecord::Base\n  has_many :orders\n\n  accepts_nested_attributes_for :orders, :allow_destroy => true\nend\n\nclass Customer < ActiveRecord::Base\n  has_many :orders\n\n  accepts_nested_attributes_for :orders, :allow_destroy => true\nend\n\nCopy\n","\n<% form_for @customer do |customer_form| %>\n  <div>\n    <%= customer_form.label :name, 'Customer Name:' %>\n    <%= customer_form.text_field :name %>\n  </div>\n\n  <!-- Here we call fields_for on the customer_form builder instance.\n   The block is called for each member of the orders collection. -->\n  <% customer_form.fields_for :orders do |order_form| %>\n    <p>\n      <div>\n        <%= order_form.label :number, 'Order Number:' %>\n        <%= order_form.text_field :number %>\n      </div>\n\n  <!-- The allow_destroy option in the model enables deletion of\n   child records. -->\n      <% unless order_form.object.new_record? %>\n        <div>\n          <%= order_form.label :_delete, 'Remove:' %>\n          <%= order_form.check_box :_delete %>\n        </div>\n      <% end %>\n    </p>\n  <% end %>\n\n  <%= customer_form.submit %>\n<% end %>\n\n<% form_for @customer do |customer_form| %>\n  <div>\n    <%= customer_form.label :name, 'Customer Name:' %>\n    <%= customer_form.text_field :name %>\n  </div>\n\n  <!-- Here we call fields_for on the customer_form builder instance.\n   The block is called for each member of the orders collection. -->\n  <% customer_form.fields_for :orders do |order_form| %>\n    <p>\n      <div>\n        <%= order_form.label :number, 'Order Number:' %>\n        <%= order_form.text_field :number %>\n      </div>\n\n  <!-- The allow_destroy option in the model enables deletion of\n   child records. -->\n      <% unless order_form.object.new_record? %>\n        <div>\n          <%= order_form.label :_delete, 'Remove:' %>\n          <%= order_form.check_box :_delete %>\n        </div>\n      <% end %>\n    </p>\n  <% end %>\n\n  <%= customer_form.submit %>\n<% end %>\n\nCopy\n"],"body":"Provided the parent model accepts nested attributes for the child objects (as discussed in the Active Record section), you can create nested forms using form_for and field_for. These forms can be nested arbitrarily deep, allowing you to edit complex object hierarchies on a single view without excessive code. For example, given this model:You can write this view in Rails 2.3:"},{"code":["\n# Equivalent of render :partial => 'articles/_article',\n# :object => @article\nrender @article\n\n# Equivalent of render :partial => 'articles/_article',\n# :collection => @articles\nrender @articles\n\n# Equivalent of render :partial => 'articles/_article',\n# :object => @article\nrender @article\n\n# Equivalent of render :partial => 'articles/_article',\n# :collection => @articles\nrender @articles\n\nCopy\n"],"body":"The render method has been getting smarter over the years, and it's even smarter now. If you have an object or a collection and an appropriate partial, and the naming matches up, you can now just render the object and things will work. For example, in Rails 2.3, these render calls will work in your view (assuming sensible naming):","title":"6.2 Smart Rendering of Partials","anchor":"#smart-rendering-of-partials"},{"code":["\nselect_datetime(DateTime.now, :prompt => true)\n\nselect_datetime(DateTime.now, :prompt => \"Choose date and time\")\n\nselect_datetime(DateTime.now, :prompt =>\n  {:day => 'Choose day', :month => 'Choose month',\n   :year => 'Choose year', :hour => 'Choose hour',\n   :minute => 'Choose minute'})\n\nselect_datetime(DateTime.now, :prompt => true)\n\nselect_datetime(DateTime.now, :prompt => \"Choose date and time\")\n\nselect_datetime(DateTime.now, :prompt =>\n  {:day => 'Choose day', :month => 'Choose month',\n   :year => 'Choose year', :hour => 'Choose hour',\n   :minute => 'Choose minute'})\n\nCopy\n"],"body":"In Rails 2.3, you can supply custom prompts for the various date select helpers (date_select, time_select, and datetime_select), the same way you can with collection select helpers. You can supply a prompt string or a hash of individual prompt strings for the various components. You can also just set :prompt to true to use the custom generic prompt:","title":"6.3 Prompts for Date Select Helpers","anchor":"#prompts-for-date-select-helpers"},{"code":[],"body":"You're likely familiar with Rails' practice of adding timestamps to static asset paths as a \"cache buster\". This helps ensure that stale copies of things like images and stylesheets don't get served out of the user's browser cache when you change them on the server. You can now modify this behavior with the cache_asset_timestamps configuration option for Action View. If you enable the cache, then Rails will calculate the timestamp once when it first serves an asset, and save that value. This means fewer (expensive) file system calls to serve static assets - but it also means that you can't modify any of the assets while the server is running and expect the changes to get picked up by clients.","title":"6.4 AssetTag Timestamp Caching","anchor":"#assettag-timestamp-caching"},{"title":"6.5 Asset Hosts as Objects","anchor":"#asset-hosts-as-objects","code":[],"body":"Asset hosts get more flexible in edge Rails with the ability to declare an asset host as a specific object that responds to a call. This allows you to implement any complex logic you need in your asset hosting."},{"code":["\ngrouped_options_for_select([[\"Hats\", [\"Baseball Cap\",\"Cowboy Hat\"]]],\n  \"Cowboy Hat\", \"Choose a product...\")\n\ngrouped_options_for_select([[\"Hats\", [\"Baseball Cap\",\"Cowboy Hat\"]]],\n  \"Cowboy Hat\", \"Choose a product...\")\n\nCopy\n","\n<option value=\"\">Choose a product...</option>\n<optgroup label=\"Hats\">\n  <option value=\"Baseball Cap\">Baseball Cap</option>\n  <option selected=\"selected\" value=\"Cowboy Hat\">Cowboy Hat</option>\n</optgroup>\n\n<option value=\"\">Choose a product...</option>\n<optgroup label=\"Hats\">\n  <option value=\"Baseball Cap\">Baseball Cap</option>\n  <option selected=\"selected\" value=\"Cowboy Hat\">Cowboy Hat</option>\n</optgroup>\n\nCopy\n"],"body":"Action View already had a bunch of helpers to aid in generating select controls, but now there's one more: grouped_options_for_select. This one accepts an array or hash of strings, and converts them into a string of option tags wrapped with optgroup tags. For example:returns","title":"6.6 grouped_options_for_select Helper Method","anchor":"#grouped-options-for-select-helper-method"},{"code":["\nselect(:post, :category, Post::CATEGORIES, :disabled => 'private')\n\nselect(:post, :category, Post::CATEGORIES, :disabled => 'private')\n\nCopy\n","\n<select name=\"post[category]\">\n<option>story</option>\n<option>joke</option>\n<option>poem</option>\n<option disabled=\"disabled\">private</option>\n</select>\n\n<select name=\"post[category]\">\n<option>story</option>\n<option>joke</option>\n<option>poem</option>\n<option disabled=\"disabled\">private</option>\n</select>\n\nCopy\n","\noptions_from_collection_for_select(@product.sizes, :name, :id, :disabled => lambda{|size| size.out_of_stock?})\n\noptions_from_collection_for_select(@product.sizes, :name, :id, :disabled => lambda{|size| size.out_of_stock?})\n\nCopy\n"],"body":"The form select helpers (such as select and options_for_select) now support a :disabled option, which can take a single value or an array of values to be disabled in the resulting tags:returnsYou can also use an anonymous function to determine at runtime which options from collections will be selected and/or disabled:","title":"6.7 Disabled Option Tags for Form Select Helpers","anchor":"#disabled-option-tags-for-form-select-helpers"},{"code":["\nconfig.action_view.cache_template_loading = true\n\nconfig.action_view.cache_template_loading = true\n\nCopy\n"],"body":"Rails 2.3 includes the ability to enable or disable cached templates for any particular environment. Cached templates give you a speed boost because they don't check for a new template file when they're rendered - but they also mean that you can't replace a template \"on the fly\" without restarting the server.In most cases, you'll want template caching to be turned on in production, which you can do by making a setting in your production.rb file:This line will be generated for you by default in a new Rails 2.3 application. If you've upgraded from an older version of Rails, Rails will default to caching templates in production and test but not in development.","title":"6.8 A Note About Template Loading","anchor":"#a-note-about-template-loading"},{"title":"6.9 Other Action View Changes","anchor":"#other-action-view-changes","code":[],"body":""},{"code":[],"body":"Active Support has a few interesting changes, including the introduction of Object#try.","title":"7 Active Support","anchor":"#active-support"},{"title":"7.1 Object#try","anchor":"#object-try","code":[],"body":"A lot of folks have adopted the notion of using try() to attempt operations on objects. It's especially helpful in views where you can avoid nil-checking by writing code like <%= @person.try(:name) %>. Well, now it's baked right into Rails. As implemented in Rails, it raises NoMethodError on private methods and always returns nil if the object is nil."},{"code":[],"body":"Object#tap is an addition to Ruby 1.9 and 1.8.7 that is similar to the returning method that Rails has had for a while: it yields to a block, and then returns the object that was yielded. Rails now includes code to make this available under older versions of Ruby as well.","title":"7.2 Object#tap Backport","anchor":"#object-tap-backport"},{"title":"7.3 Swappable Parsers for XMLmini","anchor":"#swappable-parsers-for-xmlmini","code":["\nXmlMini.backend = 'LibXML'\n\nXmlMini.backend = 'LibXML'\n\nCopy\n"],"body":"The support for XML parsing in Active Support has been made more flexible by allowing you to swap in different parsers. By default, it uses the standard REXML implementation, but you can easily specify the faster LibXML or Nokogiri implementations for your own applications, provided you have the appropriate gems installed:"},{"code":["\nTime.zone.now.xmlschema(6) # => \"2009-01-16T13:00:06.13653Z\"\n\nTime.zone.now.xmlschema(6) # => \"2009-01-16T13:00:06.13653Z\"\n\nCopy\n"],"body":"The Time and TimeWithZone classes include an xmlschema method to return the time in an XML-friendly string. As of Rails 2.3, TimeWithZone supports the same argument for specifying the number of digits in the fractional second part of the returned string that Time does:","title":"7.4 Fractional seconds for TimeWithZone","anchor":"#fractional-seconds-for-timewithzone"},{"code":[],"body":"If you look up the spec on the \"json.org\" site, you'll discover that all keys in a JSON structure must be strings, and they must be quoted with double quotes. Starting with Rails 2.3, we do the right thing here, even with numeric keys.","title":"7.5 JSON Key Quoting","anchor":"#json-key-quoting"},{"title":"7.6 Other Active Support Changes","anchor":"#other-active-support-changes","code":[],"body":""},{"code":[],"body":"In addition to the Rack changes covered above, Railties (the core code of Rails itself) sports a number of significant changes, including Rails Metal, application templates, and quiet backtraces.","title":"8 Railties","anchor":"#railties"},{"title":"8.1 Rails Metal","anchor":"#rails-metal","code":[],"body":"Rails Metal is a new mechanism that provides superfast endpoints inside of your Rails applications. Metal classes bypass routing and Action Controller to give you raw speed (at the cost of all the things in Action Controller, of course). This builds on all of the recent foundation work to make Rails a Rack application with an exposed middleware stack. Metal endpoints can be loaded from your application or from plugins."},{"code":["\n$ rake rails:template LOCATION=~/template.rb\n\nrake rails:template LOCATION=~/template.rb\n\nCopy\n"],"body":"Rails 2.3 incorporates Jeremy McAnally's rg application generator. What this means is that we now have template-based application generation built right into Rails; if you have a set of plugins you include in every application (among many other use cases), you can just set up a template once and use it over and over again when you run the rails command. There's also a rake task to apply a template to an existing application:This will layer the changes from the template on top of whatever code the project already contains.","title":"8.2 Application Templates","anchor":"#application-templates"},{"code":[],"body":"Building on thoughtbot's Quiet Backtrace plugin, which allows you to selectively remove lines from Test::Unit backtraces, Rails 2.3 implements ActiveSupport::BacktraceCleaner and Rails::BacktraceCleaner in core. This supports both filters (to perform regex-based substitutions on backtrace lines) and silencers (to remove backtrace lines entirely). Rails automatically adds silencers to get rid of the most common noise in a new application, and builds a config/backtrace_silencers.rb file to hold your own additions. This feature also enables prettier printing from any gem in the backtrace.","title":"8.3 Quieter Backtraces","anchor":"#quieter-backtraces"},{"title":"8.4 Faster Boot Time in Development Mode with Lazy Loading/Autoload","anchor":"#faster-boot-time-in-development-mode-with-lazy-loading-autoload","code":[],"body":"Quite a bit of work was done to make sure that bits of Rails (and its dependencies) are only brought into memory when they're actually needed. The core frameworks - Active Support, Active Record, Action Controller, Action Mailer, and Action View - are now using autoload to lazy-load their individual classes. This work should help keep the memory footprint down and improve overall Rails performance.You can also specify (by using the new preload_frameworks option) whether the core libraries should be autoloaded at startup. This defaults to false so that Rails autoloads itself piece-by-piece, but there are some circumstances where you still need to bring in everything at once - Passenger and JRuby both want to see all of Rails loaded together."},{"title":"8.5 rake gem Task Rewrite","anchor":"#rake-gem-task-rewrite","code":[],"body":"The internals of the various rake gem tasks have been substantially revised, to make the system work better for a variety of cases. The gem system now knows the difference between development and runtime dependencies, has a more robust unpacking system, gives better information when querying for the status of gems, and is less prone to \"chicken and egg\" dependency issues when you're bringing things up from scratch. There are also fixes for using gem commands under JRuby and for dependencies that try to bring in external copies of gems that are already vendored."},{"code":[],"body":"","title":"8.6 Other Railties Changes","anchor":"#other-railties-changes"},{"code":[],"body":"A few pieces of older code are deprecated in this release:","title":"9 Deprecated","anchor":"#deprecated"},{"code":[],"body":"Release notes compiled by Mike Gunderloy. This version of the Rails 2.3 release notes was compiled based on RC2 of Rails 2.3.","title":"10 Credits","anchor":"#credits"}]