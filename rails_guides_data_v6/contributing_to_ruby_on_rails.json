[{"code":[],"body":"Ruby on Rails uses GitHub Issue Tracking to track issues (primarily bugs and contributions of new code). If you've found a bug in Ruby on Rails, this is the place to start. You'll need to create a (free) GitHub account in order to submit an issue, to comment on them, or to create pull requests.","title":"1 Reporting an Issue","anchor":"#reporting-an-issue"},{"title":"1.1 Creating a Bug Report","anchor":"#creating-a-bug-report","code":[],"body":"If you've found a problem in Ruby on Rails which is not a security risk, do a search on GitHub under Issues in case it has already been reported. If you are unable to find any open GitHub issues addressing the problem you found, your next step will be to open a new one. (See the next section for reporting security issues.)Your issue report should contain a title and a clear description of the issue at the bare minimum. You should include as much relevant information as possible and should at least post a code sample that demonstrates the issue. It would be even better if you could include a unit test that shows how the expected behavior is not occurring. Your goal should be to make it easy for yourself - and others - to reproduce the bug and figure out a fix.Then, don't get your hopes up! Unless you have a \"Code Red, Mission Critical, the World is Coming to an End\" kind of bug, you're creating this issue report in the hope that others with the same problem will be able to collaborate with you on solving it. Do not expect that the issue report will automatically see any activity or that others will jump to fix it. Creating an issue like this is mostly to help yourself start on the path of fixing the problem and for others to confirm it with an \"I'm having this problem too\" comment."},{"title":"1.2 Create an Executable Test Case","anchor":"#create-an-executable-test-case","code":[],"body":"Having a way to reproduce your issue will be very helpful for others to help confirm, investigate, and ultimately fix your issue. You can do this by providing an executable test case. To make this process easier, we have prepared several bug report templates for you to use as a starting point:These templates include the boilerplate code to set up a test case against either a released version of Rails (*_gem.rb) or edge Rails (*_main.rb).Copy the content of the appropriate template into a .rb file and make the necessary changes to demonstrate the issue. You can execute it by running ruby the_file.rb in your terminal. If all goes well, you should see your test case failing.You can then share your executable test case as a gist, or paste the content into the issue description."},{"title":"1.3 Special Treatment for Security Issues","anchor":"#special-treatment-for-security-issues","code":[],"body":""},{"title":"1.4 What about Feature Requests?","anchor":"#what-about-feature-requests-questionmark","code":[],"body":"Please don't put \"feature request\" items into GitHub Issues. If there's a new\nfeature that you want to see added to Ruby on Rails, you'll need to write the\ncode yourself - or convince someone else to partner with you to write the code.\nLater in this guide, you'll find detailed instructions for proposing a patch to\nRuby on Rails. If you enter a wish list item in GitHub Issues with no code, you\ncan expect it to be marked \"invalid\" as soon as it's reviewed.Sometimes, the line between 'bug' and 'feature' is a hard one to draw.\nGenerally, a feature is anything that adds new behavior, while a bug is\nanything that causes incorrect behavior. Sometimes,\nthe core team will have to make a judgment call. That said, the distinction\ngenerally just affects which release your patch will get in to; we love feature\nsubmissions! They just won't get backported to maintenance branches.If you'd like feedback on an idea for a feature before doing the work to make\na patch, please send an email to the rails-core mailing\nlist. You\nmight get no response, which means that everyone is indifferent. You might find\nsomeone who's also interested in building that feature. You might get a \"This\nwon't be accepted\". But it's the proper place to discuss new ideas. GitHub\nIssues are not a particularly good venue for the sometimes long and involved\ndiscussions new features require."},{"title":"2 Helping to Resolve Existing Issues","anchor":"#helping-to-resolve-existing-issues","code":[],"body":"As a next step beyond reporting issues, you can help the core team resolve existing ones by providing feedback about them. If you are new to Rails core development, that might be a great way to walk your first steps, you'll get familiar with the code base and the processes.If you check the issues list in GitHub Issues, you'll find lots of issues already requiring attention. What can you do for these? Quite a bit, actually:"},{"title":"2.1 Verifying Bug Reports","anchor":"#verifying-bug-reports","code":[],"body":"For starters, it helps just to verify bug reports. Can you reproduce the reported issue on your own computer? If so, you can add a comment to the issue saying that you're seeing the same thing.If an issue is very vague, can you help narrow it down to something more specific? Maybe you can provide additional information to help reproduce a bug, or help by eliminating needless steps that aren't required to demonstrate the problem.If you find a bug report without a test, it's very useful to contribute a failing test. This is also a great way to get started exploring the source code: looking at the existing test files will teach you how to write more tests. New tests are best contributed in the form of a patch, as explained later on in the \"Contributing to the Rails Code\" section.Anything you can do to make bug reports more succinct or easier to reproduce helps folks trying to write code to fix those bugs - whether you end up writing the code yourself or not."},{"title":"2.2 Testing Patches","anchor":"#testing-patches","code":["\n$ git checkout -b testing_branch\n\ngit checkout -b testing_branch\n\nCopy\n","\n$ git remote add JohnSmith https://github.com/JohnSmith/rails.git\n$ git pull JohnSmith orange\n\ngit remote add JohnSmith https://github.com/JohnSmith/rails.git\ngit pull JohnSmith orange\n\nCopy\n"],"body":"You can also help out by examining pull requests that have been submitted to Ruby on Rails via GitHub. In order to apply someone's changes, you need to first create a dedicated branch:Then, you can use their remote branch to update your codebase. For example, let's say the GitHub user JohnSmith has forked and pushed to a topic branch \"orange\" located at https://github.com/JohnSmith/rails.After applying their branch, test it out! Here are some things to think about:Once you're happy that the pull request contains a good change, comment on the GitHub issue indicating your approval. Your comment should indicate that you like the change and what you like about it. Something like:If your comment simply reads \"+1\", then odds are that other reviewers aren't going to take it too seriously. Show that you took the time to review the pull request."},{"title":"3 Contributing to the Rails Documentation","anchor":"#contributing-to-the-rails-documentation","code":[],"body":"Ruby on Rails has two main sets of documentation: the guides, which help you\nlearn about Ruby on Rails, and the API, which serves as a reference.You can help improve the Rails guides or the API reference by making them more coherent, consistent, or readable, adding missing information, correcting factual errors, fixing typos, or bringing them up to date with the latest edge Rails.To do so, make changes to Rails guides source files (located here on GitHub) or RDoc comments in source code. Then open a pull request to apply your changes to the main branch.When working with documentation, please take into account the API Documentation Guidelines and the Ruby on Rails Guides Guidelines."},{"title":"4 Translating Rails Guides","anchor":"#translating-rails-guides","code":["\n# only install gems necessary for the guides. To undo run: bundle config --delete without\n$ bundle install --without job cable storage ujs test db\n$ cd guides/\n$ bundle exec rake guides:generate:html GUIDES_LANGUAGE=it-IT\n\nbundle install --without job cable storage ujs test db\ncd guides/\nbundle exec rake guides:generate:html GUIDES_LANGUAGE=it-IT\n\nCopy\n"],"body":"We are happy to have people volunteer to translate the Rails guides. Just follow these steps:Note that translations are not submitted to the Rails repository. As detailed above, your work happens in a fork. This is so because in practice documentation maintenance via patches is only sustainable in English.To generate the guides in HTML format you will need to install the guides dependencies, cd into the guides directory, and then run (e.g. for it-IT):This will generate the guides in an output directory.Translation efforts we know about (various versions):"},{"code":[],"body":"","title":"5 Contributing to the Rails Code","anchor":"#contributing-to-the-rails-code"},{"title":"5.1 Setting Up a Development Environment","anchor":"#setting-up-a-development-environment","code":[],"body":"To move on from submitting bugs to helping resolve existing issues or contributing your own code to Ruby on Rails, you must be able to run its test suite. In this section of the guide, you'll learn how to set up the tests on your own computer."},{"title":"5.1.1 The Easy Way","anchor":"#the-easy-way","code":[],"body":"The easiest and recommended way to get a development environment ready to hack is to use the rails-dev-box."},{"title":"5.1.2 The Hard Way","anchor":"#the-hard-way","code":[],"body":"In case you can't use the Rails development box, see this other guide."},{"title":"5.2 Clone the Rails Repository","anchor":"#clone-the-rails-repository","code":["\n$ git clone https://github.com/rails/rails.git\n\ngit clone https://github.com/rails/rails.git\n\nCopy\n","\n$ cd rails\n$ git checkout -b my_new_branch\n\ncd rails\ngit checkout -b my_new_branch\n\nCopy\n"],"body":"To be able to contribute code, you need to clone the Rails repository:and create a dedicated branch:It doesn't matter much what name you use, because this branch will only exist on your local computer and your personal repository on GitHub. It won't be part of the Rails Git repository."},{"title":"5.3 Bundle install","anchor":"#bundle-install","code":["\n$ bundle install\n\nbundle install\n\nCopy\n"],"body":"Install the required gems."},{"code":["\n$ cd rails\n$ bundle exec rails new ~/my-test-app --dev\n\ncd rails\nbundle exec rails new ~/my-test-app --dev\n\nCopy\n"],"body":"In case you need a dummy Rails app to test changes, the --dev flag of rails new generates an application that uses your local branch:The application generated in ~/my-test-app runs against your local branch\nand in particular sees any modifications upon server reboot.","title":"5.4 Running an Application Against Your Local Branch","anchor":"#running-an-application-against-your-local-branch"},{"title":"5.5 Write Your Code","anchor":"#write-your-code","code":[],"body":"Now get busy and add/edit code. You're on your branch now, so you can write whatever you want (make sure you're on the right branch with git branch -a). But if you're planning to submit your change back for inclusion in Rails, keep a few things in mind:"},{"title":"5.5.1 Follow the Coding Conventions","anchor":"#follow-the-coding-conventions","code":["\n$ rubocop actionpack/lib/action_controller/metal/strong_parameters.rb\nInspecting 1 file\n.\n\n1 file inspected, no offenses detected\n\nrubocop actionpack/lib/action_controller/metal/strong_parameters.rb\n\nCopy\n"],"body":"Rails follows a simple set of coding style conventions:The above are guidelines - please use your best judgment in using them.Additionally, we have RuboCop rules defined to codify some of our coding conventions. You can run RuboCop locally against the file that you have modified before submitting a pull request:For rails-ujs CoffeeScript and JavaScript files, you can run npm run lint in actionview folder."},{"title":"5.6 Benchmark Your Code","anchor":"#benchmark-your-code","code":[],"body":"For changes that might have an impact on performance, please benchmark your\ncode and measure the impact. Please share the benchmark script you used as well\nas the results. You should consider including this information in your commit\nmessage, which allows future contributors to easily verify your findings and\ndetermine if they are still relevant. (For example, future optimizations in the\nRuby VM might render certain optimizations unnecessary.)It is very easy to make an optimization that improves performance for a\nspecific scenario you care about but regresses on other common cases.\nTherefore, you should test your change against a list of representative\nscenarios. Ideally, they should be based on real-world scenarios extracted\nfrom production applications.You can use the benchmark template\nas a starting point. It includes the boilerplate code to set up a benchmark\nusing the benchmark-ips gem. The\ntemplate is designed for testing relatively self-contained changes that can be\ninlined into the script."},{"title":"5.7 Running Tests","anchor":"#running-tests","code":[],"body":"It is not customary in Rails to run the full test suite before pushing\nchanges. The railties test suite in particular takes a long time, and takes an\nespecially long time if the source code is mounted in /vagrant as happens in\nthe recommended workflow with the rails-dev-box.As a compromise, test what your code obviously affects, and if the change is\nnot in railties, run the whole test suite of the affected component. If all\ntests are passing, that's enough to propose your contribution. We have\nBuildkite as a safety net for catching\nunexpected breakages elsewhere."},{"title":"5.7.1 Entire Rails:","anchor":"#entire-rails","code":["\n$ cd rails\n$ bundle exec rake test\n\ncd rails\nbundle exec rake test\n\nCopy\n"],"body":"To run all the tests, do:"},{"code":["\n$ cd actionmailer\n$ bundle exec rake test\n\ncd actionmailer\nbundle exec rake test\n\nCopy\n"],"body":"You can run tests only for a particular component (e.g. Action Pack). For example,\nto run Action Mailer tests:","title":"5.7.2 For a Particular Component","anchor":"#for-a-particular-component"},{"code":["\n$ cd railties\n$ TEST_DIR=generators bundle exec rake test\n\ncd railties\nTEST_DIR=generators bundle exec rake test\n\nCopy\n"],"body":"If you want to run the tests located in a specific directory use the TEST_DIR\nenvironment variable. For example, this will run the tests in the\nrailties/test/generators directory only:","title":"5.7.3 For a Specific Directory","anchor":"#for-a-specific-directory"},{"code":["\n$ cd actionview\n$ bundle exec ruby -w -Itest test/template/form_helper_test.rb\n\ncd actionview\nbundle exec ruby -w -Itest test/template/form_helper_test.rb\n\nCopy\n"],"body":"You can run the tests for a particular file by using:","title":"5.7.4 For a Specific File","anchor":"#for-a-specific-file"},{"code":["\n$ cd actionmailer\n$ bundle exec ruby -w -Itest test/mail_layout_test.rb -n test_explicit_class_layout\n\ncd actionmailer\nbundle exec ruby -w -Itest test/mail_layout_test.rb -n test_explicit_class_layout\n\nCopy\n"],"body":"You can run a single test through ruby. For instance:The -n option allows you to run a single method instead of the whole file.","title":"5.7.5 Running a Single Test","anchor":"#running-a-single-test"},{"title":"5.7.6 Running Tests with a Specific Seed","anchor":"#running-tests-with-a-specific-seed","code":["\n$ cd actionmailer\n$ SEED=15002 bundle exec rake test\n\ncd actionmailer\nSEED=15002 bundle exec rake test\n\nCopy\n","\n$ cd actionmailer\n$ SEED=15002 bundle exec ruby -w -Itest test/mail_layout_test.rb\n\ncd actionmailer\nSEED=15002 bundle exec ruby -w -Itest test/mail_layout_test.rb\n\nCopy\n"],"body":"Test execution is randomized with a randomization seed. If you are experiencing random\ntest failures you can more accurately reproduce a failing test scenario by specifically\nsetting the randomization seed.Running all tests for a component:Running a single test file:"},{"code":["\n$ cd actionview\n$ PARALLEL_WORKERS=1 SEED=53708 bundle exec ruby -w -Itest test/template/test_case_test.rb\n\ncd actionview\nPARALLEL_WORKERS=1 SEED=53708 bundle exec ruby -w -Itest test/template/test_case_test.rb\n\nCopy\n"],"body":"Action Pack and Action View unit tests run in parallel by default. If you are experiencing random\ntest failures you can set the randomization seed and let these unit tests run in serial by setting PARALLEL_WORKERS=1","title":"5.7.7 Running Tests in Serial","anchor":"#running-tests-in-serial"},{"code":["\n$ cd activerecord\n$ bundle exec rake db:mysql:build\n\ncd activerecord\nbundle exec rake db:mysql:build\n\nCopy\n","\n$ cd activerecord\n$ bundle exec rake db:postgresql:build\n\ncd activerecord\nbundle exec rake db:postgresql:build\n\nCopy\n","\n$ cd activerecord\n$ bundle exec rake test:sqlite3\n\ncd activerecord\nbundle exec rake test:sqlite3\n\nCopy\n","\n$ bundle exec rake test:mysql2\n$ bundle exec rake test:postgresql\n\nbundle exec rake test:mysql2\nbundle exec rake test:postgresql\n\nCopy\n","\n$ bundle exec rake test\n\nbundle exec rake test\n\nCopy\n","\n$ ARCONN=sqlite3 bundle exec ruby -Itest test/cases/associations/has_many_associations_test.rb\n\nARCONN=sqlite3 bundle exec ruby -Itest test/cases/associations/has_many_associations_test.rb\n\nCopy\n","\n$ bundle exec rake TEST=test/cases/associations/has_many_associations_test.rb\n\nbundle exec rake TEST=test/cases/associations/has_many_associations_test.rb\n\nCopy\n"],"body":"First, create the databases you'll need. You can find a list of the required\ntable names, usernames, and passwords in activerecord/test/config.example.yml.For MySQL and PostgreSQL, it is sufficient to run:Or:This is not necessary for SQLite3.This is how you run the Active Record test suite only for SQLite3:You can now run the tests as you did for sqlite3. The tasks are respectively:Finally,will now run the three of them in turn.You can also run any single test separately:To run a single test against all adapters, use:You can invoke test_jdbcmysql, test_jdbcsqlite3 or test_jdbcpostgresql also. See the file activerecord/RUNNING_UNIT_TESTS.rdoc for information on running more targeted database tests.","title":"5.7.8 Testing Active Record","anchor":"#testing-active-record"},{"title":"5.8 Warnings","anchor":"#warnings","code":[],"body":"The test suite runs with warnings enabled. Ideally, Ruby on Rails should issue no warnings, but there may be a few, as well as some from third-party libraries. Please ignore (or fix!) them, if any, and submit patches that do not issue new warnings."},{"title":"5.9 Updating the CHANGELOG","anchor":"#updating-the-changelog","code":["\n*   Summary of a change that briefly describes what was changed. You can use multiple\n    lines and wrap them at around 80 characters. Code examples are ok, too, if needed:\n\n        class Foo\n          def bar\n            puts 'baz'\n          end\n        end\n\n    You can continue after the code example and you can attach issue number.\n\n    Fixes #1234.\n\n    *Your Name*\n\n*   Summary of a change that briefly describes what was changed. You can use multiple\n    lines and wrap them at around 80 characters. Code examples are ok, too, if needed:\n\n        class Foo\n          def bar\n            puts 'baz'\n          end\n        end\n\n    You can continue after the code example and you can attach issue number.\n\n    Fixes #1234.\n\n    *Your Name*\n\nCopy\n"],"body":"The CHANGELOG is an important part of every release. It keeps the list of changes for every Rails version.You should add an entry to the top of the CHANGELOG of the framework that you modified if you're adding or removing a feature, committing a bug fix, or adding deprecation notices. Refactorings and documentation changes generally should not go to the CHANGELOG.A CHANGELOG entry should summarize what was changed and should end with the author's name. You can use multiple lines if you need more space and you can attach code examples indented with 4 spaces. If a change is related to a specific issue, you should attach the issue's number. Here is an example CHANGELOG entry:Your name can be added directly after the last word if there are no code\nexamples or multiple paragraphs. Otherwise, it's best to make a new paragraph."},{"title":"5.10 Updating the Gemfile.lock","anchor":"#updating-the-gemfile-lock","code":[],"body":"Some changes require the dependencies to be upgraded. In these cases make sure you run bundle update to get the right version of the dependency and commit the Gemfile.lock file within your changes."},{"title":"5.11 Commit Your Changes","anchor":"#commit-your-changes","code":["\n$ git commit -a\n\ngit commit -a\n\nCopy\n","\nShort summary (ideally 50 characters or less)\n\nMore detailed description, if necessary. It should be wrapped to\n72 characters. Try to be as descriptive as you can. Even if you\nthink that the commit content is obvious, it may not be obvious\nto others. Add any description that is already present in the\nrelevant issues; it should not be necessary to visit a webpage\nto check the history.\n\nThe description section can have multiple paragraphs.\n\nCode examples can be embedded by indenting them with 4 spaces:\n\n    class ArticlesController\n      def index\n        render json: Article.limit(10)\n      end\n    end\n\nYou can also add bullet points:\n\n- make a bullet point by starting a line with either a dash (-)\n  or an asterisk (*)\n\n- wrap lines at 72 characters, and indent any additional lines\n  with 2 spaces for readability\n\nShort summary (ideally 50 characters or less)\n\nMore detailed description, if necessary. It should be wrapped to\n72 characters. Try to be as descriptive as you can. Even if you\nthink that the commit content is obvious, it may not be obvious\nto others. Add any description that is already present in the\nrelevant issues; it should not be necessary to visit a webpage\nto check the history.\n\nThe description section can have multiple paragraphs.\n\nCode examples can be embedded by indenting them with 4 spaces:\n\n    class ArticlesController\n      def index\n        render json: Article.limit(10)\n      end\n    end\n\nYou can also add bullet points:\n\n- make a bullet point by starting a line with either a dash (-)\n  or an asterisk (*)\n\n- wrap lines at 72 characters, and indent any additional lines\n  with 2 spaces for readability\n\nCopy\n"],"body":"When you're happy with the code on your computer, you need to commit the changes to Git:This should fire up your editor to write a commit message. When you have\nfinished, save and close to continue.A well-formatted and descriptive commit message is very helpful to others for\nunderstanding why the change was made, so please take the time to write it.A good commit message looks like this:"},{"title":"5.12 Update Your Branch","anchor":"#update-your-branch","code":["\n$ git checkout main\n$ git pull --rebase\n\ngit checkout main\ngit pull --rebase\n\nCopy\n","\n$ git checkout my_new_branch\n$ git rebase main\n\ngit checkout my_new_branch\ngit rebase main\n\nCopy\n"],"body":"It's pretty likely that other changes to main have happened while you were working. Go get them:Now reapply your patch on top of the latest changes:No conflicts? Tests still pass? Change still seems reasonable to you? Then move on."},{"title":"5.13 Fork","anchor":"#fork","code":["\n$ git remote add fork https://github.com/<your user name>/rails.git\n\ngit remote add fork https://github.com/<your user name>/rails.git\n\nCopy\n","\n$ git remote add rails https://github.com/rails/rails.git\n\ngit remote add rails https://github.com/rails/rails.git\n\nCopy\n","\n$ git fetch rails\n\ngit fetch rails\n\nCopy\n","\n$ git checkout main\n$ git rebase rails/main\n$ git checkout my_new_branch\n$ git rebase rails/main\n\ngit checkout main\ngit rebase rails/main\ngit checkout my_new_branch\ngit rebase rails/main\n\nCopy\n","\n$ git push fork main\n$ git push fork my_new_branch\n\ngit push fork main\ngit push fork my_new_branch\n\nCopy\n"],"body":"Navigate to the Rails GitHub repository and press \"Fork\" in the upper right hand corner.Add the new remote to your local repository on your local machine:You may have cloned your local repository from rails/rails or you may have cloned from your forked repository. To avoid ambiguity the following git commands assume that you have made a \"rails\" remote that points to rails/rails.Download new commits and branches from the official repository:Merge the new content:Update your fork:"},{"code":[],"body":"Navigate to the Rails repository you just pushed to (e.g.\nhttps://github.com/your-user-name/rails) and click on \"Pull Requests\" seen in\nthe right panel. On the next page, press \"New pull request\" in the upper right\nhand corner.Click on \"Edit\", if you need to change the branches being compared (it compares\n\"main\" by default) and press \"Click to create a pull request for this\ncomparison\".Ensure the changesets you introduced are included. Fill in some details about\nyour potential patch including a meaningful title. When finished, press \"Send\npull request\". The Rails core team will be notified about your submission.","title":"5.14 Issue a Pull Request","anchor":"#issue-a-pull-request"},{"title":"5.15 Get some Feedback","anchor":"#get-some-feedback","code":[],"body":"Most pull requests will go through a few iterations before they get merged.\nDifferent contributors will sometimes have different opinions, and often\npatches will need to be revised before they can get merged.Some contributors to Rails have email notifications from GitHub turned on, but\nothers do not. Furthermore, (almost) everyone who works on Rails is a\nvolunteer, and so it may take a few days for you to get your first feedback on\na pull request. Don't despair! Sometimes it's quick, sometimes it's slow. Such\nis the open source life.If it's been over a week, and you haven't heard anything, you might want to try\nand nudge things along. You can use the rubyonrails-core mailing\nlist for this. You can also\nleave another comment on the pull request.While you're waiting for feedback on your pull request, open up a few other\npull requests and give someone else some! I'm sure they'll appreciate it in\nthe same way that you appreciate feedback on your patches.Note that your pull request may be marked as \"Approved\" by somebody who does not\nhave access to merge it. Further changes may still be required before members of\nthe core or committer teams accept it. To prevent confusion, when giving\nfeedback on someone else's pull request please avoid marking it as \"Approved.\""},{"title":"5.16 Iterate as Necessary","anchor":"#iterate-as-necessary","code":[],"body":"It's entirely possible that the feedback you get will suggest changes. Don't get discouraged: the whole point of contributing to an active open source project is to tap into the knowledge of the community. If people are encouraging you to tweak your code, then it's worth making the tweaks and resubmitting. If the feedback is that your code doesn't belong in the core, you might still think about releasing it as a gem."},{"title":"5.16.1 Squashing Commits","anchor":"#squashing-commits","code":["\n$ git fetch rails\n$ git checkout my_new_branch\n$ git rebase -i rails/main\n\n< Choose 'squash' for all of your commits except the first one. >\n< Edit the commit message to make sense, and describe all your changes. >\n\n$ git push fork my_new_branch --force-with-lease\n\ngit fetch rails\ngit checkout my_new_branch\ngit rebase -i rails/main\ngit push fork my_new_branch --force-with-lease\n\nCopy\n"],"body":"One of the things that we may ask you to do is to \"squash your commits\", which\nwill combine all of your commits into a single commit. We prefer pull requests\nthat are a single commit. This makes it easier to backport changes to stable\nbranches, squashing makes it easier to revert bad commits, and the git history\ncan be a bit easier to follow. Rails is a large project, and a bunch of\nextraneous commits can add a lot of noise.You should be able to refresh the pull request on GitHub and see that it has\nbeen updated."},{"title":"5.16.2 Updating a Pull Request","anchor":"#updating-a-pull-request","code":["\n$ git push fork my_new_branch --force-with-lease\n\ngit push fork my_new_branch --force-with-lease\n\nCopy\n"],"body":"Sometimes you will be asked to make some changes to the code you have\nalready committed. This can include amending existing commits. In this\ncase Git will not allow you to push the changes as the pushed branch\nand local branch do not match. Instead of opening a new pull request,\nyou can force push to your branch on GitHub as described earlier in\nsquashing commits section:This will update the branch and pull request on GitHub with your new code.\nBy force pushing with --force-with-lease, git will more safely update\nthe remote than with a typical -f, which can delete work from the remote\nthat you don't already have."},{"title":"5.17 Older Versions of Ruby on Rails","anchor":"#older-versions-of-ruby-on-rails","code":["\n$ git branch --track 4-0-stable rails/4-0-stable\n$ git checkout 4-0-stable\n\ngit branch --track 4-0-stable rails/4-0-stable\ngit checkout 4-0-stable\n\nCopy\n"],"body":"If you want to add a fix to older versions of Ruby on Rails, you'll need to set up and switch to your own local tracking branch. Here is an example to switch to the 4-0-stable branch:"},{"title":"5.17.1 Backporting","anchor":"#backporting","code":["\n$ git log main..HEAD\n\ngit log main..HEAD\n\nCopy\n","\n$ git format-patch main --stdout > ~/my_changes.patch\n\ngit format-patch main --stdout > ~/my_changes.patch\n\nCopy\n","\n$ git checkout -b my_backport_branch 4-2-stable\n$ git apply ~/my_changes.patch\n\ngit checkout -b my_backport_branch 4-2-stable\ngit apply ~/my_changes.patch\n\nCopy\n"],"body":"Changes that are merged into main are intended for the next major release of Rails. Sometimes, it might be beneficial for your changes to propagate back to the maintenance releases for older stable branches. Generally, security fixes and bug fixes are good candidates for a backport, while new features and patches that introduce a change in behavior will not be accepted. When in doubt, it is best to consult a Rails team member before backporting your changes to avoid wasted effort.For simple fixes, the easiest way to backport your changes is to extract a diff from your changes in main and apply them to the target branch.First, make sure your changes are the only difference between your current branch and main:Then extract the diff:Switch over to the target branch and apply your changes:This works well for simple changes. However, if your changes are complicated or if the code in main has deviated significantly from your target branch, it might require more work on your part. The difficulty of a backport varies greatly from case to case, and sometimes it is simply not worth the effort.Once you have resolved all conflicts and made sure all the tests are passing, push your changes and open a separate pull request for your backport. It is also worth noting that older branches might have a different set of build targets than main. When possible, it is best to first test your backport locally against the oldest Ruby version permitted by the target branch's rails.gemspec before submitting your pull request.And then... think about your next contribution!"},{"title":"6 Rails Contributors","anchor":"#rails-contributors","code":[],"body":"All contributions get credit in Rails Contributors."}]