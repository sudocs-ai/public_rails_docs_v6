[{"code":[],"body":"Traditionally, when people said that they used Rails as an \"API\", they meant\nproviding a programmatically accessible API alongside their web application.\nFor example, GitHub provides an API that you\ncan use from your own custom clients.With the advent of client-side frameworks, more developers are using Rails to\nbuild a back-end that is shared between their web application and other native\napplications.For example, Twitter uses its public API in its web\napplication, which is built as a static site that consumes JSON resources.Instead of using Rails to generate HTML that communicates with the server\nthrough forms and links, many developers are treating their web application as\njust an API client delivered as HTML with JavaScript that consumes a JSON API.This guide covers building a Rails application that serves JSON resources to an\nAPI client, including client-side frameworks.","title":"1 What is an API Application?","anchor":"#what-is-an-api-application-questionmark"},{"title":"2 Why Use Rails for JSON APIs?","anchor":"#why-use-rails-for-json-apis-questionmark","code":[],"body":"The first question a lot of people have when thinking about building a JSON API\nusing Rails is: \"isn't using Rails to spit out some JSON overkill? Shouldn't I\njust use something like Sinatra?\".For very simple APIs, this may be true. However, even in very HTML-heavy\napplications, most of an application's logic lives outside of the view\nlayer.The reason most people use Rails is that it provides a set of defaults that\nallows developers to get up and running quickly, without having to make a lot of trivial\ndecisions.Let's take a look at some of the things that Rails provides out of the box that are\nstill applicable to API applications.Handled at the middleware layer:While you could obviously build these up in terms of existing Rack middleware,\nthis list demonstrates that the default Rails middleware stack provides a lot\nof value, even if you're \"just generating JSON\".Handled at the Action Pack layer:Of course, the Rails boot process also glues together all registered components.\nFor example, the Rails boot process is what uses your config/database.yml file\nwhen configuring Active Record.The short version is: you may not have thought about which parts of Rails\nare still applicable even if you remove the view layer, but the answer turns out\nto be most of it."},{"title":"3 The Basic Configuration","anchor":"#the-basic-configuration","code":[],"body":"If you're building a Rails application that will be an API server first and\nforemost, you can start with a more limited subset of Rails and add in features\nas needed."},{"title":"3.1 Creating a new application","anchor":"#creating-a-new-application","code":["\n$ rails new my_api --api\n\nrails new my_api --api\n\nCopy\n"],"body":"You can generate a new api Rails app:This will do three main things for you:"},{"code":["\nconfig.api_only = true\n\nconfig.api_only = true\n\nCopy\n","\nconfig.debug_exception_response_format = :default\n\nconfig.debug_exception_response_format = :default\n\nCopy\n","\nconfig.debug_exception_response_format = :api\n\nconfig.debug_exception_response_format = :api\n\nCopy\n","\nclass ApplicationController < ActionController::Base\nend\n\nclass ApplicationController < ActionController::Base\nend\n\nCopy\n","\nclass ApplicationController < ActionController::API\nend\n\nclass ApplicationController < ActionController::API\nend\n\nCopy\n"],"body":"If you want to take an existing application and make it an API one, read the\nfollowing steps.In config/application.rb add the following line at the top of the Application\nclass definition:In config/environments/development.rb, set config.debug_exception_response_format\nto configure the format used in responses when errors occur in development mode.To render an HTML page with debugging information, use the value :default.To render debugging information preserving the response format, use the value :api.By default, config.debug_exception_response_format is set to :api, when config.api_only is set to true.Finally, inside app/controllers/application_controller.rb, instead of:do:","title":"3.2 Changing an existing application","anchor":"#changing-an-existing-application"},{"code":["\n$ bin/rails middleware\n\nbin/rails middleware\n\nCopy\n"],"body":"An API application comes with the following middleware by default:See the internal middleware\nsection of the Rack guide for further information on them.Other plugins, including Active Record, may add additional middleware. In\ngeneral, these middleware are agnostic to the type of application you are\nbuilding, and make sense in an API-only Rails application.You can get a list of all middleware in your application via:","title":"4 Choosing Middleware","anchor":"#choosing-middleware"},{"code":["\ndef show\n  @post = Post.find(params[:id])\n\n  if stale?(last_modified: @post.updated_at)\n    render json: @post\n  end\nend\n\ndef show\n  @post = Post.find(params[:id])\n\n  if stale?(last_modified: @post.updated_at)\n    render json: @post\n  end\nend\n\nCopy\n","\ndef show\n  @post = Post.find(params[:id])\n\n  if stale?(last_modified: @post.updated_at, public: true)\n    render json: @post\n  end\nend\n\ndef show\n  @post = Post.find(params[:id])\n\n  if stale?(last_modified: @post.updated_at, public: true)\n    render json: @post\n  end\nend\n\nCopy\n"],"body":"By default, Rails will add a middleware that provides a cache store based on\nthe configuration of your application (memcache by default). This means that\nthe built-in HTTP cache will rely on it.For instance, using the stale? method:The call to stale? will compare the If-Modified-Since header in the request\nwith @post.updated_at. If the header is newer than the last modified, this\naction will return a \"304 Not Modified\" response. Otherwise, it will render the\nresponse and include a Last-Modified header in it.Normally, this mechanism is used on a per-client basis. The cache middleware\nallows us to share this caching mechanism across clients. We can enable\ncross-client caching in the call to stale?:This means that the cache middleware will store off the Last-Modified value\nfor a URL in the Rails cache, and add an If-Modified-Since header to any\nsubsequent inbound requests for the same URL.Think of it as page caching using HTTP semantics.","title":"4.1 Using the Cache Middleware","anchor":"#using-the-cache-middleware"},{"title":"4.2 Using Rack::Sendfile","anchor":"#using-rack-sendfile","code":["\n# Apache and lighttpd\nconfig.action_dispatch.x_sendfile_header = \"X-Sendfile\"\n\n# Nginx\nconfig.action_dispatch.x_sendfile_header = \"X-Accel-Redirect\"\n\n# Apache and lighttpd\nconfig.action_dispatch.x_sendfile_header = \"X-Sendfile\"\n\n# Nginx\nconfig.action_dispatch.x_sendfile_header = \"X-Accel-Redirect\"\n\nCopy\n"],"body":"When you use the send_file method inside a Rails controller, it sets the\nX-Sendfile header. Rack::Sendfile is responsible for actually sending the\nfile.If your front-end server supports accelerated file sending, Rack::Sendfile\nwill offload the actual file sending work to the front-end server.You can configure the name of the header that your front-end server uses for\nthis purpose using config.action_dispatch.x_sendfile_header in the appropriate\nenvironment's configuration file.You can learn more about how to use Rack::Sendfile with popular\nfront-ends in the Rack::Sendfile\ndocumentation.Here are some values for this header for some popular servers, once these servers are configured to support\naccelerated file sending:Make sure to configure your server to support these options following the\ninstructions in the Rack::Sendfile documentation."},{"title":"4.3 Using ActionDispatch::Request","anchor":"#using-actiondispatch-request","code":["\njQuery.ajax({\n  type: 'POST',\n  url: '/people',\n  dataType: 'json',\n  contentType: 'application/json',\n  data: JSON.stringify({ person: { firstName: \"Yehuda\", lastName: \"Katz\" } }),\n  success: function(json) { }\n});\n\njQuery.ajax({\n  type: 'POST',\n  url: '/people',\n  dataType: 'json',\n  contentType: 'application/json',\n  data: JSON.stringify({ person: { firstName: \"Yehuda\", lastName: \"Katz\" } }),\n  success: function(json) { }\n});\n\nCopy\n","\n{ :person => { :firstName => \"Yehuda\", :lastName => \"Katz\" } }\n\n{ :person => { :firstName => \"Yehuda\", :lastName => \"Katz\" } }\n\nCopy\n"],"body":"ActionDispatch::Request#params will take parameters from the client in the JSON\nformat and make them available in your controller inside params.To use this, your client will need to make a request with JSON-encoded parameters\nand specify the Content-Type as application/json.Here's an example in jQuery:ActionDispatch::Request will see the Content-Type and your parameters\nwill be:"},{"code":["\n# This also configures session_options for use below\nconfig.session_store :cookie_store, key: '_interslice_session'\n\n# Required for all session management (regardless of session_store)\nconfig.middleware.use ActionDispatch::Cookies\n\nconfig.middleware.use config.session_store, config.session_options\n\n# This also configures session_options for use below\nconfig.session_store :cookie_store, key: '_interslice_session'\n\n# Required for all session management (regardless of session_store)\nconfig.middleware.use ActionDispatch::Cookies\n\nconfig.middleware.use config.session_store, config.session_options\n\nCopy\n"],"body":"The following middlewares, used for session management, are excluded from API apps since they normally don't need sessions.  If one of your API clients is a browser, you might want to add one of these back in:The trick to adding these back in is that, by default, they are passed session_options\nwhen added (including the session key), so you can't just add a session_store.rb initializer, add\nuse ActionDispatch::Session::CookieStore and have sessions functioning as usual.  (To be clear: sessions\nmay work, but your session options will be ignored - i.e the session key will default to _session_id)Instead of the initializer, you'll have to set the relevant options somewhere before your middleware is\nbuilt (like config/application.rb) and pass them to your preferred middleware, like this:","title":"4.4 Using Session Middlewares","anchor":"#using-session-middlewares"},{"code":["\nconfig.middleware.use Rack::MethodOverride\n\nconfig.middleware.use Rack::MethodOverride\n\nCopy\n"],"body":"Rails ships with a number of other middleware that you might want to use in an\nAPI application, especially if one of your API clients is the browser:Any of these middleware can be added via:","title":"4.5 Other Middleware","anchor":"#other-middleware"},{"code":["\nconfig.middleware.delete ::Rack::Sendfile\n\nconfig.middleware.delete ::Rack::Sendfile\n\nCopy\n"],"body":"If you don't want to use a middleware that is included by default in the API-only\nmiddleware set, you can remove it with:Keep in mind that removing these middlewares will remove support for certain\nfeatures in Action Controller.","title":"4.6 Removing Middleware","anchor":"#removing-middleware"},{"title":"5 Choosing Controller Modules","anchor":"#choosing-controller-modules","code":["\nirb> ActionController::API.ancestors - ActionController::Metal.ancestors\n=> [ActionController::API,\n    ActiveRecord::Railties::ControllerRuntime,\n    ActionDispatch::Routing::RouteSet::MountedHelpers,\n    ActionController::ParamsWrapper,\n    ... ,\n    AbstractController::Rendering,\n    ActionView::ViewPaths]\n\nActionController::API.ancestors - ActionController::Metal.ancestors\n\nCopy\n"],"body":"An API application (using ActionController::API) comes with the following\ncontroller modules by default:Other plugins may add additional modules. You can get a list of all modules\nincluded into ActionController::API in the rails console:"},{"code":[],"body":"All Action Controller modules know about their dependent modules, so you can feel\nfree to include any modules into your controllers, and all dependencies will be\nincluded and set up as well.Some common modules you might want to add:The best place to add a module is in your ApplicationController, but you can\nalso add modules to individual controllers.","title":"5.1 Adding Other Modules","anchor":"#adding-other-modules"}]