[{"code":[],"body":"Rack provides a minimal, modular, and adaptable interface for developing web applications in Ruby. By wrapping HTTP requests and responses in the simplest way possible, it unifies and distills the API for web servers, web frameworks, and software in between (the so-called middleware) into a single method call.Explaining how Rack works is not really in the scope of this guide. In case you\nare not familiar with Rack's basics, you should check out the Resources\nsection below.","title":"1 Introduction to Rack","anchor":"#introduction-to-rack"},{"title":"2 Rails on Rack","anchor":"#rails-on-rack","code":[],"body":""},{"title":"2.1 Rails Application's Rack Object","anchor":"#rails-application-s-rack-object","code":[],"body":"Rails.application is the primary Rack application object of a Rails\napplication. Any Rack compliant web server should be using\nRails.application object to serve a Rails application."},{"title":"2.2 bin/rails server","anchor":"#bin-rails-server","code":["\nRails::Server.new.tap do |server|\n  require APP_PATH\n  Dir.chdir(Rails.application.root)\n  server.start\nend\n\nRails::Server.new.tap do |server|\n  require APP_PATH\n  Dir.chdir(Rails.application.root)\n  server.start\nend\n\nCopy\n","\nclass Server < ::Rack::Server\n  def start\n    # ...\n    super\n  end\nend\n\nclass Server < ::Rack::Server\n  def start\n    # ...\n    super\n  end\nend\n\nCopy\n"],"body":"bin/rails server does the basic job of creating a Rack::Server object and starting the web server.Here's how bin/rails server creates an instance of Rack::ServerThe Rails::Server inherits from Rack::Server and calls the Rack::Server#start method this way:"},{"code":["\n# Rails.root/config.ru\nrequire_relative \"config/environment\"\nrun Rails.application\n\n# Rails.root/config.ru\nrequire_relative \"config/environment\"\nrun Rails.application\n\nCopy\n","\n$ rackup config.ru\n\nrackup config.ru\n\nCopy\n","\n$ rackup --help\n\nrackup --help\n\nCopy\n"],"body":"To use rackup instead of Rails' bin/rails server, you can put the following inside config.ru of your Rails application's root directory:And start the server:To find out more about different rackup options, you can run:","title":"2.3 rackup","anchor":"#rackup"},{"code":[],"body":"Middlewares are loaded once and are not monitored for changes. You will have to restart the server for changes to be reflected in the running application.","title":"2.4 Development and auto-reloading","anchor":"#development-and-auto-reloading"},{"title":"3 Action Dispatcher Middleware Stack","anchor":"#action-dispatcher-middleware-stack","code":[],"body":"Many of Action Dispatcher's internal components are implemented as Rack middlewares. Rails::Application uses ActionDispatch::MiddlewareStack to combine various internal and external middlewares to form a complete Rails Rack application."},{"title":"3.1 Inspecting Middleware Stack","anchor":"#inspecting-middleware-stack","code":["\n$ bin/rails middleware\n\nbin/rails middleware\n\nCopy\n","\nuse Rack::Sendfile\nuse ActionDispatch::Static\nuse ActionDispatch::Executor\nuse ActiveSupport::Cache::Strategy::LocalCache::Middleware\nuse Rack::Runtime\nuse Rack::MethodOverride\nuse ActionDispatch::RequestId\nuse ActionDispatch::RemoteIp\nuse Sprockets::Rails::QuietAssets\nuse Rails::Rack::Logger\nuse ActionDispatch::ShowExceptions\nuse WebConsole::Middleware\nuse ActionDispatch::DebugExceptions\nuse ActionDispatch::ActionableExceptions\nuse ActionDispatch::Reloader\nuse ActionDispatch::Callbacks\nuse ActiveRecord::Migration::CheckPending\nuse ActionDispatch::Cookies\nuse ActionDispatch::Session::CookieStore\nuse ActionDispatch::Flash\nuse ActionDispatch::ContentSecurityPolicy::Middleware\nuse Rack::Head\nuse Rack::ConditionalGet\nuse Rack::ETag\nuse Rack::TempfileReaper\nrun MyApp::Application.routes\n\nuse Rack::Sendfile\nuse ActionDispatch::Static\nuse ActionDispatch::Executor\nuse ActiveSupport::Cache::Strategy::LocalCache::Middleware\nuse Rack::Runtime\nuse Rack::MethodOverride\nuse ActionDispatch::RequestId\nuse ActionDispatch::RemoteIp\nuse Sprockets::Rails::QuietAssets\nuse Rails::Rack::Logger\nuse ActionDispatch::ShowExceptions\nuse WebConsole::Middleware\nuse ActionDispatch::DebugExceptions\nuse ActionDispatch::ActionableExceptions\nuse ActionDispatch::Reloader\nuse ActionDispatch::Callbacks\nuse ActiveRecord::Migration::CheckPending\nuse ActionDispatch::Cookies\nuse ActionDispatch::Session::CookieStore\nuse ActionDispatch::Flash\nuse ActionDispatch::ContentSecurityPolicy::Middleware\nuse Rack::Head\nuse Rack::ConditionalGet\nuse Rack::ETag\nuse Rack::TempfileReaper\nrun MyApp::Application.routes\n\nCopy\n"],"body":"Rails has a handy command for inspecting the middleware stack in use:For a freshly generated Rails application, this might produce something like:The default middlewares shown here (and some others) are each summarized in the Internal Middlewares section, below."},{"title":"3.2 Configuring Middleware Stack","anchor":"#configuring-middleware-stack","code":[],"body":"Rails provides a simple configuration interface config.middleware for adding, removing, and modifying the middlewares in the middleware stack via application.rb or the environment specific configuration file environments/<environment>.rb."},{"title":"3.2.1 Adding a Middleware","anchor":"#adding-a-middleware","code":["\n# config/application.rb\n\n# Push Rack::BounceFavicon at the bottom\nconfig.middleware.use Rack::BounceFavicon\n\n# Add Lifo::Cache after ActionDispatch::Executor.\n# Pass { page_cache: false } argument to Lifo::Cache.\nconfig.middleware.insert_after ActionDispatch::Executor, Lifo::Cache, page_cache: false\n\n# config/application.rb\n\n# Push Rack::BounceFavicon at the bottom\nconfig.middleware.use Rack::BounceFavicon\n\n# Add Lifo::Cache after ActionDispatch::Executor.\n# Pass { page_cache: false } argument to Lifo::Cache.\nconfig.middleware.insert_after ActionDispatch::Executor, Lifo::Cache, page_cache: false\n\nCopy\n"],"body":"You can add a new middleware to the middleware stack using any of the following methods:"},{"code":["\n# config/application.rb\n\n# Replace ActionDispatch::ShowExceptions with Lifo::ShowExceptions\nconfig.middleware.swap ActionDispatch::ShowExceptions, Lifo::ShowExceptions\n\n# config/application.rb\n\n# Replace ActionDispatch::ShowExceptions with Lifo::ShowExceptions\nconfig.middleware.swap ActionDispatch::ShowExceptions, Lifo::ShowExceptions\n\nCopy\n"],"body":"You can swap an existing middleware in the middleware stack using config.middleware.swap.","title":"3.2.2 Swapping a Middleware","anchor":"#swapping-a-middleware"},{"code":["\n# config/application.rb\nconfig.middleware.delete Rack::Runtime\n\n# config/application.rb\nconfig.middleware.delete Rack::Runtime\n\nCopy\n","\n$ bin/rails middleware\n(in /Users/lifo/Rails/blog)\nuse ActionDispatch::Static\nuse #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0x00000001c304c8>\n...\nrun Rails.application.routes\n\nbin/rails middleware\n\nCopy\n","\n# config/application.rb\nconfig.middleware.delete ActionDispatch::Cookies\nconfig.middleware.delete ActionDispatch::Session::CookieStore\nconfig.middleware.delete ActionDispatch::Flash\n\n# config/application.rb\nconfig.middleware.delete ActionDispatch::Cookies\nconfig.middleware.delete ActionDispatch::Session::CookieStore\nconfig.middleware.delete ActionDispatch::Flash\n\nCopy\n","\n# config/application.rb\nconfig.middleware.delete Rack::MethodOverride\n\n# config/application.rb\nconfig.middleware.delete Rack::MethodOverride\n\nCopy\n"],"body":"Add the following lines to your application configuration:And now if you inspect the middleware stack, you'll find that Rack::Runtime is\nnot a part of it.If you want to remove session related middleware, do the following:And to remove browser related middleware,","title":"3.2.3 Deleting a Middleware","anchor":"#deleting-a-middleware"},{"code":[],"body":"Much of Action Controller's functionality is implemented as Middlewares. The following list explains the purpose of each of them:Rack::SendfileActionDispatch::StaticRack::LockActionDispatch::ExecutorActiveSupport::Cache::Strategy::LocalCache::MiddlewareRack::RuntimeRack::MethodOverrideActionDispatch::RequestIdActionDispatch::RemoteIpSprockets::Rails::QuietAssetsRails::Rack::LoggerActionDispatch::ShowExceptionsActionDispatch::DebugExceptionsActionDispatch::ActionableExceptionsActionDispatch::ReloaderActionDispatch::CallbacksActiveRecord::Migration::CheckPendingActionDispatch::CookiesActionDispatch::Session::CookieStoreActionDispatch::FlashActionDispatch::ContentSecurityPolicy::MiddlewareRack::HeadRack::ConditionalGetRack::ETagRack::TempfileReaper","title":"3.3 Internal Middleware Stack","anchor":"#internal-middleware-stack"},{"title":"4 Resources","anchor":"#resources","code":[],"body":""},{"title":"4.1 Learning Rack","anchor":"#learning-rack","code":[],"body":""},{"code":[],"body":"","title":"4.2 Understanding Middlewares","anchor":"#understanding-middlewares"}]