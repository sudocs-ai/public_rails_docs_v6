[{"code":[],"body":"Rails 2.2 is a significant release for the infrastructure that keeps Rails humming along and connected to the rest of the world.","title":"1 Infrastructure","anchor":"#infrastructure"},{"title":"1.1 Internationalization","anchor":"#internationalization","code":[],"body":"Rails 2.2 supplies an easy system for internationalization (or i18n, for those of you tired of typing)."},{"code":[],"body":"Along with thread safety, a lot of work has been done to make Rails work well with JRuby and the upcoming Ruby 1.9. With Ruby 1.9 being a moving target, running edge Rails on edge Ruby is still a hit-or-miss proposition, but Rails is ready to make the transition to Ruby 1.9 when the latter is released.","title":"1.2 Compatibility with Ruby 1.9 and JRuby","anchor":"#compatibility-with-ruby-1-9-and-jruby"},{"title":"2 Documentation","anchor":"#documentation","code":["\n$ rake doc:guides\n\nrake doc:guides\n\nCopy\n"],"body":"The internal documentation of Rails, in the form of code comments, has been improved in numerous places. In addition, the Ruby on Rails Guides project is the definitive source for information on major Rails components. In its first official release, the Guides page includes:All told, the Guides provide tens of thousands of words of guidance for beginning and intermediate Rails developers.If you want to generate these guides locally, inside your application:This will put the guides inside Rails.root/doc/guides and you may start surfing straight away by opening Rails.root/doc/guides/index.html in your favourite browser."},{"code":["\nclass ArticlesController < ApplicationController\n  def show_with_respond_to_block\n    @article = Article.find(params[:id])\n\n    # If the request sends headers that differs from the options provided to stale?, then\n    # the request is indeed stale and the respond_to block is triggered (and the options\n    # to the stale? call is set on the response).\n    #\n    # If the request headers match, then the request is fresh and the respond_to block is\n    # not triggered. Instead the default render will occur, which will check the last-modified\n    # and etag headers and conclude that it only needs to send a \"304 Not Modified\" instead\n    # of rendering the template.\n    if stale?(:last_modified => @article.published_at.utc, :etag => @article)\n      respond_to do |wants|\n        # normal response processing\n      end\n    end\n  end\n\n  def show_with_implied_render\n    @article = Article.find(params[:id])\n\n    # Sets the response headers and checks them against the request, if the request is stale\n    # (i.e. no match of either etag or last-modified), then the default render of the template happens.\n    # If the request is fresh, then the default render will return a \"304 Not Modified\"\n    # instead of rendering the template.\n    fresh_when(:last_modified => @article.published_at.utc, :etag => @article)\n  end\nend\n\nclass ArticlesController < ApplicationController\n  def show_with_respond_to_block\n    @article = Article.find(params[:id])\n\n    # If the request sends headers that differs from the options provided to stale?, then\n    # the request is indeed stale and the respond_to block is triggered (and the options\n    # to the stale? call is set on the response).\n    #\n    # If the request headers match, then the request is fresh and the respond_to block is\n    # not triggered. Instead the default render will occur, which will check the last-modified\n    # and etag headers and conclude that it only needs to send a \"304 Not Modified\" instead\n    # of rendering the template.\n    if stale?(:last_modified => @article.published_at.utc, :etag => @article)\n      respond_to do |wants|\n        # normal response processing\n      end\n    end\n  end\n\n  def show_with_implied_render\n    @article = Article.find(params[:id])\n\n    # Sets the response headers and checks them against the request, if the request is stale\n    # (i.e. no match of either etag or last-modified), then the default render of the template happens.\n    # If the request is fresh, then the default render will return a \"304 Not Modified\"\n    # instead of rendering the template.\n    fresh_when(:last_modified => @article.published_at.utc, :etag => @article)\n  end\nend\n\nCopy\n"],"body":"Supporting the etag and last modified timestamp in HTTP headers means that Rails can now send back an empty response if it gets a request for a resource that hasn't been modified lately. This allows you to check whether a response needs to be sent at all.","title":"3 Better integration with HTTP : Out of the box ETag support","anchor":"#better-integration-with-http-out-of-the-box-etag-support"},{"code":["\nconfig.threadsafe!\n\nconfig.threadsafe!\n\nCopy\n"],"body":"The work done to make Rails thread-safe is rolling out in Rails 2.2. Depending on your web server infrastructure, this means you can handle more requests with fewer copies of Rails in memory, leading to better server performance and higher utilization of multiple cores.To enable multithreaded dispatching in production mode of your application, add the following line in your config/environments/production.rb:","title":"4 Thread Safety","anchor":"#thread-safety"},{"code":[],"body":"There are two big additions to talk about here: transactional migrations and pooled database transactions. There's also a new (and cleaner) syntax for join table conditions, as well as a number of smaller improvements.","title":"5 Active Record","anchor":"#active-record"},{"title":"5.1 Transactional Migrations","anchor":"#transactional-migrations","code":[],"body":"Historically, multiple-step Rails migrations have been a source of trouble. If something went wrong during a migration, everything before the error changed the database and everything after the error wasn't applied. Also, the migration version was stored as having been executed, which means that it couldn't be simply rerun by rake db:migrate:redo after you fix the problem. Transactional migrations change this by wrapping migration steps in a DDL transaction, so that if any of them fail, the entire migration is undone. In Rails 2.2, transactional migrations are supported on PostgreSQL out of the box. The code is extensible to other database types in the future - and IBM has already extended it to support the DB2 adapter."},{"code":["\ndevelopment:\n  adapter: mysql\n  username: root\n  database: sample_development\n  pool: 10\n  wait_timeout: 10\n\ndevelopment:\n  adapter: mysql\n  username: root\n  database: sample_development\n  pool: 10\n  wait_timeout: 10\n\nCopy\n"],"body":"Connection pooling lets Rails distribute database requests across a pool of database connections that will grow to a maximum size (by default 5, but you can add a pool key to your database.yml to adjust this). This helps remove bottlenecks in applications that support many concurrent users. There's also a wait_timeout that defaults to 5 seconds before giving up. ActiveRecord::Base.connection_pool gives you direct access to the pool if you need it.","title":"5.2 Connection Pooling","anchor":"#connection-pooling"},{"code":["\nclass Photo < ActiveRecord::Base\n  belongs_to :product\nend\n\nclass Product < ActiveRecord::Base\n  has_many :photos\nend\n\n# Get all products with copyright-free photos:\nProduct.all(:joins => :photos, :conditions => { :photos => { :copyright => false }})\n\nclass Photo < ActiveRecord::Base\n  belongs_to :product\nend\n\nclass Product < ActiveRecord::Base\n  has_many :photos\nend\n\n# Get all products with copyright-free photos:\nProduct.all(:joins => :photos, :conditions => { :photos => { :copyright => false }})\n\nCopy\n"],"body":"You can now specify conditions on join tables using a hash. This is a big help if you need to query across complex joins.","title":"5.3 Hashes for Join Table Conditions","anchor":"#hashes-for-join-table-conditions"},{"code":[],"body":"Two new sets of methods have been added to Active Record's dynamic finders family.","title":"5.4 New Dynamic Finders","anchor":"#new-dynamic-finders"},{"title":"5.4.1 find_last_by_attribute","anchor":"#find-last-by-attribute","code":["\n# Get the last user who signed up from London\nUser.find_last_by_city('London')\n\n# Get the last user who signed up from London\nUser.find_last_by_city('London')\n\nCopy\n"],"body":"The find_last_by_attribute method is equivalent to Model.last(:conditions => {:attribute => value})"},{"code":["\n# Raise ActiveRecord::RecordNotFound exception if 'Moby' hasn't signed up yet!\nUser.find_by_name!('Moby')\n\n# Raise ActiveRecord::RecordNotFound exception if 'Moby' hasn't signed up yet!\nUser.find_by_name!('Moby')\n\nCopy\n"],"body":"The new bang! version of find_by_attribute! is equivalent to Model.first(:conditions => {:attribute => value}) || raise ActiveRecord::RecordNotFound Instead of returning nil if it can't find a matching record, this method will raise an exception if it cannot find a match.","title":"5.4.2 find_by_attribute!","anchor":"#find-by-attribute-bang"},{"code":[],"body":"Active Record association proxies now respect the scope of methods on the proxied object. Previously (given User has_one :account) @user.account.private_method would call the private method on the associated Account object. That fails in Rails 2.2; if you need this functionality, you should use @user.account.send(:private_method) (or make the method public instead of private or protected). Please note that if you're overriding method_missing, you should also override respond_to to match the behavior in order for associations to function normally.","title":"5.5 Associations Respect Private/Protected Scope","anchor":"#associations-respect-private-protected-scope"},{"code":[],"body":"","title":"5.6 Other Active Record Changes","anchor":"#other-active-record-changes"},{"code":[],"body":"On the controller side, there are several changes that will help tidy up your routes. There are also some internal changes in the routing engine to lower memory usage on complex applications.","title":"6 Action Controller","anchor":"#action-controller"},{"title":"6.1 Shallow Route Nesting","anchor":"#shallow-route-nesting","code":["\nmap.resources :publishers, :shallow => true do |publisher|\n  publisher.resources :magazines do |magazine|\n    magazine.resources :photos\n  end\nend\n\nmap.resources :publishers, :shallow => true do |publisher|\n  publisher.resources :magazines do |magazine|\n    magazine.resources :photos\n  end\nend\n\nCopy\n","\n/publishers/1           ==> publisher_path(1)\n/publishers/1/magazines ==> publisher_magazines_path(1)\n/magazines/2            ==> magazine_path(2)\n/magazines/2/photos     ==> magazines_photos_path(2)\n/photos/3               ==> photo_path(3)\n\n/publishers/1           ==> publisher_path(1)\n/publishers/1/magazines ==> publisher_magazines_path(1)\n/magazines/2            ==> magazine_path(2)\n/magazines/2/photos     ==> magazines_photos_path(2)\n/photos/3               ==> photo_path(3)\n\nCopy\n"],"body":"Shallow route nesting provides a solution to the well-known difficulty of using deeply-nested resources. With shallow nesting, you need only supply enough information to uniquely identify the resource that you want to work with.This will enable recognition of (among others) these routes:"},{"code":["\nmap.resources :photos, :collection => { :search => [:get, :post] }\n\nmap.resources :photos, :collection => { :search => [:get, :post] }\n\nCopy\n"],"body":"You can now supply an array of methods for new member or collection routes. This removes the annoyance of having to define a route as accepting any verb as soon as you need it to handle more than one. With Rails 2.2, this is a legitimate route declaration:","title":"6.2 Method Arrays for Member or Collection Routes","anchor":"#method-arrays-for-member-or-collection-routes"},{"code":["\nmap.resources :photos, :only => [:index, :show]\nmap.resources :products, :except => :destroy\n\nmap.resources :photos, :only => [:index, :show]\nmap.resources :products, :except => :destroy\n\nCopy\n"],"body":"By default, when you use map.resources to create a route, Rails generates routes for seven default actions (index, show, create, new, edit, update, and destroy). But each of these routes takes up memory in your application, and causes Rails to generate additional routing logic. Now you can use the :only and :except options to fine-tune the routes that Rails will generate for resources. You can supply a single action, an array of actions, or the special :all or :none options. These options are inherited by nested resources.","title":"6.3 Resources With Specific Actions","anchor":"#resources-with-specific-actions"},{"code":[],"body":"","title":"6.4 Other Action Controller Changes","anchor":"#other-action-controller-changes"},{"code":[],"body":"","title":"7 Action View","anchor":"#action-view"},{"code":[],"body":"Action Mailer now supports mailer layouts. You can make your HTML emails as pretty as your in-browser views by supplying an appropriately-named layout - for example, the CustomerMailer class expects to use layouts/customer_mailer.html.erb.Action Mailer now offers built-in support for GMail's SMTP servers, by turning on STARTTLS automatically. This requires Ruby 1.8.7 to be installed.","title":"8 Action Mailer","anchor":"#action-mailer"},{"title":"9 Active Support","anchor":"#active-support","code":[],"body":"Active Support now offers built-in memoization for Rails applications, the each_with_object method, prefix support on delegates, and various other new utility methods."},{"title":"9.1 Memoization","anchor":"#memoization","code":["\ndef full_name\n  @full_name ||= \"#{first_name} #{last_name}\"\nend\n\ndef full_name\n  @full_name ||= \"#{first_name} #{last_name}\"\nend\n\nCopy\n","\nextend ActiveSupport::Memoizable\n\ndef full_name\n  \"#{first_name} #{last_name}\"\nend\nmemoize :full_name\n\nextend ActiveSupport::Memoizable\n\ndef full_name\n  \"#{first_name} #{last_name}\"\nend\nmemoize :full_name\n\nCopy\n"],"body":"Memoization is a pattern of initializing a method once and then stashing its value away for repeat use. You've probably used this pattern in your own applications:Memoization lets you handle this task in a declarative fashion:Other features of memoization include unmemoize, unmemoize_all, and memoize_all to turn memoization on or off."},{"code":["\n%w(foo bar).each_with_object({}) { |str, hsh| hsh[str] = str.upcase } # => {'foo' => 'FOO', 'bar' => 'BAR'}\n\n%w(foo bar).each_with_object({}) { |str, hsh| hsh[str] = str.upcase } # => {'foo' => 'FOO', 'bar' => 'BAR'}\n\nCopy\n"],"body":"The each_with_object method provides an alternative to inject, using a method backported from Ruby 1.9. It iterates over a collection, passing the current element and the memo into the block.Lead Contributor: Adam Keys","title":"9.2 each_with_object","anchor":"#each-with-object"},{"title":"9.3 Delegates With Prefixes","anchor":"#delegates-with-prefixes","code":["\nclass Vendor < ActiveRecord::Base\n  has_one :account\n  delegate :email, :password, :to => :account, :prefix => true\nend\n\nclass Vendor < ActiveRecord::Base\n  has_one :account\n  delegate :email, :password, :to => :account, :prefix => true\nend\n\nCopy\n","\nclass Vendor < ActiveRecord::Base\n  has_one :account\n  delegate :email, :password, :to => :account, :prefix => :owner\nend\n\nclass Vendor < ActiveRecord::Base\n  has_one :account\n  delegate :email, :password, :to => :account, :prefix => :owner\nend\n\nCopy\n"],"body":"If you delegate behavior from one class to another, you can now specify a prefix that will be used to identify the delegated methods. For example:This will produce delegated methods vendor#account_email and vendor#account_password. You can also specify a custom prefix:This will produce delegated methods vendor#owner_email and vendor#owner_password.Lead Contributor: Daniel Schierbeck"},{"title":"9.4 Other Active Support Changes","anchor":"#other-active-support-changes","code":[],"body":""},{"code":[],"body":"In Railties (the core code of Rails itself) the biggest changes are in the config.gems mechanism.","title":"10 Railties","anchor":"#railties"},{"title":"10.1 config.gems","anchor":"#config-gems","code":[],"body":"To avoid deployment issues and make Rails applications more self-contained, it's possible to place copies of all of the gems that your Rails application requires in /vendor/gems. This capability first appeared in Rails 2.1, but it's much more flexible and robust in Rails 2.2, handling complicated dependencies between gems. Gem management in Rails includes these commands:You can unpack or install a single gem by specifying GEM=_gem_name_ on the command line."},{"code":[],"body":"","title":"10.2 Other Railties Changes","anchor":"#other-railties-changes"},{"code":[],"body":"A few pieces of older code are deprecated in this release:","title":"11 Deprecated","anchor":"#deprecated"},{"code":[],"body":"Release notes compiled by Mike Gunderloy","title":"12 Credits","anchor":"#credits"}]