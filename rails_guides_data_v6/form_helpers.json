[{"code":["\n<%= form_with do |form| %>\n  Form contents\n<% end %>\n\n<%= form_with do |form| %>\n  Form contents\n<% end %>\n\nCopy\n","\n<form accept-charset=\"UTF-8\" action=\"/\" method=\"post\">\n  <input name=\"authenticity_token\" type=\"hidden\" value=\"J7CBxfHalt49OSHp27hblqK20c9PgwJ108nDHX/8Cts=\" />\n  Form contents\n</form>\n\n<form accept-charset=\"UTF-8\" action=\"/\" method=\"post\">\n  <input name=\"authenticity_token\" type=\"hidden\" value=\"J7CBxfHalt49OSHp27hblqK20c9PgwJ108nDHX/8Cts=\" />\n  Form contents\n</form>\n\nCopy\n"],"body":"The main form helper is form_with.When called without arguments like this, it creates a form tag which, when submitted, will POST to the current page. For instance, assuming the current page is a home page, the generated HTML will look like this:You'll notice that the HTML contains an input element with type hidden. This input is important, because non-GET forms cannot be successfully submitted without it.\nThe hidden input element with the name authenticity_token is a security feature of Rails called cross-site request forgery protection, and form helpers generate it for every non-GET form (provided that this security feature is enabled). You can read more about this in the Securing Rails Applications guide.","title":"1 Dealing with Basic Forms","anchor":"#dealing-with-basic-forms"},{"title":"1.1 A Generic Search Form","anchor":"#a-generic-search-form","code":["\n<%= form_with url: \"/search\", method: :get do |form| %>\n  <%= form.label :query, \"Search for:\" %>\n  <%= form.text_field :query %>\n  <%= form.submit \"Search\" %>\n<% end %>\n\n<%= form_with url: \"/search\", method: :get do |form| %>\n  <%= form.label :query, \"Search for:\" %>\n  <%= form.text_field :query %>\n  <%= form.submit \"Search\" %>\n<% end %>\n\nCopy\n","\n<form action=\"/search\" method=\"get\" accept-charset=\"UTF-8\" >\n  <label for=\"query\">Search for:</label>\n  <input id=\"query\" name=\"query\" type=\"text\" />\n  <input name=\"commit\" type=\"submit\" value=\"Search\" data-disable-with=\"Search\" />\n</form>\n\n<form action=\"/search\" method=\"get\" accept-charset=\"UTF-8\" >\n  <label for=\"query\">Search for:</label>\n  <input id=\"query\" name=\"query\" type=\"text\" />\n  <input name=\"commit\" type=\"submit\" value=\"Search\" data-disable-with=\"Search\" />\n</form>\n\nCopy\n"],"body":"One of the most basic forms you see on the web is a search form. This form contains:To create this form you will use form_with and the form builder object it yields. Like so:This will generate the following HTML:"},{"title":"1.2 Helpers for Generating Form Elements","anchor":"#helpers-for-generating-form-elements","code":[],"body":"The form builder object yielded by form_with provides numerous helper methods for generating form elements such as text fields, checkboxes, and radio buttons. The first parameter to these methods is always the name of the\ninput. When the form is submitted, the name will be passed along with the form\ndata, and will make its way to the params in the controller with the\nvalue entered by the user for that field. For example, if the form contains\n<%= form.text_field :query %>, then you would be able to get the value of this\nfield in the controller with params[:query].When naming inputs, Rails uses certain conventions that make it possible to submit parameters with non-scalar values such as arrays or hashes, which will also be accessible in params. You can read more about them in chapter Understanding Parameter Naming Conventions of this guide. For details on the precise usage of these helpers, please refer to the API documentation."},{"title":"1.2.1 Checkboxes","anchor":"#checkboxes","code":["\n<%= form.check_box :pet_dog %>\n<%= form.label :pet_dog, \"I own a dog\" %>\n<%= form.check_box :pet_cat %>\n<%= form.label :pet_cat, \"I own a cat\" %>\n\n<%= form.check_box :pet_dog %>\n<%= form.label :pet_dog, \"I own a dog\" %>\n<%= form.check_box :pet_cat %>\n<%= form.label :pet_cat, \"I own a cat\" %>\n\nCopy\n","\n<input type=\"checkbox\" id=\"pet_dog\" name=\"pet_dog\" value=\"1\" />\n<label for=\"pet_dog\">I own a dog</label>\n<input type=\"checkbox\" id=\"pet_cat\" name=\"pet_cat\" value=\"1\" />\n<label for=\"pet_cat\">I own a cat</label>\n\n<input type=\"checkbox\" id=\"pet_dog\" name=\"pet_dog\" value=\"1\" />\n<label for=\"pet_dog\">I own a dog</label>\n<input type=\"checkbox\" id=\"pet_cat\" name=\"pet_cat\" value=\"1\" />\n<label for=\"pet_cat\">I own a cat</label>\n\nCopy\n"],"body":"Checkboxes are form controls that give the user a set of options they can enable or disable:This generates the following:The first parameter to check_box is the name of the input. The second parameter is the value of the input. This value will be included in the form data (and be present in params) when the checkbox is checked."},{"title":"1.2.2 Radio Buttons","anchor":"#radio-buttons","code":["\n<%= form.radio_button :age, \"child\" %>\n<%= form.label :age_child, \"I am younger than 21\" %>\n<%= form.radio_button :age, \"adult\" %>\n<%= form.label :age_adult, \"I am over 21\" %>\n\n<%= form.radio_button :age, \"child\" %>\n<%= form.label :age_child, \"I am younger than 21\" %>\n<%= form.radio_button :age, \"adult\" %>\n<%= form.label :age_adult, \"I am over 21\" %>\n\nCopy\n","\n<input type=\"radio\" id=\"age_child\" name=\"age\" value=\"child\" />\n<label for=\"age_child\">I am younger than 21</label>\n<input type=\"radio\" id=\"age_adult\" name=\"age\" value=\"adult\" />\n<label for=\"age_adult\">I am over 21</label>\n\n<input type=\"radio\" id=\"age_child\" name=\"age\" value=\"child\" />\n<label for=\"age_child\">I am younger than 21</label>\n<input type=\"radio\" id=\"age_adult\" name=\"age\" value=\"adult\" />\n<label for=\"age_adult\">I am over 21</label>\n\nCopy\n"],"body":"Radio buttons, while similar to checkboxes, are controls that specify a set of options in which they are mutually exclusive (i.e., the user can only pick one):Output:As with check_box, the second parameter to radio_button is the value of the input. Because these two radio buttons share the same name (age), the user will only be able to select one of them, and params[:age] will contain either \"child\" or \"adult\"."},{"title":"1.3 Other Helpers of Interest","anchor":"#other-helpers-of-interest","code":["\n<%= form.text_area :message, size: \"70x5\" %>\n<%= form.hidden_field :parent_id, value: \"foo\" %>\n<%= form.password_field :password %>\n<%= form.number_field :price, in: 1.0..20.0, step: 0.5 %>\n<%= form.range_field :discount, in: 1..100 %>\n<%= form.date_field :born_on %>\n<%= form.time_field :started_at %>\n<%= form.datetime_local_field :graduation_day %>\n<%= form.month_field :birthday_month %>\n<%= form.week_field :birthday_week %>\n<%= form.search_field :name %>\n<%= form.email_field :address %>\n<%= form.telephone_field :phone %>\n<%= form.url_field :homepage %>\n<%= form.color_field :favorite_color %>\n\n<%= form.text_area :message, size: \"70x5\" %>\n<%= form.hidden_field :parent_id, value: \"foo\" %>\n<%= form.password_field :password %>\n<%= form.number_field :price, in: 1.0..20.0, step: 0.5 %>\n<%= form.range_field :discount, in: 1..100 %>\n<%= form.date_field :born_on %>\n<%= form.time_field :started_at %>\n<%= form.datetime_local_field :graduation_day %>\n<%= form.month_field :birthday_month %>\n<%= form.week_field :birthday_week %>\n<%= form.search_field :name %>\n<%= form.email_field :address %>\n<%= form.telephone_field :phone %>\n<%= form.url_field :homepage %>\n<%= form.color_field :favorite_color %>\n\nCopy\n","\n<textarea name=\"message\" id=\"message\" cols=\"70\" rows=\"5\"></textarea>\n<input type=\"hidden\" name=\"parent_id\" id=\"parent_id\" value=\"foo\" />\n<input type=\"password\" name=\"password\" id=\"password\" />\n<input type=\"number\" name=\"price\" id=\"price\" step=\"0.5\" min=\"1.0\" max=\"20.0\" />\n<input type=\"range\" name=\"discount\" id=\"discount\" min=\"1\" max=\"100\" />\n<input type=\"date\" name=\"born_on\" id=\"born_on\" />\n<input type=\"time\" name=\"started_at\" id=\"started_at\" />\n<input type=\"datetime-local\" name=\"graduation_day\" id=\"graduation_day\" />\n<input type=\"month\" name=\"birthday_month\" id=\"birthday_month\" />\n<input type=\"week\" name=\"birthday_week\" id=\"birthday_week\" />\n<input type=\"search\" name=\"name\" id=\"name\" />\n<input type=\"email\" name=\"address\" id=\"address\" />\n<input type=\"tel\" name=\"phone\" id=\"phone\" />\n<input type=\"url\" name=\"homepage\" id=\"homepage\" />\n<input type=\"color\" name=\"favorite_color\" id=\"favorite_color\" value=\"#000000\" />\n\n<textarea name=\"message\" id=\"message\" cols=\"70\" rows=\"5\"></textarea>\n<input type=\"hidden\" name=\"parent_id\" id=\"parent_id\" value=\"foo\" />\n<input type=\"password\" name=\"password\" id=\"password\" />\n<input type=\"number\" name=\"price\" id=\"price\" step=\"0.5\" min=\"1.0\" max=\"20.0\" />\n<input type=\"range\" name=\"discount\" id=\"discount\" min=\"1\" max=\"100\" />\n<input type=\"date\" name=\"born_on\" id=\"born_on\" />\n<input type=\"time\" name=\"started_at\" id=\"started_at\" />\n<input type=\"datetime-local\" name=\"graduation_day\" id=\"graduation_day\" />\n<input type=\"month\" name=\"birthday_month\" id=\"birthday_month\" />\n<input type=\"week\" name=\"birthday_week\" id=\"birthday_week\" />\n<input type=\"search\" name=\"name\" id=\"name\" />\n<input type=\"email\" name=\"address\" id=\"address\" />\n<input type=\"tel\" name=\"phone\" id=\"phone\" />\n<input type=\"url\" name=\"homepage\" id=\"homepage\" />\n<input type=\"color\" name=\"favorite_color\" id=\"favorite_color\" value=\"#000000\" />\n\nCopy\n"],"body":"Other form controls worth mentioning are text areas, hidden fields, password fields, number fields, date and time fields, and many more:Output:Hidden inputs are not shown to the user but instead hold data like any textual input. Values inside them can be changed with JavaScript."},{"title":"2 Dealing with Model Objects","anchor":"#dealing-with-model-objects","code":[],"body":""},{"title":"2.1 Binding a Form to an Object","anchor":"#binding-a-form-to-an-object","code":["\n@article = Article.find(42)\n# => #<Article id: 42, title: \"My Title\", body: \"My Body\">\n\n@article = Article.find(42)\n# => #<Article id: 42, title: \"My Title\", body: \"My Body\">\n\nCopy\n","\n<%= form_with model: @article do |form| %>\n  <%= form.text_field :title %>\n  <%= form.text_area :body, size: \"60x10\" %>\n  <%= form.submit %>\n<% end %>\n\n<%= form_with model: @article do |form| %>\n  <%= form.text_field :title %>\n  <%= form.text_area :body, size: \"60x10\" %>\n  <%= form.submit %>\n<% end %>\n\nCopy\n","\n<form action=\"/articles/42\" method=\"post\" accept-charset=\"UTF-8\" >\n  <input name=\"authenticity_token\" type=\"hidden\" value=\"...\" />\n  <input type=\"text\" name=\"article[title]\" id=\"article_title\" value=\"My Title\" />\n  <textarea name=\"article[body]\" id=\"article_body\" cols=\"60\" rows=\"10\">\n    My Body\n  </textarea>\n  <input type=\"submit\" name=\"commit\" value=\"Update Article\" data-disable-with=\"Update Article\">\n</form>\n\n<form action=\"/articles/42\" method=\"post\" accept-charset=\"UTF-8\" >\n  <input name=\"authenticity_token\" type=\"hidden\" value=\"...\" />\n  <input type=\"text\" name=\"article[title]\" id=\"article_title\" value=\"My Title\" />\n  <textarea name=\"article[body]\" id=\"article_body\" cols=\"60\" rows=\"10\">\n    My Body\n  </textarea>\n  <input type=\"submit\" name=\"commit\" value=\"Update Article\" data-disable-with=\"Update Article\">\n</form>\n\nCopy\n"],"body":"The :model argument of form_with allows us to bind the form builder object to a model object. This means that the form will be scoped to that model object, and the form's fields will be populated with values from that model object.For example, if we have an @article model object like:The following form:Outputs:The are several things to notice here:"},{"title":"2.1.1 The fields_for Helper","anchor":"#binding-a-form-to-an-object-the-fields-for-helper","code":["\n<%= form_with model: @person do |person_form| %>\n  <%= person_form.text_field :name %>\n  <%= fields_for :contact_detail, @person.contact_detail do |contact_detail_form| %>\n    <%= contact_detail_form.text_field :phone_number %>\n  <% end %>\n<% end %>\n\n<%= form_with model: @person do |person_form| %>\n  <%= person_form.text_field :name %>\n  <%= fields_for :contact_detail, @person.contact_detail do |contact_detail_form| %>\n    <%= contact_detail_form.text_field :phone_number %>\n  <% end %>\n<% end %>\n\nCopy\n","\n<form action=\"/people\" accept-charset=\"UTF-8\" method=\"post\">\n  <input type=\"hidden\" name=\"authenticity_token\" value=\"bL13x72pldyDD8bgtkjKQakJCpd4A8JdXGbfksxBDHdf1uC0kCMqe2tvVdUYfidJt0fj3ihC4NxiVHv8GVYxJA==\" />\n  <input type=\"text\" name=\"person[name]\" id=\"person_name\" />\n  <input type=\"text\" name=\"contact_detail[phone_number]\" id=\"contact_detail_phone_number\" />\n</form>\n\n<form action=\"/people\" accept-charset=\"UTF-8\" method=\"post\">\n  <input type=\"hidden\" name=\"authenticity_token\" value=\"bL13x72pldyDD8bgtkjKQakJCpd4A8JdXGbfksxBDHdf1uC0kCMqe2tvVdUYfidJt0fj3ihC4NxiVHv8GVYxJA==\" />\n  <input type=\"text\" name=\"person[name]\" id=\"person_name\" />\n  <input type=\"text\" name=\"contact_detail[phone_number]\" id=\"contact_detail_phone_number\" />\n</form>\n\nCopy\n"],"body":"You can create a similar binding without actually creating <form> tags with the fields_for helper. This is useful for editing additional model objects with the same form. For example, if you had a Person model with an associated ContactDetail model, you could create a form for creating both like so:which produces the following output:The object yielded by fields_for is a form builder like the one yielded by form_with."},{"title":"2.2 Relying on Record Identification","anchor":"#relying-on-record-identification","code":["\nresources :articles\n\nresources :articles\n\nCopy\n","\n## Creating a new article\n# long-style:\nform_with(model: @article, url: articles_path)\n# short-style:\nform_with(model: @article)\n\n## Editing an existing article\n# long-style:\nform_with(model: @article, url: article_path(@article), method: \"patch\")\n# short-style:\nform_with(model: @article)\n\n## Creating a new article\n# long-style:\nform_with(model: @article, url: articles_path)\n# short-style:\nform_with(model: @article)\n\n## Editing an existing article\n# long-style:\nform_with(model: @article, url: article_path(@article), method: \"patch\")\n# short-style:\nform_with(model: @article)\n\nCopy\n"],"body":"The Article model is directly available to users of the application, so - following the best practices for developing with Rails - you should declare it a resource:When dealing with RESTful resources, calls to form_with can get significantly easier if you rely on record identification. In short, you can just pass the model instance and have Rails figure out model name and the rest:Notice how the short-style form_with invocation is conveniently the same, regardless of the record being new or existing. Record identification is smart enough to figure out if the record is new by asking record.persisted?. It also selects the correct path to submit to, and the name based on the class of the object."},{"title":"2.2.1 Dealing with Namespaces","anchor":"#dealing-with-namespaces","code":["\nform_with model: [:admin, @article]\n\nform_with model: [:admin, @article]\n\nCopy\n","\nform_with model: [:admin, :management, @article]\n\nform_with model: [:admin, :management, @article]\n\nCopy\n"],"body":"If you have created namespaced routes, form_with has a nifty shorthand for that too. If your application has an admin namespace thenwill create a form that submits to the ArticlesController inside the admin namespace (submitting to admin_article_path(@article) in the case of an update). If you have several levels of namespacing then the syntax is similar:For more information on Rails' routing system and the associated conventions, please see Rails Routing from the Outside In guide."},{"title":"2.3 How do forms with PATCH, PUT, or DELETE methods work?","anchor":"#how-do-forms-with-patch-put-or-delete-methods-work-questionmark","code":["\nform_with(url: search_path, method: \"patch\")\n\nform_with(url: search_path, method: \"patch\")\n\nCopy\n","\n<form accept-charset=\"UTF-8\" action=\"/search\" method=\"post\">\n  <input name=\"_method\" type=\"hidden\" value=\"patch\" />\n  <input name=\"authenticity_token\" type=\"hidden\" value=\"f755bb0ed134b76c432144748a6d4b7a7ddf2b71\" />\n  ...\n</form>\n\n<form accept-charset=\"UTF-8\" action=\"/search\" method=\"post\">\n  <input name=\"_method\" type=\"hidden\" value=\"patch\" />\n  <input name=\"authenticity_token\" type=\"hidden\" value=\"f755bb0ed134b76c432144748a6d4b7a7ddf2b71\" />\n  ...\n</form>\n\nCopy\n"],"body":"The Rails framework encourages RESTful design of your applications, which means you'll be making a lot of \"PATCH\", \"PUT\", and \"DELETE\" requests (besides \"GET\" and \"POST\"). However, most browsers don't support methods other than \"GET\" and \"POST\" when it comes to submitting forms.Rails works around this issue by emulating other methods over POST with a hidden input named \"_method\", which is set to reflect the desired method:Output:When parsing POSTed data, Rails will take into account the special _method parameter and act as if the HTTP method was the one specified inside it (\"PATCH\" in this example)."},{"title":"3 Making Select Boxes with Ease","anchor":"#making-select-boxes-with-ease","code":["\n<%= form.select :city, [\"Berlin\", \"Chicago\", \"Madrid\"] %>\n\n<%= form.select :city, [\"Berlin\", \"Chicago\", \"Madrid\"] %>\n\nCopy\n","\n<select name=\"city\" id=\"city\">\n  <option value=\"Berlin\">Berlin</option>\n  <option value=\"Chicago\">Chicago</option>\n  <option value=\"Madrid\">Madrid</option>\n</select>\n\n<select name=\"city\" id=\"city\">\n  <option value=\"Berlin\">Berlin</option>\n  <option value=\"Chicago\">Chicago</option>\n  <option value=\"Madrid\">Madrid</option>\n</select>\n\nCopy\n","\n<%= form.select :city, [[\"Berlin\", \"BE\"], [\"Chicago\", \"CHI\"], [\"Madrid\", \"MD\"]] %>\n\n<%= form.select :city, [[\"Berlin\", \"BE\"], [\"Chicago\", \"CHI\"], [\"Madrid\", \"MD\"]] %>\n\nCopy\n","\n<select name=\"city\" id=\"city\">\n  <option value=\"BE\">Berlin</option>\n  <option value=\"CHI\">Chicago</option>\n  <option value=\"MD\">Madrid</option>\n</select>\n\n<select name=\"city\" id=\"city\">\n  <option value=\"BE\">Berlin</option>\n  <option value=\"CHI\">Chicago</option>\n  <option value=\"MD\">Madrid</option>\n</select>\n\nCopy\n","\n<%= form.select :city, [[\"Berlin\", \"BE\"], [\"Chicago\", \"CHI\"], [\"Madrid\", \"MD\"]], selected: \"CHI\" %>\n\n<%= form.select :city, [[\"Berlin\", \"BE\"], [\"Chicago\", \"CHI\"], [\"Madrid\", \"MD\"]], selected: \"CHI\" %>\n\nCopy\n","\n<select name=\"city\" id=\"city\">\n  <option value=\"BE\">Berlin</option>\n  <option value=\"CHI\" selected=\"selected\">Chicago</option>\n  <option value=\"MD\">Madrid</option>\n</select>\n\n<select name=\"city\" id=\"city\">\n  <option value=\"BE\">Berlin</option>\n  <option value=\"CHI\" selected=\"selected\">Chicago</option>\n  <option value=\"MD\">Madrid</option>\n</select>\n\nCopy\n"],"body":"Select boxes in HTML require a significant amount of markup - one <option> element for each option to choose from. So Rails provides helper methods to reduce this burden.For example, let's say we have a list of cities for the user to choose from. We can use the select helper like so:Output:We can also designate <option> values that differ from their labels:Output:This way, the user will see the full city name, but params[:city] will be one of \"BE\", \"CHI\", or \"MD\".Lastly, we can specify a default choice for the select box with the :selected argument:Output:"},{"code":["\n<%= form.select :city,\n      {\n        \"Europe\" => [ [\"Berlin\", \"BE\"], [\"Madrid\", \"MD\"] ],\n        \"North America\" => [ [\"Chicago\", \"CHI\"] ],\n      },\n      selected: \"CHI\" %>\n\n<%= form.select :city,\n      {\n        \"Europe\" => [ [\"Berlin\", \"BE\"], [\"Madrid\", \"MD\"] ],\n        \"North America\" => [ [\"Chicago\", \"CHI\"] ],\n      },\n      selected: \"CHI\" %>\n\nCopy\n","\n<select name=\"city\" id=\"city\">\n  <optgroup label=\"Europe\">\n    <option value=\"BE\">Berlin</option>\n    <option value=\"MD\">Madrid</option>\n  </optgroup>\n  <optgroup label=\"North America\">\n    <option value=\"CHI\" selected=\"selected\">Chicago</option>\n  </optgroup>\n</select>\n\n<select name=\"city\" id=\"city\">\n  <optgroup label=\"Europe\">\n    <option value=\"BE\">Berlin</option>\n    <option value=\"MD\">Madrid</option>\n  </optgroup>\n  <optgroup label=\"North America\">\n    <option value=\"CHI\" selected=\"selected\">Chicago</option>\n  </optgroup>\n</select>\n\nCopy\n"],"body":"In some cases we may want to improve the user experience by grouping related options together. We can do so by passing a Hash (or comparable Array) to select:Output:","title":"3.1 Option Groups","anchor":"#option-groups"},{"code":["\n@person = Person.new(city: \"MD\")\n\n@person = Person.new(city: \"MD\")\n\nCopy\n","\n<%= form_with model: @person do |form| %>\n  <%= form.select :city, [[\"Berlin\", \"BE\"], [\"Chicago\", \"CHI\"], [\"Madrid\", \"MD\"]] %>\n<% end %>\n\n<%= form_with model: @person do |form| %>\n  <%= form.select :city, [[\"Berlin\", \"BE\"], [\"Chicago\", \"CHI\"], [\"Madrid\", \"MD\"]] %>\n<% end %>\n\nCopy\n","\n<select name=\"person[city]\" id=\"person_city\">\n  <option value=\"BE\">Berlin</option>\n  <option value=\"CHI\">Chicago</option>\n  <option value=\"MD\" selected=\"selected\">Madrid</option>\n</select>\n\n<select name=\"person[city]\" id=\"person_city\">\n  <option value=\"BE\">Berlin</option>\n  <option value=\"CHI\">Chicago</option>\n  <option value=\"MD\" selected=\"selected\">Madrid</option>\n</select>\n\nCopy\n"],"body":"Like other form controls, a select box can be bound to a model attribute. For example, if we have a @person model object like:The following form:Outputs a select box like:Notice that the appropriate option was automatically marked selected=\"selected\". Since this select box was bound to a model, we didn't need to specify a :selected argument!","title":"3.2 Select Boxes and Model Objects","anchor":"#select-boxes-and-model-objects"},{"title":"3.3 Time Zone and Country Select","anchor":"#time-zone-and-country-select","code":["\n<%= form.time_zone_select :time_zone %>\n\n<%= form.time_zone_select :time_zone %>\n\nCopy\n"],"body":"To leverage time zone support in Rails, you have to ask your users what time zone they are in. Doing so would require generating select options from a list of pre-defined ActiveSupport::TimeZone objects, but you can simply use the time_zone_select helper that already wraps this:Rails used to have a country_select helper for choosing countries, but this has been extracted to the country_select plugin."},{"title":"4 Using Date and Time Form Helpers","anchor":"#using-date-and-time-form-helpers","code":["\n@person = Person.new(birth_date: Date.new(1995, 12, 21))\n\n@person = Person.new(birth_date: Date.new(1995, 12, 21))\n\nCopy\n","\n<%= form_with model: @person do |form| %>\n  <%= form.date_select :birth_date %>\n<% end %>\n\n<%= form_with model: @person do |form| %>\n  <%= form.date_select :birth_date %>\n<% end %>\n\nCopy\n","\n<select name=\"person[birth_date(1i)]\" id=\"person_birth_date_1i\">\n  <option value=\"1990\">1990</option>\n  <option value=\"1991\">1991</option>\n  <option value=\"1992\">1992</option>\n  <option value=\"1993\">1993</option>\n  <option value=\"1994\">1994</option>\n  <option value=\"1995\" selected=\"selected\">1995</option>\n  <option value=\"1996\">1996</option>\n  <option value=\"1997\">1997</option>\n  <option value=\"1998\">1998</option>\n  <option value=\"1999\">1999</option>\n  <option value=\"2000\">2000</option>\n</select>\n<select name=\"person[birth_date(2i)]\" id=\"person_birth_date_2i\">\n  <option value=\"1\">January</option>\n  <option value=\"2\">February</option>\n  <option value=\"3\">March</option>\n  <option value=\"4\">April</option>\n  <option value=\"5\">May</option>\n  <option value=\"6\">June</option>\n  <option value=\"7\">July</option>\n  <option value=\"8\">August</option>\n  <option value=\"9\">September</option>\n  <option value=\"10\">October</option>\n  <option value=\"11\">November</option>\n  <option value=\"12\" selected=\"selected\">December</option>\n</select>\n<select name=\"person[birth_date(3i)]\" id=\"person_birth_date_3i\">\n  <option value=\"1\">1</option>\n  ...\n  <option value=\"21\" selected=\"selected\">21</option>\n  ...\n  <option value=\"31\">31</option>\n</select>\n\n<select name=\"person[birth_date(1i)]\" id=\"person_birth_date_1i\">\n  <option value=\"1990\">1990</option>\n  <option value=\"1991\">1991</option>\n  <option value=\"1992\">1992</option>\n  <option value=\"1993\">1993</option>\n  <option value=\"1994\">1994</option>\n  <option value=\"1995\" selected=\"selected\">1995</option>\n  <option value=\"1996\">1996</option>\n  <option value=\"1997\">1997</option>\n  <option value=\"1998\">1998</option>\n  <option value=\"1999\">1999</option>\n  <option value=\"2000\">2000</option>\n</select>\n<select name=\"person[birth_date(2i)]\" id=\"person_birth_date_2i\">\n  <option value=\"1\">January</option>\n  <option value=\"2\">February</option>\n  <option value=\"3\">March</option>\n  <option value=\"4\">April</option>\n  <option value=\"5\">May</option>\n  <option value=\"6\">June</option>\n  <option value=\"7\">July</option>\n  <option value=\"8\">August</option>\n  <option value=\"9\">September</option>\n  <option value=\"10\">October</option>\n  <option value=\"11\">November</option>\n  <option value=\"12\" selected=\"selected\">December</option>\n</select>\n<select name=\"person[birth_date(3i)]\" id=\"person_birth_date_3i\">\n  <option value=\"1\">1</option>\n  ...\n  <option value=\"21\" selected=\"selected\">21</option>\n  ...\n  <option value=\"31\">31</option>\n</select>\n\nCopy\n"],"body":"If you do not wish to use HTML5 date and time inputs, Rails provides alternative date and time form helpers that render plain select boxes. These helpers render a select box for each temporal component (e.g. year, month, day, etc). For example, if we have a @person model object like:The following form:Outputs select boxes like:Notice that, when the form is submitted, there will be no single value in the params hash that contains the full date. Instead, there will be several values with special names like \"birth_date(1i)\". Active Record knows how to assemble these specially-named values into a full date or time, based on the declared type of the model attribute. So we can pass params[:person] to e.g. Person.new or Person#update just like we would if the form used a single field to represent the full date.In addition to the date_select helper, Rails provides time_select and datetime_select."},{"title":"4.1 Select Boxes for Individual Temporal Components","anchor":"#select-boxes-for-individual-temporal-components","code":["\n<%= select_year 1999, prefix: \"party\" %>\n\n<%= select_year 1999, prefix: \"party\" %>\n\nCopy\n","\n<select name=\"party[year]\" id=\"party_year\">\n  <option value=\"1994\">1994</option>\n  <option value=\"1995\">1995</option>\n  <option value=\"1996\">1996</option>\n  <option value=\"1997\">1997</option>\n  <option value=\"1998\">1998</option>\n  <option value=\"1999\" selected=\"selected\">1999</option>\n  <option value=\"2000\">2000</option>\n  <option value=\"2001\">2001</option>\n  <option value=\"2002\">2002</option>\n  <option value=\"2003\">2003</option>\n  <option value=\"2004\">2004</option>\n</select>\n\n<select name=\"party[year]\" id=\"party_year\">\n  <option value=\"1994\">1994</option>\n  <option value=\"1995\">1995</option>\n  <option value=\"1996\">1996</option>\n  <option value=\"1997\">1997</option>\n  <option value=\"1998\">1998</option>\n  <option value=\"1999\" selected=\"selected\">1999</option>\n  <option value=\"2000\">2000</option>\n  <option value=\"2001\">2001</option>\n  <option value=\"2002\">2002</option>\n  <option value=\"2003\">2003</option>\n  <option value=\"2004\">2004</option>\n</select>\n\nCopy\n"],"body":"Rails also provides helpers to render select boxes for individual temporal components: select_year, select_month, select_day, select_hour, select_minute, and select_second.  These helpers are \"bare\" methods, meaning they are not called on a form builder instance.  For example:Outputs a select box like:For each of these helpers, you may specify a date or time object instead of a number as the default value, and the appropriate temporal component will be extracted and used."},{"title":"5 Choices from a Collection of Arbitrary Objects","anchor":"#choices-from-a-collection-of-arbitrary-objects","code":["\nCity.order(:name).to_a\n# => [\n#      #<City id: 3, name: \"Berlin\">,\n#      #<City id: 1, name: \"Chicago\">,\n#      #<City id: 2, name: \"Madrid\">\n#    ]\n\nCity.order(:name).to_a\n# => [\n#      #<City id: 3, name: \"Berlin\">,\n#      #<City id: 1, name: \"Chicago\">,\n#      #<City id: 2, name: \"Madrid\">\n#    ]\n\nCopy\n"],"body":"Often, we want to generate a set of choices in a form from a collection of objects. For example, when we want the user to choose from cities in our database, and we have a City model like:Rails provides helpers that generate choices from a collection without having to explicitly iterate over it. These helpers determine the value and text label of each choice by calling specified methods on each object in the collection."},{"title":"5.1 The collection_select Helper","anchor":"#the-collection-select-helper","code":["\n<%= form.collection_select :city_id, City.order(:name), :id, :name %>\n\n<%= form.collection_select :city_id, City.order(:name), :id, :name %>\n\nCopy\n","\n<select name=\"city_id\" id=\"city_id\">\n  <option value=\"3\">Berlin</option>\n  <option value=\"1\">Chicago</option>\n  <option value=\"2\">Madrid</option>\n</select>\n\n<select name=\"city_id\" id=\"city_id\">\n  <option value=\"3\">Berlin</option>\n  <option value=\"1\">Chicago</option>\n  <option value=\"2\">Madrid</option>\n</select>\n\nCopy\n"],"body":"To generate a select box for our cities, we can use collection_select:Output:"},{"title":"5.2 The collection_radio_buttons Helper","anchor":"#the-collection-radio-buttons-helper","code":["\n<%= form.collection_radio_buttons :city_id, City.order(:name), :id, :name %>\n\n<%= form.collection_radio_buttons :city_id, City.order(:name), :id, :name %>\n\nCopy\n","\n<input type=\"radio\" name=\"city_id\" value=\"3\" id=\"city_id_3\">\n<label for=\"city_id_3\">Berlin</label>\n<input type=\"radio\" name=\"city_id\" value=\"1\" id=\"city_id_1\">\n<label for=\"city_id_1\">Chicago</label>\n<input type=\"radio\" name=\"city_id\" value=\"2\" id=\"city_id_2\">\n<label for=\"city_id_2\">Madrid</label>\n\n<input type=\"radio\" name=\"city_id\" value=\"3\" id=\"city_id_3\">\n<label for=\"city_id_3\">Berlin</label>\n<input type=\"radio\" name=\"city_id\" value=\"1\" id=\"city_id_1\">\n<label for=\"city_id_1\">Chicago</label>\n<input type=\"radio\" name=\"city_id\" value=\"2\" id=\"city_id_2\">\n<label for=\"city_id_2\">Madrid</label>\n\nCopy\n"],"body":"To generate a set of radio buttons for our cities, we can use collection_radio_buttons:Output:"},{"code":["\n<%= form.collection_check_boxes :city_id, City.order(:name), :id, :name %>\n\n<%= form.collection_check_boxes :city_id, City.order(:name), :id, :name %>\n\nCopy\n","\n<input type=\"checkbox\" name=\"city_id[]\" value=\"3\" id=\"city_id_3\">\n<label for=\"city_id_3\">Berlin</label>\n<input type=\"checkbox\" name=\"city_id[]\" value=\"1\" id=\"city_id_1\">\n<label for=\"city_id_1\">Chicago</label>\n<input type=\"checkbox\" name=\"city_id[]\" value=\"2\" id=\"city_id_2\">\n<label for=\"city_id_2\">Madrid</label>\n\n<input type=\"checkbox\" name=\"city_id[]\" value=\"3\" id=\"city_id_3\">\n<label for=\"city_id_3\">Berlin</label>\n<input type=\"checkbox\" name=\"city_id[]\" value=\"1\" id=\"city_id_1\">\n<label for=\"city_id_1\">Chicago</label>\n<input type=\"checkbox\" name=\"city_id[]\" value=\"2\" id=\"city_id_2\">\n<label for=\"city_id_2\">Madrid</label>\n\nCopy\n"],"body":"To generate a set of check boxes for our cities (which allows users to choose more than one), we can use collection_check_boxes:Output:","title":"5.3 The collection_check_boxes Helper","anchor":"#the-collection-check-boxes-helper"},{"code":["\n<%= form_with model: @person do |form| %>\n  <%= form.file_field :picture %>\n<% end %>\n\n<%= form_with model: @person do |form| %>\n  <%= form.file_field :picture %>\n<% end %>\n\nCopy\n","\n<%= form_with url: \"/uploads\", multipart: true do |form| %>\n  <%= form.file_field :picture %>\n<% end %>\n\n<%= form_with url: \"/uploads\", multipart: true do |form| %>\n  <%= form.file_field :picture %>\n<% end %>\n\nCopy\n"],"body":"A common task is uploading some sort of file, whether it's a picture of a person or a CSV file containing data to process. File upload fields can be rendered with the file_field helper. The most important thing to remember with file uploads is that the rendered form's enctype attribute must be set to \"multipart/form-data\". If you use form_with with :model, this is done automatically:If you use form_with without :model, you must set it yourself:Note that, in accordance with form_with conventions, the field names in the two forms above will also differ.  That is, the field name in the first form will be person[picture] (accessible via params[:person][:picture]), and the field name in the second form will be just picture (accessible via params[:picture]).","title":"6 Uploading Files","anchor":"#uploading-files"},{"title":"6.1 What Gets Uploaded","anchor":"#what-gets-uploaded","code":["\ndef upload\n  uploaded_file = params[:picture]\n  File.open(Rails.root.join('public', 'uploads', uploaded_file.original_filename), 'wb') do |file|\n    file.write(uploaded_file.read)\n  end\nend\n\ndef upload\n  uploaded_file = params[:picture]\n  File.open(Rails.root.join('public', 'uploads', uploaded_file.original_filename), 'wb') do |file|\n    file.write(uploaded_file.read)\n  end\nend\n\nCopy\n"],"body":"The object in the params hash is an instance of ActionDispatch::Http::UploadedFile. The following snippet saves the uploaded file in #{Rails.root}/public/uploads under the same name as the original file.Once a file has been uploaded, there are a multitude of potential tasks, ranging from where to store the files (on Disk, Amazon S3, etc), associating them with models, resizing image files, and generating thumbnails, etc. Active Storage is designed to assist with these tasks."},{"title":"7 Customizing Form Builders","anchor":"#customizing-form-builders","code":["\n<%= form_with model: @person do |form| %>\n  <%= text_field_with_label form, :first_name %>\n<% end %>\n\n<%= form_with model: @person do |form| %>\n  <%= text_field_with_label form, :first_name %>\n<% end %>\n\nCopy\n","\n<%= form_with model: @person, builder: LabellingFormBuilder do |form| %>\n  <%= form.text_field :first_name %>\n<% end %>\n\n<%= form_with model: @person, builder: LabellingFormBuilder do |form| %>\n  <%= form.text_field :first_name %>\n<% end %>\n\nCopy\n","\nclass LabellingFormBuilder < ActionView::Helpers::FormBuilder\n  def text_field(attribute, options={})\n    label(attribute) + super\n  end\nend\n\nclass LabellingFormBuilder < ActionView::Helpers::FormBuilder\n  def text_field(attribute, options={})\n    label(attribute) + super\n  end\nend\n\nCopy\n","\ndef labeled_form_with(model: nil, scope: nil, url: nil, format: nil, **options, &block)\n  options.merge! builder: LabellingFormBuilder\n  form_with model: model, scope: scope, url: url, format: format, **options, &block\nend\n\ndef labeled_form_with(model: nil, scope: nil, url: nil, format: nil, **options, &block)\n  options.merge! builder: LabellingFormBuilder\n  form_with model: model, scope: scope, url: url, format: format, **options, &block\nend\n\nCopy\n","\n<%= render partial: f %>\n\n<%= render partial: f %>\n\nCopy\n"],"body":"The object yielded by form_with and fields_for is an instance of ActionView::Helpers::FormBuilder. Form builders encapsulate the notion of displaying form elements for a single object. While you can write helpers for your forms in the usual way, you can also create a subclass of ActionView::Helpers::FormBuilder, and add the helpers there. For example,can be replaced withby defining a LabellingFormBuilder class similar to the following:If you reuse this frequently you could define a labeled_form_with helper that automatically applies the builder: LabellingFormBuilder option:The form builder used also determines what happens when you do:If f is an instance of ActionView::Helpers::FormBuilder, then this will render the form partial, setting the partial's object to the form builder. If the form builder is of class LabellingFormBuilder, then the labelling_form partial would be rendered instead."},{"title":"8 Understanding Parameter Naming Conventions","anchor":"#understanding-parameter-naming-conventions","code":[],"body":"Values from forms can be at the top level of the params hash or nested in another hash. For example, in a standard create action for a Person model, params[:person] would usually be a hash of all the attributes for the person to create. The params hash can also contain arrays, arrays of hashes, and so on.Fundamentally HTML forms don't know about any sort of structured data, all they generate is name-value pairs, where pairs are just plain strings. The arrays and hashes you see in your application are the result of some parameter naming conventions that Rails uses."},{"title":"8.1 Basic Structures","anchor":"#basic-structures","code":["\n<input id=\"person_name\" name=\"person[name]\" type=\"text\" value=\"Henry\"/>\n\n<input id=\"person_name\" name=\"person[name]\" type=\"text\" value=\"Henry\"/>\n\nCopy\n","\n{'person' => {'name' => 'Henry'}}\n\n{'person' => {'name' => 'Henry'}}\n\nCopy\n","\n<input id=\"person_address_city\" name=\"person[address][city]\" type=\"text\" value=\"New York\"/>\n\n<input id=\"person_address_city\" name=\"person[address][city]\" type=\"text\" value=\"New York\"/>\n\nCopy\n","\n{'person' => {'address' => {'city' => 'New York'}}}\n\n{'person' => {'address' => {'city' => 'New York'}}}\n\nCopy\n","\n<input name=\"person[phone_number][]\" type=\"text\"/>\n<input name=\"person[phone_number][]\" type=\"text\"/>\n<input name=\"person[phone_number][]\" type=\"text\"/>\n\n<input name=\"person[phone_number][]\" type=\"text\"/>\n<input name=\"person[phone_number][]\" type=\"text\"/>\n<input name=\"person[phone_number][]\" type=\"text\"/>\n\nCopy\n"],"body":"The two basic structures are arrays and hashes. Hashes mirror the syntax used for accessing the value in params. For example, if a form contains:the params hash will containand params[:person][:name] will retrieve the submitted value in the controller.Hashes can be nested as many levels as required, for example:will result in the params hash beingNormally Rails ignores duplicate parameter names. If the parameter name ends with an empty set of square brackets [] then they will be accumulated in an array. If you wanted users to be able to input multiple phone numbers, you could place this in the form:This would result in params[:person][:phone_number] being an array containing the inputted phone numbers."},{"title":"8.2 Combining Them","anchor":"#combining-them","code":["\n<input name=\"person[addresses][][line1]\" type=\"text\"/>\n<input name=\"person[addresses][][line2]\" type=\"text\"/>\n<input name=\"person[addresses][][city]\" type=\"text\"/>\n<input name=\"person[addresses][][line1]\" type=\"text\"/>\n<input name=\"person[addresses][][line2]\" type=\"text\"/>\n<input name=\"person[addresses][][city]\" type=\"text\"/>\n\n<input name=\"person[addresses][][line1]\" type=\"text\"/>\n<input name=\"person[addresses][][line2]\" type=\"text\"/>\n<input name=\"person[addresses][][city]\" type=\"text\"/>\n<input name=\"person[addresses][][line1]\" type=\"text\"/>\n<input name=\"person[addresses][][line2]\" type=\"text\"/>\n<input name=\"person[addresses][][city]\" type=\"text\"/>\n\nCopy\n"],"body":"We can mix and match these two concepts. One element of a hash might be an array as in the previous example, or you can have an array of hashes. For example, a form might let you create any number of addresses by repeating the following form fragmentThis would result in params[:person][:addresses] being an array of hashes with keys line1, line2, and city.There's a restriction, however: while hashes can be nested arbitrarily, only one level of \"arrayness\" is allowed. Arrays can usually be replaced by hashes; for example, instead of having an array of model objects, one can have a hash of model objects keyed by their id, an array index, or some other parameter."},{"title":"8.3 The fields_for Helper","anchor":"#understanding-parameter-naming-conventions-the-fields-for-helper","code":["\n<%= form_with model: @person do |person_form| %>\n  <%= person_form.text_field :name %>\n  <% @person.addresses.each do |address| %>\n    <%= person_form.fields_for address, index: address.id do |address_form| %>\n      <%= address_form.text_field :city %>\n    <% end %>\n  <% end %>\n<% end %>\n\n<%= form_with model: @person do |person_form| %>\n  <%= person_form.text_field :name %>\n  <% @person.addresses.each do |address| %>\n    <%= person_form.fields_for address, index: address.id do |address_form| %>\n      <%= address_form.text_field :city %>\n    <% end %>\n  <% end %>\n<% end %>\n\nCopy\n","\n<form accept-charset=\"UTF-8\" action=\"/people/1\" method=\"post\">\n  <input name=\"_method\" type=\"hidden\" value=\"patch\" />\n  <input id=\"person_name\" name=\"person[name]\" type=\"text\" />\n  <input id=\"person_address_23_city\" name=\"person[address][23][city]\" type=\"text\" />\n  <input id=\"person_address_45_city\" name=\"person[address][45][city]\" type=\"text\" />\n</form>\n\n<form accept-charset=\"UTF-8\" action=\"/people/1\" method=\"post\">\n  <input name=\"_method\" type=\"hidden\" value=\"patch\" />\n  <input id=\"person_name\" name=\"person[name]\" type=\"text\" />\n  <input id=\"person_address_23_city\" name=\"person[address][23][city]\" type=\"text\" />\n  <input id=\"person_address_45_city\" name=\"person[address][45][city]\" type=\"text\" />\n</form>\n\nCopy\n","\n{'person' => {'name' => 'Bob', 'address' => {'23' => {'city' => 'Paris'}, '45' => {'city' => 'London'}}}}\n\n{'person' => {'name' => 'Bob', 'address' => {'23' => {'city' => 'Paris'}, '45' => {'city' => 'London'}}}}\n\nCopy\n","\n<%= fields_for 'person[address][primary]', address, index: address.id do |address_form| %>\n  <%= address_form.text_field :city %>\n<% end %>\n\n<%= fields_for 'person[address][primary]', address, index: address.id do |address_form| %>\n  <%= address_form.text_field :city %>\n<% end %>\n\nCopy\n","\n<input id=\"person_address_primary_1_city\" name=\"person[address][primary][1][city]\" type=\"text\" value=\"Bologna\" />\n\n<input id=\"person_address_primary_1_city\" name=\"person[address][primary][1][city]\" type=\"text\" value=\"Bologna\" />\n\nCopy\n","\n<%= fields_for 'person[address][primary][]', address do |address_form| %>\n  <%= address_form.text_field :city %>\n<% end %>\n\n<%= fields_for 'person[address][primary][]', address do |address_form| %>\n  <%= address_form.text_field :city %>\n<% end %>\n\nCopy\n"],"body":"Let's say we want to render a form with a set of fields for each of a person's addresses. The fields_for helper and its :index argument can assist with this:Assuming the person had two addresses, with ids 23 and 45 this would create output similar to this:This will result in a params hash that looks likeRails knows that all these inputs should be part of the person hash because you\ncalled fields_for on the first form builder. By specifying an :index option\nyou're telling Rails that instead of naming the inputs person[address][city]\nit should insert that index surrounded by [] between the address and the city.\nThis is often useful as it is then easy to locate which Address record\nshould be modified. You can pass numbers with some other significance,\nstrings or even nil (which will result in an array parameter being created).To create more intricate nestings, you can specify the first part of the input\nname (person[address] in the previous example) explicitly:will create inputs likeAs a general rule the final input name is the concatenation of the name given to fields_for/form_with, the index value, and the name of the attribute. You can also pass an :index option directly to helpers such as text_field, but it is usually less repetitive to specify this at the form builder level rather than on individual input controls.As a shortcut you can append [] to the name and omit the :index option. This is the same as specifying index: address.id soproduces exactly the same output as the previous example."},{"title":"9 Forms to External Resources","anchor":"#forms-to-external-resources","code":["\n<%= form_with url: 'http://farfar.away/form', authenticity_token: 'external_token' do %>\n  Form contents\n<% end %>\n\n<%= form_with url: 'http://farfar.away/form', authenticity_token: 'external_token' do %>\n  Form contents\n<% end %>\n\nCopy\n","\n<%= form_with url: 'http://farfar.away/form', authenticity_token: false do %>\n  Form contents\n<% end %>\n\n<%= form_with url: 'http://farfar.away/form', authenticity_token: false do %>\n  Form contents\n<% end %>\n\nCopy\n"],"body":"Rails' form helpers can also be used to build a form for posting data to an external resource. However, at times it can be necessary to set an authenticity_token for the resource; this can be done by passing an authenticity_token: 'your_external_token' parameter to the form_with options:Sometimes when submitting data to an external resource, like a payment gateway, the fields that can be used in the form are limited by an external API and it may be undesirable to generate an authenticity_token. To not send a token, simply pass false to the :authenticity_token option:"},{"code":[],"body":"Many apps grow beyond simple forms editing a single object. For example, when creating a Person you might want to allow the user to (on the same form) create multiple address records (home, work, etc.). When later editing that person the user should be able to add, remove, or amend addresses as necessary.","title":"10 Building Complex Forms","anchor":"#building-complex-forms"},{"title":"10.1 Configuring the Model","anchor":"#configuring-the-model","code":["\nclass Person < ApplicationRecord\n  has_many :addresses, inverse_of: :person\n  accepts_nested_attributes_for :addresses\nend\n\nclass Address < ApplicationRecord\n  belongs_to :person\nend\n\nclass Person < ApplicationRecord\n  has_many :addresses, inverse_of: :person\n  accepts_nested_attributes_for :addresses\nend\n\nclass Address < ApplicationRecord\n  belongs_to :person\nend\n\nCopy\n"],"body":"Active Record provides model level support via the accepts_nested_attributes_for method:This creates an addresses_attributes= method on Person that allows you to create, update, and (optionally) destroy addresses."},{"title":"10.2 Nested Forms","anchor":"#nested-forms","code":["\n<%= form_with model: @person do |form| %>\n  Addresses:\n  <ul>\n    <%= form.fields_for :addresses do |addresses_form| %>\n      <li>\n        <%= addresses_form.label :kind %>\n        <%= addresses_form.text_field :kind %>\n\n        <%= addresses_form.label :street %>\n        <%= addresses_form.text_field :street %>\n        ...\n      </li>\n    <% end %>\n  </ul>\n<% end %>\n\n<%= form_with model: @person do |form| %>\n  Addresses:\n  <ul>\n    <%= form.fields_for :addresses do |addresses_form| %>\n      <li>\n        <%= addresses_form.label :kind %>\n        <%= addresses_form.text_field :kind %>\n\n        <%= addresses_form.label :street %>\n        <%= addresses_form.text_field :street %>\n        ...\n      </li>\n    <% end %>\n  </ul>\n<% end %>\n\nCopy\n","\ndef new\n  @person = Person.new\n  2.times { @person.addresses.build }\nend\n\ndef new\n  @person = Person.new\n  2.times { @person.addresses.build }\nend\n\nCopy\n","\n{\n  'person' => {\n    'name' => 'John Doe',\n    'addresses_attributes' => {\n      '0' => {\n        'kind' => 'Home',\n        'street' => '221b Baker Street'\n      },\n      '1' => {\n        'kind' => 'Office',\n        'street' => '31 Spooner Street'\n      }\n    }\n  }\n}\n\n{\n  'person' => {\n    'name' => 'John Doe',\n    'addresses_attributes' => {\n      '0' => {\n        'kind' => 'Home',\n        'street' => '221b Baker Street'\n      },\n      '1' => {\n        'kind' => 'Office',\n        'street' => '31 Spooner Street'\n      }\n    }\n  }\n}\n\nCopy\n"],"body":"The following form allows a user to create a Person and its associated addresses.When an association accepts nested attributes fields_for renders its block once for every element of the association. In particular, if a person has no addresses it renders nothing. A common pattern is for the controller to build one or more empty children so that at least one set of fields is shown to the user. The example below would result in 2 sets of address fields being rendered on the new person form.The fields_for yields a form builder. The parameters' name will be what\naccepts_nested_attributes_for expects. For example, when creating a user with\n2 addresses, the submitted parameters would look like:The keys of the :addresses_attributes hash are unimportant, they need merely be different for each address.If the associated object is already saved, fields_for autogenerates a hidden input with the id of the saved record. You can disable this by passing include_id: false to fields_for."},{"title":"10.3 The Controller","anchor":"#the-controller","code":["\ndef create\n  @person = Person.new(person_params)\n  # ...\nend\n\nprivate\n  def person_params\n    params.require(:person).permit(:name, addresses_attributes: [:id, :kind, :street])\n  end\n\ndef create\n  @person = Person.new(person_params)\n  # ...\nend\n\nprivate\n  def person_params\n    params.require(:person).permit(:name, addresses_attributes: [:id, :kind, :street])\n  end\n\nCopy\n"],"body":"As usual you need to\ndeclare the permitted parameters in\nthe controller before you pass them to the model:"},{"code":["\nclass Person < ApplicationRecord\n  has_many :addresses\n  accepts_nested_attributes_for :addresses, allow_destroy: true\nend\n\nclass Person < ApplicationRecord\n  has_many :addresses\n  accepts_nested_attributes_for :addresses, allow_destroy: true\nend\n\nCopy\n","\n<%= form_with model: @person do |form| %>\n  Addresses:\n  <ul>\n    <%= form.fields_for :addresses do |addresses_form| %>\n      <li>\n        <%= addresses_form.check_box :_destroy %>\n        <%= addresses_form.label :kind %>\n        <%= addresses_form.text_field :kind %>\n        ...\n      </li>\n    <% end %>\n  </ul>\n<% end %>\n\n<%= form_with model: @person do |form| %>\n  Addresses:\n  <ul>\n    <%= form.fields_for :addresses do |addresses_form| %>\n      <li>\n        <%= addresses_form.check_box :_destroy %>\n        <%= addresses_form.label :kind %>\n        <%= addresses_form.text_field :kind %>\n        ...\n      </li>\n    <% end %>\n  </ul>\n<% end %>\n\nCopy\n","\ndef person_params\n  params.require(:person).\n    permit(:name, addresses_attributes: [:id, :kind, :street, :_destroy])\nend\n\ndef person_params\n  params.require(:person).\n    permit(:name, addresses_attributes: [:id, :kind, :street, :_destroy])\nend\n\nCopy\n"],"body":"You can allow users to delete associated objects by passing allow_destroy: true to accepts_nested_attributes_forIf the hash of attributes for an object contains the key _destroy with a value that\nevaluates to true (e.g. 1, '1', true, or 'true') then the object will be destroyed.\nThis form allows users to remove addresses:Don't forget to update the permitted params in your controller to also include\nthe _destroy field:","title":"10.4 Removing Objects","anchor":"#removing-objects"},{"code":["\nclass Person < ApplicationRecord\n  has_many :addresses\n  accepts_nested_attributes_for :addresses, reject_if: lambda {|attributes| attributes['kind'].blank?}\nend\n\nclass Person < ApplicationRecord\n  has_many :addresses\n  accepts_nested_attributes_for :addresses, reject_if: lambda {|attributes| attributes['kind'].blank?}\nend\n\nCopy\n"],"body":"It is often useful to ignore sets of fields that the user has not filled in. You can control this by passing a :reject_if proc to accepts_nested_attributes_for. This proc will be called with each hash of attributes submitted by the form. If the proc returns false then Active Record will not build an associated object for that hash. The example below only tries to build an address if the kind attribute is set.As a convenience you can instead pass the symbol :all_blank which will create a proc that will reject records where all the attributes are blank excluding any value for _destroy.","title":"10.5 Preventing Empty Records","anchor":"#preventing-empty-records"},{"title":"10.6 Adding Fields on the Fly","anchor":"#adding-fields-on-the-fly","code":[],"body":"Rather than rendering multiple sets of fields ahead of time you may wish to add them only when a user clicks on an \"Add new address\" button. Rails does not provide any built-in support for this. When generating new sets of fields you must ensure the key of the associated array is unique - the current JavaScript date (milliseconds since the epoch) is a common choice."},{"title":"11 Using Tag Helpers Without a Form Builder","anchor":"#using-tag-helpers-without-a-form-builder","code":["\n<%= check_box_tag \"accept\" %>\n\n<%= check_box_tag \"accept\" %>\n\nCopy\n","\n<input type=\"checkbox\" name=\"accept\" id=\"accept\" value=\"1\" />\n\n<input type=\"checkbox\" name=\"accept\" id=\"accept\" value=\"1\" />\n\nCopy\n"],"body":"In case you need to render form fields outside of the context of a form builder, Rails provides tag helpers for common form elements. For example, check_box_tag:Output:Generally, these helpers have the same name as their form builder counterparts plus a _tag suffix.  For a complete list, see the FormTagHelper API documentation."},{"title":"12 Using form_tag and form_for","anchor":"#using-form-tag-and-form-for","code":[],"body":"Before form_with was introduced in Rails 5.1 its functionality used to be split between form_tag and form_for. Both are now soft-deprecated. Documentation on their usage can be found in older versions of this guide."}]