[{"code":["\n$ rails new myapp\n$ cd myapp\n$ bin/rails generate\n\nrails new myapp\ncd myapp\nbin/rails generate\n\nCopy\n","\n$ bin/rails generate helper --help\n\nbin/rails generate helper --help\n\nCopy\n"],"body":"When you create an application using the rails command, you are in fact using a Rails generator. After that, you can get a list of all available generators by just invoking bin/rails generate:You will get a list of all generators that come with Rails. If you need a detailed description of the helper generator, for example, you can simply do:","title":"1 First Contact","anchor":"#first-contact"},{"code":["\nclass InitializerGenerator < Rails::Generators::Base\n  def create_initializer_file\n    create_file \"config/initializers/initializer.rb\", \"# Add initialization content here\"\n  end\nend\n\nclass InitializerGenerator < Rails::Generators::Base\n  def create_initializer_file\n    create_file \"config/initializers/initializer.rb\", \"# Add initialization content here\"\n  end\nend\n\nCopy\n","\n$ bin/rails generate initializer\n\nbin/rails generate initializer\n\nCopy\n","\n$ bin/rails generate initializer --help\n\nbin/rails generate initializer --help\n\nCopy\n","\nclass InitializerGenerator < Rails::Generators::Base\n  desc \"This generator creates an initializer file at config/initializers\"\n  def create_initializer_file\n    create_file \"config/initializers/initializer.rb\", \"# Add initialization content here\"\n  end\nend\n\nclass InitializerGenerator < Rails::Generators::Base\n  desc \"This generator creates an initializer file at config/initializers\"\n  def create_initializer_file\n    create_file \"config/initializers/initializer.rb\", \"# Add initialization content here\"\n  end\nend\n\nCopy\n"],"body":"Since Rails 3.0, generators are built on top of Thor. Thor provides powerful options for parsing and a great API for manipulating files. For instance, let's build a generator that creates an initializer file named initializer.rb inside config/initializers.The first step is to create a file at lib/generators/initializer_generator.rb with the following content:Our new generator is quite simple: it inherits from Rails::Generators::Base and has one method definition. When a generator is invoked, each public method in the generator is executed sequentially in the order that it is defined. Finally, we invoke the create_file method that will create a file at the given destination with the given content. If you are familiar with the Rails Application Templates API, you'll feel right at home with the new generators API.To invoke our new generator, we just need to do:Before we go on, let's see our brand new generator description:Rails is usually able to generate good descriptions if a generator is namespaced, as ActiveRecord::Generators::ModelGenerator, but not in this particular case. We can solve this problem in two ways. The first one is calling desc inside our generator:Now we can see the new description by invoking --help on the new generator. The second way to add a description is by creating a file named USAGE in the same directory as our generator. We are going to do that in the next step.","title":"2 Creating Your First Generator","anchor":"#creating-your-first-generator"},{"title":"3 Creating Generators with Generators","anchor":"#creating-generators-with-generators","code":["\n$ bin/rails generate generator initializer\n      create  lib/generators/initializer\n      create  lib/generators/initializer/initializer_generator.rb\n      create  lib/generators/initializer/USAGE\n      create  lib/generators/initializer/templates\n      invoke  test_unit\n      create    test/lib/generators/initializer_generator_test.rb\n\nbin/rails generate generator initializer\n\nCopy\n","\nclass InitializerGenerator < Rails::Generators::NamedBase\n  source_root File.expand_path('templates', __dir__)\nend\n\nclass InitializerGenerator < Rails::Generators::NamedBase\n  source_root File.expand_path('templates', __dir__)\nend\n\nCopy\n","\n$ bin/rails generate initializer --help\nUsage:\n  bin/rails generate initializer NAME [options]\n\nbin/rails generate initializer --help\n\nCopy\n","\n# Add initialization content here\n\n# Add initialization content here\n\nCopy\n","\nclass InitializerGenerator < Rails::Generators::NamedBase\n  source_root File.expand_path('templates', __dir__)\n\n  def copy_initializer_file\n    copy_file \"initializer.rb\", \"config/initializers/#{file_name}.rb\"\n  end\nend\n\nclass InitializerGenerator < Rails::Generators::NamedBase\n  source_root File.expand_path('templates', __dir__)\n\n  def copy_initializer_file\n    copy_file \"initializer.rb\", \"config/initializers/#{file_name}.rb\"\n  end\nend\n\nCopy\n","\n$ bin/rails generate initializer core_extensions\n\nbin/rails generate initializer core_extensions\n\nCopy\n"],"body":"Generators themselves have a generator:This is the generator just created:First, notice that we are inheriting from Rails::Generators::NamedBase instead of Rails::Generators::Base. This means that our generator expects at least one argument, which will be the name of the initializer, and will be available in our code in the variable name.We can see that by invoking the description of this new generator (don't forget to delete the old generator file):We can also see that our new generator has a class method called source_root. This method points to where our generator templates will be placed, if any, and by default it points to the created directory lib/generators/initializer/templates.In order to understand what a generator template means, let's create the file lib/generators/initializer/templates/initializer.rb with the following content:And now let's change the generator to copy this template when invoked:And let's execute our generator:We can see that now an initializer named core_extensions was created at config/initializers/core_extensions.rb with the contents of our template. That means that copy_file copied a file in our source root to the destination path we gave. The method file_name is automatically created when we inherit from Rails::Generators::NamedBase.The methods that are available for generators are covered in the final section of this guide."},{"title":"4 Generators Lookup","anchor":"#generators-lookup","code":["\nrails/generators/initializer/initializer_generator.rb\ngenerators/initializer/initializer_generator.rb\nrails/generators/initializer_generator.rb\ngenerators/initializer_generator.rb\n\nrails/generators/initializer/initializer_generator.rb\ngenerators/initializer/initializer_generator.rb\nrails/generators/initializer_generator.rb\ngenerators/initializer_generator.rb\n\nCopy\n"],"body":"When you run bin/rails generate initializer core_extensions Rails requires these files in turn until one is found:If none is found you get an error message."},{"title":"5 Customizing Your Workflow","anchor":"#customizing-your-workflow","code":["\nconfig.generators do |g|\n  g.orm             :active_record\n  g.template_engine :erb\n  g.test_framework  :test_unit, fixture: true\nend\n\nconfig.generators do |g|\n  g.orm             :active_record\n  g.template_engine :erb\n  g.test_framework  :test_unit, fixture: true\nend\n\nCopy\n","\n$ bin/rails generate scaffold User name:string\n      invoke  active_record\n      create    db/migrate/20130924151154_create_users.rb\n      create    app/models/user.rb\n      invoke    test_unit\n      create      test/models/user_test.rb\n      create      test/fixtures/users.yml\n      invoke  resource_route\n       route    resources :users\n      invoke  scaffold_controller\n      create    app/controllers/users_controller.rb\n      invoke    erb\n      create      app/views/users\n      create      app/views/users/index.html.erb\n      create      app/views/users/edit.html.erb\n      create      app/views/users/show.html.erb\n      create      app/views/users/new.html.erb\n      create      app/views/users/_form.html.erb\n      invoke    test_unit\n      create      test/controllers/users_controller_test.rb\n      invoke    helper\n      create      app/helpers/users_helper.rb\n      invoke    jbuilder\n      create      app/views/users/index.json.jbuilder\n      create      app/views/users/show.json.jbuilder\n      invoke  test_unit\n      create    test/application_system_test_case.rb\n      create    test/system/users_test.rb\n      invoke  assets\n      invoke    scss\n      create      app/assets/stylesheets/users.scss\n      invoke  scss\n      create    app/assets/stylesheets/scaffolds.scss\n\nbin/rails generate scaffold User name:string\n\nCopy\n","\n  config.generators do |g|\n    g.scaffold_stylesheet false\n  end\n\n  config.generators do |g|\n    g.scaffold_stylesheet false\n  end\n\nCopy\n","\nconfig.generators do |g|\n  g.orm             :active_record\n  g.template_engine :erb\n  g.test_framework  :test_unit, fixture: false\n  g.stylesheets     false\nend\n\nconfig.generators do |g|\n  g.orm             :active_record\n  g.template_engine :erb\n  g.test_framework  :test_unit, fixture: false\n  g.stylesheets     false\nend\n\nCopy\n","\n$ bin/rails generate generator rails/my_helper\n      create  lib/generators/rails/my_helper\n      create  lib/generators/rails/my_helper/my_helper_generator.rb\n      create  lib/generators/rails/my_helper/USAGE\n      create  lib/generators/rails/my_helper/templates\n      invoke  test_unit\n      create    test/lib/generators/rails/my_helper_generator_test.rb\n\nbin/rails generate generator rails/my_helper\n\nCopy\n","\n# lib/generators/rails/my_helper/my_helper_generator.rb\nclass Rails::MyHelperGenerator < Rails::Generators::NamedBase\n  def create_helper_file\n    create_file \"app/helpers/#{file_name}_helper.rb\", <<-FILE\nmodule #{class_name}Helper\n  attr_reader :#{plural_name}, :#{plural_name.singularize}\nend\n    FILE\n  end\nend\n\n# lib/generators/rails/my_helper/my_helper_generator.rb\nclass Rails::MyHelperGenerator < Rails::Generators::NamedBase\n  def create_helper_file\n    create_file \"app/helpers/#{file_name}_helper.rb\", <<-FILE\nmodule #{class_name}Helper\n  attr_reader :#{plural_name}, :#{plural_name.singularize}\nend\n    FILE\n  end\nend\n\nCopy\n","\n$ bin/rails generate my_helper products\n      create  app/helpers/products_helper.rb\n\nbin/rails generate my_helper products\n\nCopy\n","\nmodule ProductsHelper\n  attr_reader :products, :product\nend\n\nmodule ProductsHelper\n  attr_reader :products, :product\nend\n\nCopy\n","\nconfig.generators do |g|\n  g.orm             :active_record\n  g.template_engine :erb\n  g.test_framework  :test_unit, fixture: false\n  g.stylesheets     false\n  g.helper          :my_helper\nend\n\nconfig.generators do |g|\n  g.orm             :active_record\n  g.template_engine :erb\n  g.test_framework  :test_unit, fixture: false\n  g.stylesheets     false\n  g.helper          :my_helper\nend\n\nCopy\n","\n$ bin/rails generate scaffold Article body:text\n      [...]\n      invoke    my_helper\n      create      app/helpers/articles_helper.rb\n\nbin/rails generate scaffold Article body:text\n\nCopy\n","\n# lib/generators/rails/my_helper/my_helper_generator.rb\nclass Rails::MyHelperGenerator < Rails::Generators::NamedBase\n  def create_helper_file\n    create_file \"app/helpers/#{file_name}_helper.rb\", <<-FILE\nmodule #{class_name}Helper\n  attr_reader :#{plural_name}, :#{plural_name.singularize}\nend\n    FILE\n  end\n\n  hook_for :test_framework\nend\n\n# lib/generators/rails/my_helper/my_helper_generator.rb\nclass Rails::MyHelperGenerator < Rails::Generators::NamedBase\n  def create_helper_file\n    create_file \"app/helpers/#{file_name}_helper.rb\", <<-FILE\nmodule #{class_name}Helper\n  attr_reader :#{plural_name}, :#{plural_name.singularize}\nend\n    FILE\n  end\n\n  hook_for :test_framework\nend\n\nCopy\n","\n# Search for :helper instead of :my_helper\nhook_for :test_framework, as: :helper\n\n# Search for :helper instead of :my_helper\nhook_for :test_framework, as: :helper\n\nCopy\n"],"body":"Rails own generators are flexible enough to let you customize scaffolding. They can be configured in config/application.rb, these are some defaults:Before we customize our workflow, let's first see what our scaffold looks like:Looking at this output, it's easy to understand how generators work in Rails 3.0 and above. The scaffold generator doesn't actually generate anything, it just invokes others to do the work. This allows us to add/replace/remove any of those invocations. For instance, the scaffold generator invokes the scaffold_controller generator, which invokes erb, test_unit and helper generators. Since each generator has a single responsibility, they are easy to reuse, avoiding code duplication.If we want to avoid generating the default app/assets/stylesheets/scaffolds.scss file when scaffolding a new resource we can disable scaffold_stylesheet:The next customization on the workflow will be to stop generating stylesheet and test fixture files for scaffolds altogether. We can achieve that by changing our configuration to the following:If we generate another resource with the scaffold generator, we can see that stylesheet, JavaScript, and fixture files are not created anymore. If you want to customize it further, for example to use DataMapper and RSpec instead of Active Record and TestUnit, it's just a matter of adding their gems to your application and configuring your generators.To demonstrate this, we are going to create a new helper generator that simply adds some instance variable readers. First, we create a generator within the rails namespace, as this is where rails searches for generators used as hooks:After that, we can delete both the templates directory and the source_root\nclass method call from our new generator, because we are not going to need them.\nAdd the method below, so our generator looks like the following:We can try out our new generator by creating a helper for products:And it will generate the following helper file in app/helpers:Which is what we expected. We can now tell scaffold to use our new helper generator by editing config/application.rb once again:and see it in action when invoking the generator:We can notice on the output that our new helper was invoked instead of the Rails default. However one thing is missing, which is tests for our new generator and to do that, we are going to reuse old helpers test generators.Since Rails 3.0, this is easy to do due to the hooks concept. Our new helper does not need to be focused in one specific test framework, it can simply provide a hook and a test framework just needs to implement this hook in order to be compatible.To do that, we can change the generator this way:Now, when the helper generator is invoked and TestUnit is configured as the test framework, it will try to invoke both Rails::TestUnitGenerator and TestUnit::MyHelperGenerator. Since none of those are defined, we can tell our generator to invoke TestUnit::Generators::HelperGenerator instead, which is defined since it's a Rails generator. To do that, we just need to add:And now you can re-run scaffold for another resource and see it generating tests as well!"},{"title":"6 Customizing Your Workflow by Changing Generators Templates","anchor":"#customizing-your-workflow-by-changing-generators-templates","code":["\nmodule <%= class_name %>Helper\n  attr_reader :<%= plural_name %>, :<%= plural_name.singularize %>\nend\n\nmodule <%= class_name %>Helper\n  attr_reader :<%= plural_name %>, :<%= plural_name.singularize %>\nend\n\nCopy\n","\nconfig.generators do |g|\n  g.orm             :active_record\n  g.template_engine :erb\n  g.test_framework  :test_unit, fixture: false\n  g.stylesheets     false\nend\n\nconfig.generators do |g|\n  g.orm             :active_record\n  g.template_engine :erb\n  g.test_framework  :test_unit, fixture: false\n  g.stylesheets     false\nend\n\nCopy\n","\n<%%= stylesheet_include_tag :application %>\n\n<%%= stylesheet_include_tag :application %>\n\nCopy\n","\n<%= stylesheet_include_tag :application %>\n\n<%= stylesheet_include_tag :application %>\n\nCopy\n"],"body":"In the step above we simply wanted to add a line to the generated helper, without adding any extra functionality. There is a simpler way to do that, and it's by replacing the templates of already existing generators, in that case Rails::Generators::HelperGenerator.In Rails 3.0 and above, generators don't just look in the source root for templates, they also search for templates in other paths. And one of them is lib/templates. Since we want to customize Rails::Generators::HelperGenerator, we can do that by simply making a template copy inside lib/templates/rails/helper with the name helper.rb. So let's create that file with the following content:and revert the last change in config/application.rb:If you generate another resource, you can see that we get exactly the same result! This is useful if you want to customize your scaffold templates and/or layout by just creating edit.html.erb, index.html.erb and so on inside lib/templates/erb/scaffold.Scaffold templates in Rails frequently use ERB tags; these tags need to be\nescaped so that the generated output is valid ERB code.For example, the following escaped ERB tag would be needed in the template\n(note the extra %)......to generate the following output:"},{"code":["\nconfig.generators do |g|\n  g.orm             :active_record\n  g.template_engine :erb\n  g.test_framework  :shoulda, fixture: false\n  g.stylesheets     false\n\n  # Add a fallback!\n  g.fallbacks[:shoulda] = :test_unit\nend\n\nconfig.generators do |g|\n  g.orm             :active_record\n  g.template_engine :erb\n  g.test_framework  :shoulda, fixture: false\n  g.stylesheets     false\n\n  # Add a fallback!\n  g.fallbacks[:shoulda] = :test_unit\nend\n\nCopy\n","\n$ bin/rails generate scaffold Comment body:text\n      invoke  active_record\n      create    db/migrate/20130924143118_create_comments.rb\n      create    app/models/comment.rb\n      invoke    shoulda\n      create      test/models/comment_test.rb\n      create      test/fixtures/comments.yml\n      invoke  resource_route\n       route    resources :comments\n      invoke  scaffold_controller\n      create    app/controllers/comments_controller.rb\n      invoke    erb\n      create      app/views/comments\n      create      app/views/comments/index.html.erb\n      create      app/views/comments/edit.html.erb\n      create      app/views/comments/show.html.erb\n      create      app/views/comments/new.html.erb\n      create      app/views/comments/_form.html.erb\n      invoke    shoulda\n      create      test/controllers/comments_controller_test.rb\n      invoke    my_helper\n      create      app/helpers/comments_helper.rb\n      invoke    jbuilder\n      create      app/views/comments/index.json.jbuilder\n      create      app/views/comments/show.json.jbuilder\n      invoke  test_unit\n      create    test/application_system_test_case.rb\n      create    test/system/comments_test.rb\n      invoke  assets\n      invoke    scss\n      create    app/assets/stylesheets/scaffolds.scss\n\nbin/rails generate scaffold Comment body:text\n\nCopy\n"],"body":"One last feature about generators which is quite useful for plugin generators is fallbacks. For example, imagine that you want to add a feature on top of TestUnit like shoulda does. Since TestUnit already implements all generators required by Rails and shoulda just wants to overwrite part of it, there is no need for shoulda to reimplement some generators again, it can simply tell Rails to use a TestUnit generator if none was found under the Shoulda namespace.We can easily simulate this behavior by changing our config/application.rb once again:Now, if you create a Comment scaffold, you will see that the shoulda generators are being invoked, and at the end, they are just falling back to TestUnit generators:Fallbacks allow your generators to have a single responsibility, increasing code reuse and reducing the amount of duplication.","title":"7 Adding Generators Fallbacks","anchor":"#adding-generators-fallbacks"},{"title":"8 Application Templates","anchor":"#application-templates","code":["\ngem \"rspec-rails\", group: \"test\"\ngem \"cucumber-rails\", group: \"test\"\n\nif yes?(\"Would you like to install Devise?\")\n  gem \"devise\"\n  generate \"devise:install\"\n  model_name = ask(\"What would you like the user model to be called? [user]\")\n  model_name = \"user\" if model_name.blank?\n  generate \"devise\", model_name\nend\n\ngem \"rspec-rails\", group: \"test\"\ngem \"cucumber-rails\", group: \"test\"\n\nif yes?(\"Would you like to install Devise?\")\n  gem \"devise\"\n  generate \"devise:install\"\n  model_name = ask(\"What would you like the user model to be called? [user]\")\n  model_name = \"user\" if model_name.blank?\n  generate \"devise\", model_name\nend\n\nCopy\n","\n$ rails new thud -m template.rb\n\nrails new thud -m template.rb\n\nCopy\n","\n$ rails new thud -m https://gist.github.com/radar/722911/raw/\n\nrails new thud -m https://gist.github.com/radar/722911/raw/\n\nCopy\n"],"body":"Now that you've seen how generators can be used inside an application, did you know they can also be used to generate applications too? This kind of generator is referred to as a \"template\". This is a brief overview of the Templates API. For detailed documentation see the Rails Application Templates guide.In the above template we specify that the application relies on the rspec-rails and cucumber-rails gem so these two will be added to the test group in the Gemfile. Then we pose a question to the user about whether or not they would like to install Devise. If the user replies \"y\" or \"yes\" to this question, then the template will add Devise to the Gemfile outside of any group and then runs the devise:install generator. This template then takes the users input and runs the devise generator, with the user's answer from the last question being passed to this generator.Imagine that this template was in a file called template.rb. We can use it to modify the outcome of the rails new command by using the -m option and passing in the filename:This command will generate the Thud application, and then apply the template to the generated output.Templates don't have to be stored on the local system, the -m option also supports online templates:Whilst the final section of this guide doesn't cover how to generate the most awesome template known to man, it will take you through the methods available at your disposal so that you can develop it yourself. These same methods are also available for generators."},{"title":"9 Adding Command Line Arguments","anchor":"#adding-command-line-arguments","code":["\nclass_option :scope, type: :string, default: 'read_products'\n\nclass_option :scope, type: :string, default: 'read_products'\n\nCopy\n","\n$ bin/rails generate initializer --scope write_products\n\nbin/rails generate initializer --scope write_products\n\nCopy\n","\n@scope = options['scope']\n\n@scope = options['scope']\n\nCopy\n"],"body":"Rails generators can be easily modified to accept custom command line arguments. This functionality comes from Thor:Now our generator can be invoked as follows:The command line arguments are accessed through the options method inside the generator class. e.g:"},{"code":[],"body":"The following are methods available for both generators and templates for Rails.","title":"10 Generator methods","anchor":"#generator-methods"},{"title":"10.1 gem","anchor":"#gem","code":["\ngem \"rspec\", group: \"test\", version: \"2.1.0\"\ngem \"devise\", \"1.1.5\"\n\ngem \"rspec\", group: \"test\", version: \"2.1.0\"\ngem \"devise\", \"1.1.5\"\n\nCopy\n","\ngem \"devise\", git: \"https://github.com/plataformatec/devise.git\", branch: \"master\"\n\ngem \"devise\", git: \"https://github.com/plataformatec/devise.git\", branch: \"master\"\n\nCopy\n","\ngem \"devise\", git: \"https://github.com/plataformatec/devise.git\", branch: \"master\"\n\ngem \"devise\", git: \"https://github.com/plataformatec/devise.git\", branch: \"master\"\n\nCopy\n"],"body":"Specifies a gem dependency of the application.Available options are:Any additional options passed to this method are put on the end of the line:The above code will put the following line into Gemfile:"},{"code":["\ngem_group :development, :test do\n  gem \"rspec-rails\"\nend\n\ngem_group :development, :test do\n  gem \"rspec-rails\"\nend\n\nCopy\n"],"body":"Wraps gem entries inside a group:","title":"10.2 gem_group","anchor":"#gem-group"},{"code":["\nadd_source \"http://gems.github.com\"\n\nadd_source \"http://gems.github.com\"\n\nCopy\n","\nadd_source \"http://gems.github.com\" do\n  gem \"rspec-rails\"\nend\n\nadd_source \"http://gems.github.com\" do\n  gem \"rspec-rails\"\nend\n\nCopy\n"],"body":"Adds a specified source to Gemfile:This method also takes a block:","title":"10.3 add_source","anchor":"#add-source"},{"code":["\ninject_into_file 'name_of_file.rb', after: \"#The code goes below this line. Don't forget the Line break at the end\\n\" do <<-'RUBY'\n  puts \"Hello World\"\nRUBY\nend\n\ninject_into_file 'name_of_file.rb', after: \"#The code goes below this line. Don't forget the Line break at the end\\n\" do <<-'RUBY'\n  puts \"Hello World\"\nRUBY\nend\n\nCopy\n"],"body":"Injects a block of code into a defined position in your file.","title":"10.4 inject_into_file","anchor":"#inject-into-file"},{"code":["\ngsub_file 'name_of_file.rb', 'method.to_be_replaced', 'method.the_replacing_code'\n\ngsub_file 'name_of_file.rb', 'method.to_be_replaced', 'method.the_replacing_code'\n\nCopy\n"],"body":"Replaces text inside a file.Regular Expressions can be used to make this method more precise. You can also use append_file and prepend_file in the same way to place code at the beginning and end of a file respectively.","title":"10.5 gsub_file","anchor":"#gsub-file"},{"title":"10.6 application","anchor":"#application","code":["\napplication \"config.asset_host = 'http://example.com'\"\n\napplication \"config.asset_host = 'http://example.com'\"\n\nCopy\n","\napplication do\n  \"config.asset_host = 'http://example.com'\"\nend\n\napplication do\n  \"config.asset_host = 'http://example.com'\"\nend\n\nCopy\n","\napplication(nil, env: \"development\") do\n  \"config.asset_host = 'http://localhost:3000'\"\nend\n\napplication(nil, env: \"development\") do\n  \"config.asset_host = 'http://localhost:3000'\"\nend\n\nCopy\n"],"body":"Adds a line to config/application.rb directly after the application class definition.This method can also take a block:Available options are:"},{"code":["\ngit :init\ngit add: \".\"\ngit commit: \"-m First commit!\"\ngit add: \"onefile.rb\", rm: \"badfile.cxx\"\n\ngit :init\ngit add: \".\"\ngit commit: \"-m First commit!\"\ngit add: \"onefile.rb\", rm: \"badfile.cxx\"\n\nCopy\n"],"body":"Runs the specified git command:The values of the hash here being the arguments or options passed to the specific git command. As per the final example shown here, multiple git commands can be specified at a time, but the order of their running is not guaranteed to be the same as the order that they were specified in.","title":"10.7 git","anchor":"#git"},{"title":"10.8 vendor","anchor":"#vendor","code":["\nvendor \"sekrit.rb\", '#top secret stuff'\n\nvendor \"sekrit.rb\", '#top secret stuff'\n\nCopy\n","\nvendor \"seeds.rb\" do\n  \"puts 'in your app, seeding your database'\"\nend\n\nvendor \"seeds.rb\" do\n  \"puts 'in your app, seeding your database'\"\nend\n\nCopy\n"],"body":"Places a file into vendor which contains the specified code.This method also takes a block:"},{"code":["\nlib \"special.rb\", \"p Rails.root\"\n\nlib \"special.rb\", \"p Rails.root\"\n\nCopy\n","\nlib \"super_special.rb\" do\n  \"puts 'Super special!'\"\nend\n\nlib \"super_special.rb\" do\n  \"puts 'Super special!'\"\nend\n\nCopy\n"],"body":"Places a file into lib which contains the specified code.This method also takes a block:","title":"10.9 lib","anchor":"#lib"},{"code":["\nrakefile \"test.rake\", 'task(:hello) { puts \"Hello, there\" }'\n\nrakefile \"test.rake\", 'task(:hello) { puts \"Hello, there\" }'\n\nCopy\n","\nrakefile \"test.rake\" do\n  %Q{\n    task rock: :environment do\n      puts \"Rockin'\"\n    end\n  }\nend\n\nrakefile \"test.rake\" do\n  %Q{\n    task rock: :environment do\n      puts \"Rockin'\"\n    end\n  }\nend\n\nCopy\n"],"body":"Creates a Rake file in the lib/tasks directory of the application.This method also takes a block:","title":"10.10 rakefile","anchor":"#rakefile"},{"code":["\ninitializer \"begin.rb\", \"puts 'this is the beginning'\"\n\ninitializer \"begin.rb\", \"puts 'this is the beginning'\"\n\nCopy\n","\ninitializer \"begin.rb\" do\n  \"puts 'this is the beginning'\"\nend\n\ninitializer \"begin.rb\" do\n  \"puts 'this is the beginning'\"\nend\n\nCopy\n"],"body":"Creates an initializer in the config/initializers directory of the application:This method also takes a block, expected to return a string:","title":"10.11 initializer","anchor":"#initializer"},{"code":["\ngenerate \"scaffold\", \"forums title:string description:text\"\n\ngenerate \"scaffold\", \"forums title:string description:text\"\n\nCopy\n"],"body":"Runs the specified generator where the first argument is the generator name and the remaining arguments are passed directly to the generator.","title":"10.12 generate","anchor":"#generate"},{"code":["\nrake \"db:migrate\"\n\nrake \"db:migrate\"\n\nCopy\n"],"body":"Runs the specified Rake task.Available options are:","title":"10.13 rake","anchor":"#rake"},{"code":["\nroute \"resources :people\"\n\nroute \"resources :people\"\n\nCopy\n"],"body":"Adds text to the config/routes.rb file:","title":"10.14 route","anchor":"#route"},{"code":["\nreadme \"README\"\n\nreadme \"README\"\n\nCopy\n"],"body":"Output the contents of a file in the template's source_path, usually a README.","title":"10.15 readme","anchor":"#readme"}]