[{"code":[],"body":"Action Text brings rich text content and editing to Rails. It includes\nthe Trix editor that handles everything from formatting\nto links to quotes to lists to embedded images and galleries.\nThe rich text content generated by the Trix editor is saved in its own\nRichText model that's associated with any existing Active Record model in the application.\nAny embedded images (or other attachments) are automatically stored using\nActive Storage and associated with the included RichText model.","title":"1 What is Action Text?","anchor":"#what-is-action-text-questionmark"},{"title":"2 Trix compared to other rich text editors","anchor":"#trix-compared-to-other-rich-text-editors","code":[],"body":"Most WYSIWYG editors are wrappers around HTMLâ€™s contenteditable and execCommand APIs,\ndesigned by Microsoft to support live editing of web pages in Internet Explorer 5.5,\nand eventually reverse-engineered\nand copied by other browsers.Because these APIs were never fully specified or documented,\nand because WYSIWYG HTML editors are enormous in scope, each\nbrowser's implementation has its own set of bugs and quirks,\nand JavaScript developers are left to resolve the inconsistencies.Trix sidesteps these inconsistencies by treating contenteditable\nas an I/O device: when input makes its way to the editor, Trix converts that input\ninto an editing operation on its internal document model, then re-renders\nthat document back into the editor. This gives Trix complete control over what\nhappens after every keystroke, and avoids the need to use execCommand at all."},{"title":"3 Installation","anchor":"#installation","code":[],"body":"Run bin/rails action_text:install to add the Yarn package and copy over the necessary migration. Also, you need to set up Active Storage for embedded images and other attachments. Please refer to the Active Storage Overview guide.After the installation is complete, a Rails app using Webpacker should have the following changes:"},{"code":["\n# app/models/message.rb\nclass Message < ApplicationRecord\n  has_rich_text :content\nend\n\n# app/models/message.rb\nclass Message < ApplicationRecord\n  has_rich_text :content\nend\n\nCopy\n","\n<%# app/views/messages/_form.html.erb %>\n<%= form_with model: message do |form| %>\n  <div class=\"field\">\n    <%= form.label :content %>\n    <%= form.rich_text_area :content %>\n  </div>\n<% end %>\n\n<%# app/views/messages/_form.html.erb %>\n<%= form_with model: message do |form| %>\n  <div class=\"field\">\n    <%= form.label :content %>\n    <%= form.rich_text_area :content %>\n  </div>\n<% end %>\n\nCopy\n","\n<%= @message.content %>\n\n<%= @message.content %>\n\nCopy\n","\nclass MessagesController < ApplicationController\n  def create\n    message = Message.create! params.require(:message).permit(:title, :content)\n    redirect_to message\n  end\nend\n\nclass MessagesController < ApplicationController\n  def create\n    message = Message.create! params.require(:message).permit(:title, :content)\n    redirect_to message\n  end\nend\n\nCopy\n"],"body":"Adding a rich text field to an existing model:Note that you don't need to add a content field to your messages table.Then refer to this field in the form for the model:And finally, display the sanitized rich text on a page:To accept the rich text content, all you have to do is permit the referenced attribute:","title":"4 Examples","anchor":"#examples"},{"code":["\nMessage.all.with_rich_text_content # Preload the body without attachments.\nMessage.all.with_rich_text_content_and_embeds # Preload both body and attachments.\n\nMessage.all.with_rich_text_content # Preload the body without attachments.\nMessage.all.with_rich_text_content_and_embeds # Preload both body and attachments.\n\nCopy\n"],"body":"If you wish to preload the dependent ActionText::RichText model, assuming your rich text field is named content, you can use the named scope:","title":"5 Avoid N+1 queries","anchor":"#avoid-n-1-queries"},{"code":[],"body":"By default, the Action Text editor and content is styled by the Trix defaults.\nIf you want to change these defaults, you'll want to remove\nthe app/assets/stylesheets/actiontext.scss linker and base your stylings on\nthe contents of that file.You can also style the HTML used for embedded images and other attachments (known as blobs).\nOn installation, Action Text will copy over a partial to\napp/views/active_storage/blobs/_blob.html.erb, which you can specialize.","title":"6 Custom styling","anchor":"#custom-styling"},{"title":"7 API / Backend development","anchor":"#api-backend-development","code":[],"body":"This is based on Basecamp, so if you still can't find what you are looking for, check this Basecamp Doc."}]