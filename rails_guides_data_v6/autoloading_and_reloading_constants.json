[{"code":["\n# DO NOT DO THIS.\nrequire \"application_controller\"\nrequire \"post\"\n# DO NOT DO THIS.\n\nclass PostsController < ApplicationController\n  def index\n    @posts = Post.all\n  end\nend\n\n# DO NOT DO THIS.\nrequire \"application_controller\"\nrequire \"post\"\n# DO NOT DO THIS.\n\nclass PostsController < ApplicationController\n  def index\n    @posts = Post.all\n  end\nend\n\nCopy\n","\nclass PostsController < ApplicationController\n  def index\n    @posts = Post.all\n  end\nend\n\nclass PostsController < ApplicationController\n  def index\n    @posts = Post.all\n  end\nend\n\nCopy\n"],"body":"In a normal Ruby program, dependencies need to be loaded by hand. For example, the following controller uses classes ApplicationController and Post, and normally you'd need to put require calls for them:This is not the case in Rails applications, where application classes and modules are just available everywhere:Idiomatic Rails applications only issue require calls to load stuff from their lib directory, the Ruby standard library, Ruby gems, etc. That is, anything that does not belong to their autoload paths, explained below.","title":"1 Introduction","anchor":"#introduction"},{"title":"2 Enabling Zeitwerk Mode","anchor":"#enabling-zeitwerk-mode","code":["\n# config/application.rb\nconfig.load_defaults 6.0 # enables zeitwerk mode in CRuby\n\n# config/application.rb\nconfig.load_defaults 6.0 # enables zeitwerk mode in CRuby\n\nCopy\n"],"body":"The autoloading zeitwerk mode is enabled by default in Rails 6 applications running on CRuby:In zeitwerk mode, Rails uses Zeitwerk internally to autoload, reload, and eager load. Rails instantiates and configures a dedicated Zeitwerk instance that manages the project."},{"title":"3 Project Structure","anchor":"#project-structure","code":["\n\"users_controller\".camelize # => UsersController\n\n\"users_controller\".camelize # => UsersController\n\nCopy\n"],"body":"In a Rails application file names have to match the constants they define, with directories acting as namespaces.For example, the file app/helpers/users_helper.rb should define UsersHelper and the file app/controllers/admin/payments_controller.rb should define Admin::PaymentsController.By default, Rails configures Zeitwerk to inflect file names with String#camelize. For example, it expects that app/controllers/users_controller.rb defines the constant UsersController becauseThe section Customizing Inflections below documents ways to override this default.Please, check the Zeitwerk documentation for further details."},{"title":"4 Autoload Paths","anchor":"#autoload-paths","code":["\n$ bin/rails runner 'p UsersHelper'\nUsersHelper\n\nbin/rails runner 'p UsersHelper'\n\nCopy\n"],"body":"We refer to the list of application directories whose contents are to be autoloaded as autoload paths. For example, app/models. Such directories represent the root namespace: Object.Within an autoload path, file names must match the constants they define as documented here.By default, the autoload paths of an application consist of all the subdirectories of app that exist when the application boots ---except for assets, javascript, views,--- plus the autoload paths of engines it might depend on.For example, if UsersHelper is implemented in app/helpers/users_helper.rb, the module is autoloadable, you do not need (and should not write) a require call for it:Autoload paths automatically pick any custom directories under app. For example, if your application has app/presenters, or app/services, etc., they are added to autoload paths.The array of autoload paths can be extended by mutating config.autoload_paths, in config/application.rb, but nowadays this is discouraged."},{"title":"5 $LOAD_PATH","anchor":"#%24load-path","code":["\nconfig.add_autoload_paths_to_load_path = false\n\nconfig.add_autoload_paths_to_load_path = false\n\nCopy\n"],"body":"Autoload paths are added to $LOAD_PATH by default. However, Zeitwerk uses absolute file names internally, and your application should not issue require calls for autoloadable files, so those directories are actually not needed there. You can opt-out with this flag:That may speed legit require calls a bit, since there are less lookups. Also, if your application uses Bootsnap, that saves the library from building unnecessary indexes, and saves the RAM they would need."},{"title":"6 Reloading","anchor":"#reloading","code":["\nirb(main):001:0> User.object_id\n=> 70136277390120\nirb(main):002:0> reload!\nReloading...\n=> true\nirb(main):003:0> User.object_id\n=> 70136284426020\n\nUser.object_id\nreload!\nUser.object_id\n\nCopy\n"],"body":"Rails automatically reloads classes and modules if application files change.More precisely, if the web server is running and application files have been modified, Rails unloads all autoloaded constants just before the next request is processed. That way, application classes or modules used during that request are going to be autoloaded, thus picking up their current implementation in the file system.Reloading can be enabled or disabled. The setting that controls this behavior is config.cache_classes, which is false by default in development mode (reloading enabled), and true by default in production mode (reloading disabled).Rails detects files have changed using an evented file monitor (default), or walking the autoload paths, depending on config.file_watcher.In a Rails console there is no file watcher active regardless of the value of config.cache_classes. This is so because, normally, it would be confusing to have code reloaded in the middle of a console session, the same way you generally want an individual request to be served by a consistent, non-changing set of application classes and modules.However, you can force a reload in the console by executing reload!:as you can see, the class object stored in the User constant is different after reloading."},{"title":"6.1 Reloading and Stale Objects","anchor":"#reloading-and-stale-objects","code":["\n# config/initializers/configure_payment_gateway.rb\n# DO NOT DO THIS.\n$PAYMENT_GATEWAY = Rails.env.production? ? RealGateway : MockedGateway\n# DO NOT DO THIS.\n\n# config/initializers/configure_payment_gateway.rb\n# DO NOT DO THIS.\n$PAYMENT_GATEWAY = Rails.env.production? ? RealGateway : MockedGateway\n# DO NOT DO THIS.\n\nCopy\n","\nirb> joe = User.new\nirb> reload!\nirb> alice = User.new\nirb> joe.class == alice.class\n=> false\n\njoe = User.new\nreload!\nalice = User.new\njoe.class == alice.class\n\nCopy\n","\n# lib/vip_user.rb\nclass VipUser < User\nend\n\n# lib/vip_user.rb\nclass VipUser < User\nend\n\nCopy\n"],"body":"It is very important to understand that Ruby does not have a way to truly reload classes and modules in memory, and have that reflected everywhere they are already used. Technically, \"unloading\" the User class means removing the User constant via Object.send(:remove_const, \"User\").Therefore, code that references a reloadable class or module, but that is not executed again on reload, becomes stale. Let's see an example next.Let's consider this initializer:The idea would be to use $PAYMENT_GATEWAY in the code, and let the initializer set that to the actual implementation depending on the environment.On reload, MockedGateway is reloaded, but $PAYMENT_GATEWAY is not updated because initializers only run on boot. Therefore, it won't reflect the changes.There are several ways to do this safely. For instance, the application could define a class method PaymentGateway.impl whose definition depends on the environment; or could define PaymentGateway to have a parent class or mixin that depends on the environment; or use the same global variable trick, but in a reloader callback, as explained below.Let's see other situations that involve stale class or module objects.Check this Rails console session:joe is an instance of the original User class. When there is a reload, the User constant evaluates to a different, reloaded class. alice is an instance of the current one, but joe is not, his class is stale. You may define joe again, start an IRB subsession, or just launch a new console instead of calling reload!.Another situation in which you may find this gotcha is subclassing reloadable classes in a place that is not reloaded:if User is reloaded, since VipUser is not, the superclass of VipUser is the original stale class object.Bottom line: do not cache reloadable classes or modules."},{"title":"6.2 Autoloading when the application boots","anchor":"#autoloading-when-the-application-boots","code":["\nRails.application.reloader.to_prepare do\n  $PAYMENT_GATEWAY = Rails.env.production? ? RealGateway : MockedGateway\nend\n\nRails.application.reloader.to_prepare do\n  $PAYMENT_GATEWAY = Rails.env.production? ? RealGateway : MockedGateway\nend\n\nCopy\n","\nrequire \"my_app/middleware/foo\"\n...\nconfig.middleware.use MyApp::Middleware::Foo\n\nrequire \"my_app/middleware/foo\"\n...\nconfig.middleware.use MyApp::Middleware::Foo\n\nCopy\n"],"body":"Applications can safely autoload constants during boot using a reloader callback:That block runs when the application boots, and every time code is reloaded.However, if you do not need to reload the class, it is easier to define it in a directory which does not belong to the autoload paths. For instance, lib is an idiomatic choice, it does not belong to the autoload paths by default but it belongs to $LOAD_PATH. Then, in the place the class is needed at boot time, just perform a regular require to load it.For example, there is no point in defining reloadable Rack middleware, because changes would not be reflected in the instance stored in the middleware stack anyway. If lib/my_app/middleware/foo.rb defines a middleware class, then in config/application.rb you write:To have changes in that middleware reflected, you need to restart the server."},{"title":"7 Eager Loading","anchor":"#eager-loading","code":[],"body":"In production-like environments it is generally better to load all the application code when the application boots. Eager loading puts everything in memory ready to serve requests right away, and it is also CoW-friendly.Eager loading is controlled by the flag config.eager_load, which is enabled by default in production mode.The order in which files are eager loaded is undefined.if the Zeitwerk constant is defined, Rails invokes Zeitwerk::Loader.eager_load_all regardless of the application autoloading mode. That ensures dependencies managed by Zeitwerk are eager loaded."},{"title":"8 Single Table Inheritance","anchor":"#single-table-inheritance","code":["\nmodule StiPreload\n  unless Rails.application.config.eager_load\n    extend ActiveSupport::Concern\n\n    included do\n      cattr_accessor :preloaded, instance_accessor: false\n    end\n\n    class_methods do\n      def descendants\n        preload_sti unless preloaded\n        super\n      end\n\n      # Constantizes all types present in the database. There might be more on\n      # disk, but that does not matter in practice as far as the STI API is\n      # concerned.\n      #\n      # Assumes store_full_sti_class is true, the default.\n      def preload_sti\n        types_in_db = \\\n          base_class.\n            unscoped.\n            select(inheritance_column).\n            distinct.\n            pluck(inheritance_column).\n            compact\n\n        types_in_db.each do |type|\n          logger.debug(\"Preloading STI type #{type}\")\n          type.constantize\n        end\n\n        self.preloaded = true\n      end\n    end\n  end\nend\n\nmodule StiPreload\n  unless Rails.application.config.eager_load\n    extend ActiveSupport::Concern\n\n    included do\n      cattr_accessor :preloaded, instance_accessor: false\n    end\n\n    class_methods do\n      def descendants\n        preload_sti unless preloaded\n        super\n      end\n\n      # Constantizes all types present in the database. There might be more on\n      # disk, but that does not matter in practice as far as the STI API is\n      # concerned.\n      #\n      # Assumes store_full_sti_class is true, the default.\n      def preload_sti\n        types_in_db = \\\n          base_class.\n            unscoped.\n            select(inheritance_column).\n            distinct.\n            pluck(inheritance_column).\n            compact\n\n        types_in_db.each do |type|\n          logger.debug(\"Preloading STI type #{type}\")\n          type.constantize\n        end\n\n        self.preloaded = true\n      end\n    end\n  end\nend\n\nCopy\n","\n# app/models/shape.rb\nrequire \"sti_preload\"\n\nclass Shape < ApplicationRecord\n  include StiPreload # Only in the root class.\nend\n\n# app/models/shape.rb\nrequire \"sti_preload\"\n\nclass Shape < ApplicationRecord\n  include StiPreload # Only in the root class.\nend\n\nCopy\n","\n# app/models/polygon.rb\nclass Polygon < Shape\nend\n\n# app/models/polygon.rb\nclass Polygon < Shape\nend\n\nCopy\n","\n# app/models/triangle.rb\nclass Triangle < Polygon\nend\n\n# app/models/triangle.rb\nclass Triangle < Polygon\nend\n\nCopy\n"],"body":"Single Table Inheritance is a feature that doesn't play well with lazy loading. Reason is, its API generally needs to be able to enumerate the STI hierarchy to work correctly, whereas lazy loading defers loading classes until they are referenced. You can't enumerate what you haven't referenced yet.In a sense, applications need to eager load STI hierarchies regardless of the loading mode.Of course, if the application eager loads on boot, that is already accomplished. When it does not, it is in practice enough to instantiate the existing types in the database, which in development or test modes is usually fine. One way to do that is to throw this module into the lib directory:and then include it in the STI root classes of your project:"},{"code":["\nActiveSupport::Inflector.inflections(:en) do |inflect|\n  inflect.acronym \"HTML\"\n  inflect.acronym \"SSL\"\nend\n\nActiveSupport::Inflector.inflections(:en) do |inflect|\n  inflect.acronym \"HTML\"\n  inflect.acronym \"SSL\"\nend\n\nCopy\n","\n# config/initializers/zeitwerk.rb\nRails.autoloaders.each do |autoloader|\n  autoloader.inflector.inflect(\n    \"html_parser\" => \"HTMLParser\",\n    \"ssl_error\"   => \"SSLError\"\n  )\nend\n\n# config/initializers/zeitwerk.rb\nRails.autoloaders.each do |autoloader|\n  autoloader.inflector.inflect(\n    \"html_parser\" => \"HTMLParser\",\n    \"ssl_error\"   => \"SSLError\"\n  )\nend\n\nCopy\n","\n# config/initializers/zeitwerk.rb\nRails.autoloaders.each do |autoloader|\n  autoloader.inflector = Zeitwerk::Inflector.new\n  autoloader.inflector.inflect(\n    \"html_parser\" => \"HTMLParser\",\n    \"ssl_error\"   => \"SSLError\"\n  )\nend\n\n# config/initializers/zeitwerk.rb\nRails.autoloaders.each do |autoloader|\n  autoloader.inflector = Zeitwerk::Inflector.new\n  autoloader.inflector.inflect(\n    \"html_parser\" => \"HTMLParser\",\n    \"ssl_error\"   => \"SSLError\"\n  )\nend\n\nCopy\n"],"body":"By default, Rails uses String#camelize to know which constant should a given file or directory name define. For example, posts_controller.rb should define PostsController because that is what \"posts_controller\".camelize returns.It could be the case that some particular file or directory name does not get inflected as you want. For instance, html_parser.rb is expected to define HtmlParser by default. What if you prefer the class to be HTMLParser? There are a few ways to customize this.The easiest way is to define acronyms in config/initializers/inflections.rb:Doing so affects how Active Support inflects globally. That may be fine in some applications, but you can also customize how to camelize individual basenames independently from Active Support by passing a collection of overrides to the default inflectors:That technique still depends on String#camelize, though, because that is what the default inflectors use as fallback. If you instead prefer not to depend on Active Support inflections at all and have absolute control over inflections, configure the inflectors to be instances of Zeitwerk::Inflector:There is no global configuration that can affect said instances, they are deterministic.You can even define a custom inflector for full flexibility. Please, check the Zeitwerk documentation for further details.","title":"9 Customizing Inflections","anchor":"#customizing-inflections"},{"title":"10 Troubleshooting","anchor":"#troubleshooting","code":["\nRails.autoloaders.log!\n\nRails.autoloaders.log!\n\nCopy\n","\nRails.autoloaders.logger = Logger.new(\"#{Rails.root}/log/autoloading.log\")\n\nRails.autoloaders.logger = Logger.new(\"#{Rails.root}/log/autoloading.log\")\n\nCopy\n","\n# config/initializers/log_autoloaders.rb\nRails.autoloaders.logger = Rails.logger\n\n# config/initializers/log_autoloaders.rb\nRails.autoloaders.logger = Rails.logger\n\nCopy\n"],"body":"The best way to follow what the loaders are doing is to inspect their activity.The easiest way to do that is to throwto config/application.rb after loading the framework defaults. That will print traces to standard output.If you prefer logging to a file, configure this instead:The Rails logger is still not ready in config/application.rb, but it is in initializers:"},{"code":["\nRails.autoloaders.main\nRails.autoloaders.once\n\nRails.autoloaders.main\nRails.autoloaders.once\n\nCopy\n","\nRails.autoloaders.zeitwerk_enabled?\n\nRails.autoloaders.zeitwerk_enabled?\n\nCopy\n"],"body":"The Zeitwerk instances managing your application are available atThe former is the main one. The latter is there mostly for backwards compatibility reasons, in case the application has something in config.autoload_once_paths (this is discouraged nowadays).You can check if zeitwerk mode is enabled with","title":"11 Rails.autoloaders","anchor":"#rails-autoloaders"},{"code":[],"body":"","title":"12 Differences with Classic Mode","anchor":"#differences-with-classic-mode"},{"title":"12.1 Ruby Constant Lookup Compliance","anchor":"#ruby-constant-lookup-compliance","code":["\nclass Admin::UsersController < ApplicationController\nend\n\nclass Admin::UsersController < ApplicationController\nend\n\nCopy\n","\nmodule Admin\n  class UsersController < ApplicationController\n  end\nend\n\nmodule Admin\n  class UsersController < ApplicationController\n  end\nend\n\nCopy\n"],"body":"classic mode cannot match constant lookup semantics due to fundamental limitations of the technique it is based on, whereas zeitwerk mode works like Ruby.For example, in classic mode defining classes or modules in namespaces with qualified constants this waywas not recommended because the resolution of constants inside their body was brittle. You'd better write them in this style:In zeitwerk mode that does not matter anymore, you can pick either style.The resolution of a constant could depend on load order, the definition of a class or module object could depend on load order, there was edge cases with singleton classes, oftentimes you had to use require_dependency as a workaround, .... The guide for classic mode documents these issues.All these problems are solved in zeitwerk mode, it just works as expected, and require_dependency should not be used anymore, it is no longer needed."},{"title":"12.2 Less File Lookups","anchor":"#less-file-lookups","code":[],"body":"In classic mode, every single missing constant triggers a file lookup that walks the autoload paths.In zeitwerk mode there is only one pass. That pass is done once, not per missing constant, and so it is generally more performant. Subdirectories are visited only if their namespace is used."},{"title":"12.3 Underscore vs Camelize","anchor":"#underscore-vs-camelize","code":[],"body":"Inflections go the other way around.In classic mode, given a missing constant Rails underscores its name and performs a file lookup. On the other hand, zeitwerk mode checks first the file system, and camelizes file names to know the constant those files are expected to define.While in common names these operations match, if acronyms or custom inflection rules are configured, they may not. For example, by default \"HTMLParser\".underscore is \"html_parser\", and \"html_parser\".camelize is \"HtmlParser\"."},{"title":"12.4 More Differences","anchor":"#more-differences","code":[],"body":"There are some other subtle differences, please check this section of Upgrading Ruby on Rails guide for details."},{"title":"13 Classic Mode is Deprecated","anchor":"#classic-mode-is-deprecated","code":[],"body":"By now, it is still possible to use classic mode. However, classic is deprecated and will be eventually removed.New applications should use zeitwerk mode (which is the default), and applications being upgrade are strongly encouraged to migrate to zeitwerk mode. Please check the Upgrading Ruby on Rails guide for details."},{"title":"14 Opting Out","anchor":"#opting-out","code":["\n# config/application.rb\nconfig.load_defaults 6.0\nconfig.autoloader = :classic\n\n# config/application.rb\nconfig.load_defaults 6.0\nconfig.autoloader = :classic\n\nCopy\n"],"body":"Applications can load Rails 6 defaults and still use the classic autoloader this way:That may be handy if upgrading to Rails 6 in different phases, but classic mode is discouraged for new applications.zeitwerk mode is not available in versions of Rails previous to 6.0."}]