[{"code":[],"body":"Action Mailbox routes incoming emails to controller-like mailboxes for\nprocessing in Rails. It ships with ingresses for Mailgun, Mandrill, Postmark,\nand SendGrid. You can also handle inbound mails directly via the built-in Exim,\nPostfix, and Qmail ingresses.The inbound emails are turned into InboundEmail records using Active Record\nand feature lifecycle tracking, storage of the original email on cloud storage\nvia Active Storage, and responsible data handling with\non-by-default incineration.These inbound emails are routed asynchronously using Active Job to one or\nseveral dedicated mailboxes, which are capable of interacting directly\nwith the rest of your domain model.","title":"1 What is Action Mailbox?","anchor":"#what-is-action-mailbox-questionmark"},{"title":"2 Setup","anchor":"#setup","code":["\n$ bin/rails action_mailbox:install\n$ bin/rails db:migrate\n\nbin/rails action_mailbox:install\nbin/rails db:migrate\n\nCopy\n"],"body":"Install migrations needed for InboundEmail and ensure Active Storage is set up:"},{"code":[],"body":"","title":"3 Configuration","anchor":"#configuration"},{"title":"3.1 Exim","anchor":"#exim","code":["\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :relay\n\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :relay\n\nCopy\n","\naction_mailbox:\n  ingress_password: ...\n\naction_mailbox:\n  ingress_password: ...\n\nCopy\n","\n$ bin/rails action_mailbox:ingress:exim URL=https://example.com/rails/action_mailbox/relay/inbound_emails INGRESS_PASSWORD=...\n\nbin/rails action_mailbox:ingress:exim URL=https://example.com/rails/action_mailbox/relay/inbound_emails INGRESS_PASSWORD=...\n\nCopy\n"],"body":"Tell Action Mailbox to accept emails from an SMTP relay:Generate a strong password that Action Mailbox can use to authenticate requests to the relay ingress.Use bin/rails credentials:edit to add the password to your application's encrypted credentials under\naction_mailbox.ingress_password, where Action Mailbox will automatically find it:Alternatively, provide the password in the RAILS_INBOUND_EMAIL_PASSWORD environment variable.Configure Exim to pipe inbound emails to bin/rails action_mailbox:ingress:exim,\nproviding the URL of the relay ingress and the INGRESS_PASSWORD you\npreviously generated. If your application lived at https://example.com, the\nfull command would look like this:"},{"code":["\naction_mailbox:\n  mailgun_signing_key: ...\n\naction_mailbox:\n  mailgun_signing_key: ...\n\nCopy\n","\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :mailgun\n\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :mailgun\n\nCopy\n"],"body":"Give Action Mailbox your\nMailgun Signing key (which you can find under Settings -> Security & Users -> API security in Mailgun)\nso it can authenticate requests to the Mailgun ingress.Use bin/rails credentials:edit to add your Signing key to your application's\nencrypted credentials under action_mailbox.mailgun_signing_key,\nwhere Action Mailbox will automatically find it:Alternatively, provide your Signing key in the MAILGUN_INGRESS_SIGNING_KEY environment\nvariable.Tell Action Mailbox to accept emails from Mailgun:Configure Mailgun\nto forward inbound emails to /rails/action_mailbox/mailgun/inbound_emails/mime.\nIf your application lived at https://example.com, you would specify the\nfully-qualified URL https://example.com/rails/action_mailbox/mailgun/inbound_emails/mime.","title":"3.2 Mailgun","anchor":"#mailgun"},{"title":"3.3 Mandrill","anchor":"#mandrill","code":["\naction_mailbox:\n  mandrill_api_key: ...\n\naction_mailbox:\n  mandrill_api_key: ...\n\nCopy\n","\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :mandrill\n\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :mandrill\n\nCopy\n"],"body":"Give Action Mailbox your Mandrill API key so it can authenticate requests to\nthe Mandrill ingress.Use bin/rails credentials:edit to add your API key to your application's\nencrypted credentials under action_mailbox.mandrill_api_key,\nwhere Action Mailbox will automatically find it:Alternatively, provide your API key in the MANDRILL_INGRESS_API_KEY\nenvironment variable.Tell Action Mailbox to accept emails from Mandrill:Configure Mandrill\nto route inbound emails to /rails/action_mailbox/mandrill/inbound_emails.\nIf your application lived at https://example.com, you would specify\nthe fully-qualified URL https://example.com/rails/action_mailbox/mandrill/inbound_emails."},{"title":"3.4 Postfix","anchor":"#postfix","code":["\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :relay\n\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :relay\n\nCopy\n","\naction_mailbox:\n  ingress_password: ...\n\naction_mailbox:\n  ingress_password: ...\n\nCopy\n","\n$ bin/rails action_mailbox:ingress:postfix URL=https://example.com/rails/action_mailbox/relay/inbound_emails INGRESS_PASSWORD=...\n\nbin/rails action_mailbox:ingress:postfix URL=https://example.com/rails/action_mailbox/relay/inbound_emails INGRESS_PASSWORD=...\n\nCopy\n"],"body":"Tell Action Mailbox to accept emails from an SMTP relay:Generate a strong password that Action Mailbox can use to authenticate requests to the relay ingress.Use bin/rails credentials:edit to add the password to your application's encrypted credentials under\naction_mailbox.ingress_password, where Action Mailbox will automatically find it:Alternatively, provide the password in the RAILS_INBOUND_EMAIL_PASSWORD environment variable.Configure Postfix\nto pipe inbound emails to bin/rails action_mailbox:ingress:postfix, providing\nthe URL of the Postfix ingress and the INGRESS_PASSWORD you previously\ngenerated. If your application lived at https://example.com, the full command\nwould look like this:"},{"code":["\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :postmark\n\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :postmark\n\nCopy\n","\naction_mailbox:\n  ingress_password: ...\n\naction_mailbox:\n  ingress_password: ...\n\nCopy\n","\nhttps://actionmailbox:PASSWORD@example.com/rails/action_mailbox/postmark/inbound_emails\n\nhttps://actionmailbox:PASSWORD@example.com/rails/action_mailbox/postmark/inbound_emails\n\nCopy\n"],"body":"Tell Action Mailbox to accept emails from Postmark:Generate a strong password that Action Mailbox can use to authenticate\nrequests to the Postmark ingress.Use bin/rails credentials:edit to add the password to your application's\nencrypted credentials under action_mailbox.ingress_password,\nwhere Action Mailbox will automatically find it:Alternatively, provide the password in the RAILS_INBOUND_EMAIL_PASSWORD\nenvironment variable.Configure Postmark inbound webhook\nto forward inbound emails to /rails/action_mailbox/postmark/inbound_emails with the username actionmailbox\nand the password you previously generated. If your application lived at https://example.com, you would\nconfigure Postmark with the following fully-qualified URL:","title":"3.5 Postmark","anchor":"#postmark"},{"title":"3.6 Qmail","anchor":"#qmail","code":["\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :relay\n\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :relay\n\nCopy\n","\naction_mailbox:\n  ingress_password: ...\n\naction_mailbox:\n  ingress_password: ...\n\nCopy\n","\n$ bin/rails action_mailbox:ingress:qmail URL=https://example.com/rails/action_mailbox/relay/inbound_emails INGRESS_PASSWORD=...\n\nbin/rails action_mailbox:ingress:qmail URL=https://example.com/rails/action_mailbox/relay/inbound_emails INGRESS_PASSWORD=...\n\nCopy\n"],"body":"Tell Action Mailbox to accept emails from an SMTP relay:Generate a strong password that Action Mailbox can use to authenticate requests to the relay ingress.Use bin/rails credentials:edit to add the password to your application's encrypted credentials under\naction_mailbox.ingress_password, where Action Mailbox will automatically find it:Alternatively, provide the password in the RAILS_INBOUND_EMAIL_PASSWORD environment variable.Configure Qmail to pipe inbound emails to bin/rails action_mailbox:ingress:qmail,\nproviding the URL of the relay ingress and the INGRESS_PASSWORD you\npreviously generated. If your application lived at https://example.com, the\nfull command would look like this:"},{"code":["\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :sendgrid\n\n# config/environments/production.rb\nconfig.action_mailbox.ingress = :sendgrid\n\nCopy\n","\naction_mailbox:\n  ingress_password: ...\n\naction_mailbox:\n  ingress_password: ...\n\nCopy\n","\nhttps://actionmailbox:PASSWORD@example.com/rails/action_mailbox/sendgrid/inbound_emails\n\nhttps://actionmailbox:PASSWORD@example.com/rails/action_mailbox/sendgrid/inbound_emails\n\nCopy\n"],"body":"Tell Action Mailbox to accept emails from SendGrid:Generate a strong password that Action Mailbox can use to authenticate\nrequests to the SendGrid ingress.Use bin/rails credentials:edit to add the password to your application's\nencrypted credentials under action_mailbox.ingress_password,\nwhere Action Mailbox will automatically find it:Alternatively, provide the password in the RAILS_INBOUND_EMAIL_PASSWORD\nenvironment variable.Configure SendGrid Inbound Parse\nto forward inbound emails to\n/rails/action_mailbox/sendgrid/inbound_emails with the username actionmailbox\nand the password you previously generated. If your application lived at https://example.com,\nyou would configure SendGrid with the following URL:","title":"3.7 SendGrid","anchor":"#sendgrid"},{"title":"4 Examples","anchor":"#examples","code":["\n# app/mailboxes/application_mailbox.rb\nclass ApplicationMailbox < ActionMailbox::Base\n  routing /^save@/i     => :forwards\n  routing /@replies\\./i => :replies\nend\n\n# app/mailboxes/application_mailbox.rb\nclass ApplicationMailbox < ActionMailbox::Base\n  routing /^save@/i     => :forwards\n  routing /@replies\\./i => :replies\nend\n\nCopy\n","\n# Generate new mailbox\n$ bin/rails generate mailbox forwards\n\nbin/rails generate mailbox forwards\n\nCopy\n","\n# app/mailboxes/forwards_mailbox.rb\nclass ForwardsMailbox < ApplicationMailbox\n  # Callbacks specify prerequisites to processing\n  before_processing :require_projects\n\n  def process\n    # Record the forward on the one project, or…\n    if forwarder.projects.one?\n      record_forward\n    else\n      # …involve a second Action Mailer to ask which project to forward into.\n      request_forwarding_project\n    end\n  end\n\n  private\n    def require_projects\n      if forwarder.projects.none?\n        # Use Action Mailers to bounce incoming emails back to sender – this halts processing\n        bounce_with Forwards::BounceMailer.no_projects(inbound_email, forwarder: forwarder)\n      end\n    end\n\n    def record_forward\n      forwarder.forwards.create subject: mail.subject, content: mail.content\n    end\n\n    def request_forwarding_project\n      Forwards::RoutingMailer.choose_project(inbound_email, forwarder: forwarder).deliver_now\n    end\n\n    def forwarder\n      @forwarder ||= User.find_by(email_address: mail.from)\n    end\nend\n\n# app/mailboxes/forwards_mailbox.rb\nclass ForwardsMailbox < ApplicationMailbox\n  # Callbacks specify prerequisites to processing\n  before_processing :require_projects\n\n  def process\n    # Record the forward on the one project, or…\n    if forwarder.projects.one?\n      record_forward\n    else\n      # …involve a second Action Mailer to ask which project to forward into.\n      request_forwarding_project\n    end\n  end\n\n  private\n    def require_projects\n      if forwarder.projects.none?\n        # Use Action Mailers to bounce incoming emails back to sender – this halts processing\n        bounce_with Forwards::BounceMailer.no_projects(inbound_email, forwarder: forwarder)\n      end\n    end\n\n    def record_forward\n      forwarder.forwards.create subject: mail.subject, content: mail.content\n    end\n\n    def request_forwarding_project\n      Forwards::RoutingMailer.choose_project(inbound_email, forwarder: forwarder).deliver_now\n    end\n\n    def forwarder\n      @forwarder ||= User.find_by(email_address: mail.from)\n    end\nend\n\nCopy\n"],"body":"Configure basic routing:Then set up a mailbox:"},{"code":[],"body":"By default, an InboundEmail that has been successfully processed will be\nincinerated after 30 days. This ensures you're not holding on to people's data\nwilly-nilly after they may have canceled their accounts or deleted their\ncontent. The intention is that after you've processed an email, you should have\nextracted all the data you needed and turned it into domain models and content\non your side of the application. The InboundEmail simply stays in the system\nfor the extra time to provide debugging and forensics options.The actual incineration is done via the IncinerationJob that's scheduled\nto run after config.action_mailbox.incinerate_after time. This value is\nby default set to 30.days, but you can change it in your production.rb\nconfiguration. (Note that this far-future incineration scheduling relies on\nyour job queue being able to hold jobs for that long.)","title":"5 Incineration of InboundEmails","anchor":"#incineration-of-inboundemails"},{"title":"6 Working with Action Mailbox in development","anchor":"#working-with-action-mailbox-in-development","code":[],"body":"It's helpful to be able to test incoming emails in development without actually\nsending and receiving real emails. To accomplish this, there's a conductor\ncontroller mounted at /rails/conductor/action_mailbox/inbound_emails,\nwhich gives you an index of all the InboundEmails in the system, their\nstate of processing, and a form to create a new InboundEmail as well."},{"title":"7 Testing mailboxes","anchor":"#testing-mailboxes","code":["\nclass ForwardsMailboxTest < ActionMailbox::TestCase\n  test \"directly recording a client forward for a forwarder and forwardee corresponding to one project\" do\n    assert_difference -> { people(:david).buckets.first.recordings.count } do\n      receive_inbound_email_from_mail \\\n        to: 'save@example.com',\n        from: people(:david).email_address,\n        subject: \"Fwd: Status update?\",\n        body: <<~BODY\n          --- Begin forwarded message ---\n          From: Frank Holland <frank@microsoft.com>\n\n          What's the status?\n        BODY\n    end\n\n    recording = people(:david).buckets.first.recordings.last\n    assert_equal people(:david), recording.creator\n    assert_equal \"Status update?\", recording.forward.subject\n    assert_match \"What's the status?\", recording.forward.content.to_s\n  end\nend\n\nclass ForwardsMailboxTest < ActionMailbox::TestCase\n  test \"directly recording a client forward for a forwarder and forwardee corresponding to one project\" do\n    assert_difference -> { people(:david).buckets.first.recordings.count } do\n      receive_inbound_email_from_mail \\\n        to: 'save@example.com',\n        from: people(:david).email_address,\n        subject: \"Fwd: Status update?\",\n        body: <<~BODY\n          --- Begin forwarded message ---\n          From: Frank Holland <frank@microsoft.com>\n\n          What's the status?\n        BODY\n    end\n\n    recording = people(:david).buckets.first.recordings.last\n    assert_equal people(:david), recording.creator\n    assert_equal \"Status update?\", recording.forward.subject\n    assert_match \"What's the status?\", recording.forward.content.to_s\n  end\nend\n\nCopy\n"],"body":"Example:Please refer to the ActionMailbox::TestHelper API for further test helper methods."}]