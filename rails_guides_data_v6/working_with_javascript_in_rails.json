[{"code":["\nfetch(\"/test\")\n  .then((data) => data.text())\n  .then((html) => {\n    const results = document.querySelector(\"#results\");\n    results.insertAdjacentHTML(\"beforeend\", data);\n  });\n\nfetch(\"/test\")\n  .then((data) => data.text())\n  .then((html) => {\n    const results = document.querySelector(\"#results\");\n    results.insertAdjacentHTML(\"beforeend\", data);\n  });\n\nCopy\n"],"body":"In order to understand Ajax, you must first understand what a web browser does\nnormally.When you type http://localhost:3000 into your browser's address bar and hit\n'Go', the browser (your 'client') makes a request to the server. It parses the\nresponse, then fetches all associated assets, like JavaScript files,\nstylesheets and images. It then assembles the page. If you click a link, it\ndoes the same process: fetch the page, fetch the assets, put it all together,\nshow you the results. This is called the 'request response cycle'.JavaScript can also make requests to the server, and parse the response. It\nalso has the ability to update information on the page. Combining these two\npowers, a JavaScript writer can make a web page that can update just parts of\nitself, without needing to get the full page data from the server. This is a\npowerful technique that we call Ajax.As an example, here's some JavaScript code that makes an Ajax request:This code fetches data from \"/test\", and then appends the result to the element\nwith an id of results.Rails provides quite a bit of built-in support for building web pages with this\ntechnique. You rarely have to write this code yourself. The rest of this guide\nwill show you how Rails can help you write websites in this way, but it's\nall built on top of this fairly simple technique.","title":"1 An Introduction to Ajax","anchor":"#an-introduction-to-ajax"},{"title":"2 Unobtrusive JavaScript","anchor":"#unobtrusive-javascript","code":["\n<a href=\"#\" onclick=\"this.style.backgroundColor='#990000';event.preventDefault();\">Paint it red</a>\n\n<a href=\"#\" onclick=\"this.style.backgroundColor='#990000';event.preventDefault();\">Paint it red</a>\n\nCopy\n","\n<a href=\"#\" onclick=\"this.style.backgroundColor='#009900';this.style.color='#FFFFFF';event.preventDefault();\">Paint it green</a>\n\n<a href=\"#\" onclick=\"this.style.backgroundColor='#009900';this.style.color='#FFFFFF';event.preventDefault();\">Paint it green</a>\n\nCopy\n","\nwindow.paintIt = function(event, backgroundColor, textColor) {\n  event.preventDefault();\n  event.target.style.backgroundColor = backgroundColor;\n  if (textColor) {\n    event.target.style.color = textColor;\n  }\n}\n\nwindow.paintIt = function(event, backgroundColor, textColor) {\n  event.preventDefault();\n  event.target.style.backgroundColor = backgroundColor;\n  if (textColor) {\n    event.target.style.color = textColor;\n  }\n}\n\nCopy\n","\n<a href=\"#\" onclick=\"paintIt(event, '#990000')\">Paint it red</a>\n\n<a href=\"#\" onclick=\"paintIt(event, '#990000')\">Paint it red</a>\n\nCopy\n","\n<a href=\"#\" onclick=\"paintIt(event, '#990000')\">Paint it red</a>\n<a href=\"#\" onclick=\"paintIt(event, '#009900', '#FFFFFF')\">Paint it green</a>\n<a href=\"#\" onclick=\"paintIt(event, '#000099', '#FFFFFF')\">Paint it blue</a>\n\n<a href=\"#\" onclick=\"paintIt(event, '#990000')\">Paint it red</a>\n<a href=\"#\" onclick=\"paintIt(event, '#009900', '#FFFFFF')\">Paint it green</a>\n<a href=\"#\" onclick=\"paintIt(event, '#000099', '#FFFFFF')\">Paint it blue</a>\n\nCopy\n","\nfunction paintIt(element, backgroundColor, textColor) {\n  element.style.backgroundColor = backgroundColor;\n  if (textColor) {\n    element.style.color = textColor;\n  }\n}\n\nwindow.addEventListener(\"load\", () => {\n  const links = document.querySelectorAll(\n    \"a[data-background-color]\"\n  );\n  links.forEach((element) => {\n    element.addEventListener(\"click\", (event) => {\n      event.preventDefault();\n\n      const {backgroundColor, textColor} = element.dataset;\n      paintIt(element, backgroundColor, textColor);\n    });\n  });\n});\n\nfunction paintIt(element, backgroundColor, textColor) {\n  element.style.backgroundColor = backgroundColor;\n  if (textColor) {\n    element.style.color = textColor;\n  }\n}\n\nwindow.addEventListener(\"load\", () => {\n  const links = document.querySelectorAll(\n    \"a[data-background-color]\"\n  );\n  links.forEach((element) => {\n    element.addEventListener(\"click\", (event) => {\n      event.preventDefault();\n\n      const {backgroundColor, textColor} = element.dataset;\n      paintIt(element, backgroundColor, textColor);\n    });\n  });\n});\n\nCopy\n","\n<a href=\"#\" data-background-color=\"#990000\">Paint it red</a>\n<a href=\"#\" data-background-color=\"#009900\" data-text-color=\"#FFFFFF\">Paint it green</a>\n<a href=\"#\" data-background-color=\"#000099\" data-text-color=\"#FFFFFF\">Paint it blue</a>\n\n<a href=\"#\" data-background-color=\"#990000\">Paint it red</a>\n<a href=\"#\" data-background-color=\"#009900\" data-text-color=\"#FFFFFF\">Paint it green</a>\n<a href=\"#\" data-background-color=\"#000099\" data-text-color=\"#FFFFFF\">Paint it blue</a>\n\nCopy\n"],"body":"Rails uses a technique called \"Unobtrusive JavaScript\" to handle attaching\nJavaScript to the DOM. This is generally considered to be a best-practice\nwithin the frontend community, but you may occasionally read tutorials that\ndemonstrate other ways.Here's the simplest way to write JavaScript. You may see it referred to as\n'inline JavaScript':When clicked, the link background will become red. Here's the problem: what\nhappens when we have lots of JavaScript we want to execute on a click?Awkward, right? We could pull the function definition out of the click handler,\nand turn it a function:And then on our page:That's a little bit better, but what about multiple links that have the same\neffect?Not very DRY, eh? We can fix this by using events instead. We'll add a data-*\nattribute to our link, and then bind a handler to the click event of every link\nthat has that attribute:We call this 'unobtrusive' JavaScript because we're no longer mixing our\nJavaScript into our HTML. We've properly separated our concerns, making future\nchange easy. We can easily add behavior to any link by adding the data\nattribute. We can run all of our JavaScript through a minimizer and\nconcatenator. We can serve our entire JavaScript bundle on every page, which\nmeans that it'll get downloaded on the first page load and then be cached on\nevery page after that. Lots of little benefits really add up."},{"title":"3 Built-in Helpers","anchor":"#built-in-helpers","code":[],"body":""},{"title":"3.1 Remote Elements","anchor":"#remote-elements","code":[],"body":"Rails provides a bunch of view helper methods written in Ruby to assist you\nin generating HTML. Sometimes, you want to add a little Ajax to those elements,\nand Rails has got your back in those cases.Because of Unobtrusive JavaScript, the Rails \"Ajax helpers\" are actually in two\nparts: the JavaScript half and the Ruby half.Unless you have disabled the Asset Pipeline,\nrails-ujs\nprovides the JavaScript half, and the regular Ruby view helpers add appropriate\ntags to your DOM.You can read below about the different events that are fired dealing with\nremote elements inside your application."},{"title":"3.1.1 form_with","anchor":"#form-with","code":["\n<%= form_with(model: @article, id: \"new-article\", local: false) do |form| %>\n  ...\n<% end %>\n\n<%= form_with(model: @article, id: \"new-article\", local: false) do |form| %>\n  ...\n<% end %>\n\nCopy\n","\n<form id=\"new-article\" action=\"/articles\" accept-charset=\"UTF-8\" method=\"post\" data-remote=\"true\">\n  ...\n</form>\n\n<form id=\"new-article\" action=\"/articles\" accept-charset=\"UTF-8\" method=\"post\" data-remote=\"true\">\n  ...\n</form>\n\nCopy\n","\nwindow.addEventListener(\"load\", () => {\n  const element = document.querySelector(\"#new-article\");\n  element.addEventListener(\"ajax:success\", (event) => {\n    const [_data, _status, xhr] = event.detail;\n    element.insertAdjacentHTML(\"beforeend\", xhr.responseText);\n  });\n  element.addEventListener(\"ajax:error\", () => {\n    element.insertAdjacentHTML(\"beforeend\", \"<p>ERROR</p>\");\n  });\n});\n\nwindow.addEventListener(\"load\", () => {\n  const element = document.querySelector(\"#new-article\");\n  element.addEventListener(\"ajax:success\", (event) => {\n    const [_data, _status, xhr] = event.detail;\n    element.insertAdjacentHTML(\"beforeend\", xhr.responseText);\n  });\n  element.addEventListener(\"ajax:error\", () => {\n    element.insertAdjacentHTML(\"beforeend\", \"<p>ERROR</p>\");\n  });\n});\n\nCopy\n"],"body":"form_with\nis a helper that assists with writing forms. To use Ajax for your form you can\npass the :local option to form_with.This will generate the following HTML:Note the data-remote=\"true\". Now, the form will be submitted by Ajax rather\nthan by the browser's normal submit mechanism.You probably don't want to just sit there with a filled out <form>, though.\nYou probably want to do something upon a successful submission. To do that,\nbind to the ajax:success event. On failure, use ajax:error. Check it out:Obviously, you'll want to be a bit more sophisticated than that, but it's a\nstart."},{"title":"3.1.2 link_to","anchor":"#link-to","code":["\n<%= link_to \"an article\", @article, remote: true %>\n\n<%= link_to \"an article\", @article, remote: true %>\n\nCopy\n","\n<a href=\"/articles/1\" data-remote=\"true\">an article</a>\n\n<a href=\"/articles/1\" data-remote=\"true\">an article</a>\n\nCopy\n","\n<%= link_to \"Delete article\", @article, remote: true, method: :delete %>\n\n<%= link_to \"Delete article\", @article, remote: true, method: :delete %>\n\nCopy\n","\nwindow.addEventListener(\"load\", () => {\n  const links = document.querySelectorAll(\"a[data-remote]\");\n  links.forEach((element) => {\n    element.addEventListener(\"ajax:success\", () => {\n      alert(\"The article was deleted.\");\n    });\n  });\n});\n\nwindow.addEventListener(\"load\", () => {\n  const links = document.querySelectorAll(\"a[data-remote]\");\n  links.forEach((element) => {\n    element.addEventListener(\"ajax:success\", () => {\n      alert(\"The article was deleted.\");\n    });\n  });\n});\n\nCopy\n"],"body":"link_to\nis a helper that assists with generating links. It has a :remote option you\ncan use like this:which generatesYou can bind to the same Ajax events as form_with. Here's an example. Let's\nassume that we have a list of articles that can be deleted with just one\nclick. We would generate some HTML like this:and write some JavaScript like this:"},{"code":["\n<%= button_to \"An article\", @article, remote: true %>\n\n<%= button_to \"An article\", @article, remote: true %>\n\nCopy\n","\n<form action=\"/articles/1\" class=\"button_to\" data-remote=\"true\" method=\"post\">\n  <input type=\"submit\" value=\"An article\" />\n</form>\n\n<form action=\"/articles/1\" class=\"button_to\" data-remote=\"true\" method=\"post\">\n  <input type=\"submit\" value=\"An article\" />\n</form>\n\nCopy\n"],"body":"button_to is a helper that helps you create buttons. It has a :remote option that you can call like this:this generatesSince it's just a <form>, all of the information on form_with also applies.","title":"3.1.3 button_to","anchor":"#button-to"},{"title":"3.2 Customize Remote Elements","anchor":"#customize-remote-elements","code":[],"body":"It is possible to customize the behavior of elements with a data-remote\nattribute without writing a line of JavaScript. You can specify extra data-\nattributes to accomplish this."},{"title":"3.2.1 data-method","anchor":"#data-method","code":[],"body":"Activating hyperlinks always results in an HTTP GET request. However, if your\napplication is RESTful,\nsome links are in fact actions that change data on the server, and must be\nperformed with non-GET requests. This attribute allows marking up such links\nwith an explicit method such as \"post\", \"put\" or \"delete\".The way it works is that, when the link is activated, it constructs a hidden form\nin the document with the \"action\" attribute corresponding to \"href\" value of the\nlink, and the method corresponding to data-method value, and submits that form."},{"title":"3.2.2 data-url and data-params","anchor":"#data-url-and-data-params","code":["\n<input type=\"checkbox\" data-remote=\"true\"\n    data-url=\"/update\" data-params=\"id=10\" data-method=\"put\">\n\n<input type=\"checkbox\" data-remote=\"true\"\n    data-url=\"/update\" data-params=\"id=10\" data-method=\"put\">\n\nCopy\n"],"body":"Certain elements of your page aren't actually referring to any URL, but you may want\nthem to trigger Ajax calls. Specifying the data-url attribute along with\nthe data-remote one will trigger an Ajax call to the given URL. You can also\nspecify extra parameters through the data-params attribute.This can be useful to trigger an action on check-boxes for instance:"},{"code":[],"body":"It is also possible to define the Ajax dataType explicitly while performing\nrequests for data-remote elements, by way of the data-type attribute.","title":"3.2.3 data-type","anchor":"#data-type"},{"title":"3.3 Confirmations","anchor":"#confirmations","code":["\n<%= link_to \"Dangerous zone\", dangerous_zone_path,\n  data: { confirm: 'Are you sure?' } %>\n\n<%= link_to \"Dangerous zone\", dangerous_zone_path,\n  data: { confirm: 'Are you sure?' } %>\n\nCopy\n","\n<a href=\"...\" data-confirm=\"Are you sure?\">Dangerous zone</a>\n\n<a href=\"...\" data-confirm=\"Are you sure?\">Dangerous zone</a>\n\nCopy\n"],"body":"You can ask for an extra confirmation of the user by adding a data-confirm\nattribute on links and forms. The user will be presented with a JavaScript confirm()\ndialog containing the attribute's text. If the user chooses to cancel, the action\ndoesn't take place.Adding this attribute on links will trigger the dialog on click, and adding it\non forms will trigger it on submit. For example:This generates:The attribute is also allowed on form submit buttons. This allows you to customize\nthe warning message depending on the button which was activated. In this case,\nyou should not have data-confirm on the form itself.The default confirmation uses a JavaScript confirm dialog, but you can customize\nthis by listening to the confirm event, which is fired just before the confirmation\nwindow appears to the user. To cancel this default confirmation, have the confirm\nhandler return false."},{"title":"3.4 Automatic disabling","anchor":"#automatic-disabling","code":["\n<%= form_with(model: Article.new) do |form| %>\n  <%= form.submit data: { disable_with: \"Saving...\" } %>\n<% end %>\n\n<%= form_with(model: Article.new) do |form| %>\n  <%= form.submit data: { disable_with: \"Saving...\" } %>\n<% end %>\n\nCopy\n","\n<input data-disable-with=\"Saving...\" type=\"submit\">\n\n<input data-disable-with=\"Saving...\" type=\"submit\">\n\nCopy\n"],"body":"It is also possible to automatically disable an input while the form is submitting\nby using the data-disable-with attribute. This is to prevent accidental\ndouble-clicks from the user, which could result in duplicate HTTP requests that\nthe backend may not detect as such. The value of the attribute is the text that will\nbecome the new value of the button in its disabled state.This also works for links with data-method attribute.For example:This generates a form with:"},{"code":["\ndocument.body.addEventListener(\"ajax:success\", (event) => {\n  const [data, status, xhr] = event.detail;\n});\n\ndocument.body.addEventListener(\"ajax:success\", (event) => {\n  const [data, status, xhr] = event.detail;\n});\n\nCopy\n"],"body":"Rails 5.1 introduced rails-ujs and dropped jQuery as a dependency.\nAs a result the Unobtrusive JavaScript (UJS) driver has been rewritten to operate without jQuery.\nThese introductions cause small changes to custom events fired during the request:Example usage:","title":"3.5 Rails-ujs event handlers","anchor":"#rails-ujs-event-handlers"},{"code":[],"body":"You can stop execution of the Ajax request by running event.preventDefault()\nfrom the handlers methods ajax:before or ajax:beforeSend.\nThe ajax:before event can manipulate form data before serialization and the\najax:beforeSend event is useful for adding custom request headers.If you stop the ajax:aborted:file event, the default behavior of allowing the\nbrowser to submit the form via normal means (i.e. non-Ajax submission) will be\ncanceled and the form will not be submitted at all. This is useful for\nimplementing your own Ajax file upload workaround.Note, you should use return false to prevent an event for jquery-ujs and\nevent.preventDefault() for rails-ujs.","title":"3.6 Stoppable events","anchor":"#stoppable-events"},{"title":"4 Server-Side Concerns","anchor":"#server-side-concerns","code":[],"body":"Ajax isn't just client-side, you also need to do some work on the server\nside to support it. Often, people like their Ajax requests to return JSON\nrather than HTML. Let's discuss what it takes to make that happen."},{"title":"4.1 A Simple Example","anchor":"#a-simple-example","code":["\nclass UsersController < ApplicationController\n  def index\n    @users = User.all\n    @user = User.new\n  end\n  # ...\n\nclass UsersController < ApplicationController\n  def index\n    @users = User.all\n    @user = User.new\n  end\n  # ...\n\nCopy\n","\n<b>Users</b>\n\n<ul id=\"users\">\n<%= render @users %>\n</ul>\n\n<br>\n\n<%= form_with model: @user do |form| %>\n  <%= form.label :name %><br>\n  <%= form.text_field :name %>\n  <%= form.submit %>\n<% end %>\n\n<b>Users</b>\n\n<ul id=\"users\">\n<%= render @users %>\n</ul>\n\n<br>\n\n<%= form_with model: @user do |form| %>\n  <%= form.label :name %><br>\n  <%= form.text_field :name %>\n  <%= form.submit %>\n<% end %>\n\nCopy\n","\n<li><%= user.name %></li>\n\n<li><%= user.name %></li>\n\nCopy\n","\n  # app/controllers/users_controller.rb\n  # ......\n  def create\n    @user = User.new(params[:user])\n\n    respond_to do |format|\n      if @user.save\n        format.html { redirect_to @user, notice: 'User was successfully created.' }\n        format.js\n        format.json { render json: @user, status: :created, location: @user }\n      else\n        format.html { render action: \"new\" }\n        format.json { render json: @user.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  # app/controllers/users_controller.rb\n  # ......\n  def create\n    @user = User.new(params[:user])\n\n    respond_to do |format|\n      if @user.save\n        format.html { redirect_to @user, notice: 'User was successfully created.' }\n        format.js\n        format.json { render json: @user, status: :created, location: @user }\n      else\n        format.html { render action: \"new\" }\n        format.json { render json: @user.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\nCopy\n","\nvar users = document.querySelector(\"#users\");\nusers.insertAdjacentHTML(\"beforeend\", \"<%= j render(@user) %>\");\n\nvar users = document.querySelector(\"#users\");\nusers.insertAdjacentHTML(\"beforeend\", \"<%= j render(@user) %>\");\n\nCopy\n"],"body":"Imagine you have a series of users that you would like to display and provide a\nform on that same page to create a new user. The index action of your\ncontroller looks like this:The index view (app/views/users/index.html.erb) contains:The app/views/users/_user.html.erb partial contains the following:The top portion of the index page displays the users. The bottom portion\nprovides a form to create a new user.The bottom form will call the create action on the UsersController. Because\nthe form's remote option is set to true, the request will be posted to the\nUsersController as an Ajax request, looking for JavaScript. In order to\nserve that request, the create action of your controller would look like\nthis:Notice the format.js in the respond_to block: that allows the controller to\nrespond to your Ajax request. You then have a corresponding\napp/views/users/create.js.erb view file that generates the actual JavaScript\ncode that will be sent and executed on the client side."},{"title":"5 Turbolinks","anchor":"#turbolinks","code":[],"body":"Rails ships with the Turbolinks library,\nwhich uses Ajax to speed up page rendering in most applications."},{"title":"5.1 How Turbolinks Works","anchor":"#how-turbolinks-works","code":["\n<a href=\"...\" data-turbolinks=\"false\">No turbolinks here</a>.\n\n<a href=\"...\" data-turbolinks=\"false\">No turbolinks here</a>.\n\nCopy\n"],"body":"Turbolinks attaches a click handler to all <a> tags on the page. If your browser\nsupports\nPushState,\nTurbolinks will make an Ajax request for the page, parse the response, and\nreplace the entire <body> of the page with the <body> of the response. It\nwill then use PushState to change the URL to the correct one, preserving\nrefresh semantics and giving you pretty URLs.If you want to disable Turbolinks for certain links, add a data-turbolinks=\"false\"\nattribute to the tag:"},{"code":["\nwindow.addEventListener(\"load\", () => {\n  alert(\"page has loaded!\");\n});\n\nwindow.addEventListener(\"load\", () => {\n  alert(\"page has loaded!\");\n});\n\nCopy\n","\ndocument.addEventListener(\"turbolinks:load\", () => {\n  alert(\"page has loaded!\");\n});\n\ndocument.addEventListener(\"turbolinks:load\", () => {\n  alert(\"page has loaded!\");\n});\n\nCopy\n"],"body":"You'll often want to do some sort of processing upon\npage load. Using the DOM, you'd write something like this:However, because Turbolinks overrides the normal page loading process, the\nevent that this relies upon will not be fired. If you have code that looks like\nthis, you must change your code to do this instead:For more details, including other events you can bind to, check out the\nTurbolinks\nREADME.","title":"5.2 Page Change Events","anchor":"#page-change-events"},{"title":"6 Cross-Site Request Forgery (CSRF) token in Ajax","anchor":"#cross-site-request-forgery-csrf-token-in-ajax","code":["\nconst token = document.getElementsByName(\n  \"csrf-token\"\n)[0].content;\n\nconst token = document.getElementsByName(\n  \"csrf-token\"\n)[0].content;\n\nCopy\n"],"body":"When using another library to make Ajax calls, it is necessary to add\nthe security token as a default header for Ajax calls in your library. To get\nthe token:You can then submit this token as a X-CSRF-Token header for your\nAjax request. You do not need to add a CSRF token for GET requests,\nonly non-GET ones.You can read more about about Cross-Site Request Forgery in the Security guide."},{"title":"7 Other Resources","anchor":"#other-resources","code":[],"body":"Here are some helpful links to help you learn even more:"}]