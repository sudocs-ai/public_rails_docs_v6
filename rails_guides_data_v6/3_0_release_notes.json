[{"code":["\n# Use sudo if your setup requires it\n$ gem install rails\n\ngem install rails\n\nCopy\n"],"body":"To install Rails 3:If you're upgrading an existing application, it's a great idea to have good test coverage before going in. You should also first upgrade to Rails 2.3.5 and make sure your application still runs as expected before attempting to update to Rails 3. Then take heed of the following changes:","title":"1 Upgrading to Rails 3","anchor":"#upgrading-to-rails-3"},{"title":"1.1 Rails 3 requires at least Ruby 1.8.7","anchor":"#rails-3-requires-at-least-ruby-1-8-7","code":[],"body":"Rails 3.0 requires Ruby 1.8.7 or higher. Support for all of the previous Ruby versions has been dropped officially and you should upgrade as early as possible. Rails 3.0 is also compatible with Ruby 1.9.2."},{"title":"1.2 Rails Application object","anchor":"#rails-application-object","code":[],"body":"As part of the groundwork for supporting running multiple Rails applications in the same process, Rails 3 introduces the concept of an Application object. An application object holds all the application specific configurations and is very similar in nature to config/environment.rb from the previous versions of Rails.Each Rails application now must have a corresponding application object. The application object is defined in config/application.rb. If you're upgrading an existing application to Rails 3, you must add this file and move the appropriate configurations from config/environment.rb to config/application.rb."},{"title":"1.3 script/* replaced by script/rails","anchor":"#script-replaced-by-script-rails","code":["\n$ rails console                      # instead of script/console\n$ rails g scaffold post title:string # instead of script/generate scaffold post title:string\n\nrails console                      # instead of script/console\nrails g scaffold post title:string # instead of script/generate scaffold post title:string\n\nCopy\n"],"body":"The new script/rails replaces all the scripts that used to be in the script directory. You do not run script/rails directly though, the rails command detects it is being invoked in the root of a Rails application and runs the script for you. Intended usage is:Run rails --help for a list of all the options."},{"title":"1.4 Dependencies and config.gem","anchor":"#dependencies-and-config-gem","code":[],"body":"The config.gem method is gone and has been replaced by using bundler and a Gemfile, see Vendoring Gems below."},{"title":"1.5 Upgrade Process","anchor":"#upgrade-process","code":["\n$ ruby script/plugin install git://github.com/rails/rails_upgrade.git\n\nruby script/plugin install git://github.com/rails/rails_upgrade.git\n\nCopy\n"],"body":"To help with the upgrade process, a plugin named Rails Upgrade has been created to automate part of it.Simply install the plugin, then run rake rails:upgrade:check to check your app for pieces that need to be updated (with links to information on how to update them). It also offers a task to generate a Gemfile based on your current config.gem calls and a task to generate a new routes file from your current one. To get the plugin, simply run the following:You can see an example of how that works at Rails Upgrade is now an Official PluginAside from Rails Upgrade tool, if you need more help, there are people on IRC and rubyonrails-talk that are probably doing the same thing, possibly hitting the same issues. Be sure to blog your own experiences when upgrading so others can benefit from your knowledge!"},{"title":"2 Creating a Rails 3.0 application","anchor":"#creating-a-rails-3-0-application","code":["\n# You should have the 'rails' RubyGem installed\n$ rails new myapp\n$ cd myapp\n\nrails new myapp\ncd myapp\n\nCopy\n"],"body":""},{"code":[],"body":"Rails now uses a Gemfile in the application root to determine the gems you require for your application to start. This Gemfile is processed by the Bundler which then installs all your dependencies. It can even install all the dependencies locally to your application so that it doesn't depend on the system gems.More information: - bundler homepage","title":"2.1 Vendoring Gems","anchor":"#vendoring-gems"},{"title":"2.2 Living on the Edge","anchor":"#living-on-the-edge","code":["\n$ rails new myapp --edge\n\nrails new myapp --edge\n\nCopy\n","\n$ ruby /path/to/rails/bin/rails new myapp --dev\n\nruby /path/to/rails/bin/rails new myapp --dev\n\nCopy\n"],"body":"Bundler and Gemfile makes freezing your Rails application easy as pie with the new dedicated bundle command, so rake freeze is no longer relevant and has been dropped.If you want to bundle straight from the Git repository, you can pass the --edge flag:If you have a local checkout of the Rails repository and want to generate an application using that, you can pass the --dev flag:"},{"code":[],"body":"There are six major changes in the architecture of Rails.","title":"3 Rails Architectural Changes","anchor":"#rails-architectural-changes"},{"title":"3.1 Railties Restrung","anchor":"#railties-restrung","code":[],"body":"Railties was updated to provide a consistent plugin API for the entire Rails framework as well as a total rewrite of generators and the Rails bindings, the result is that developers can now hook into any significant stage of the generators and application framework in a consistent, defined manner."},{"title":"3.2 All Rails core components are decoupled","anchor":"#all-rails-core-components-are-decoupled","code":[],"body":"With the merge of Merb and Rails, one of the big jobs was to remove the tight coupling between Rails core components. This has now been achieved, and all Rails core components are now using the same API that you can use for developing plugins. This means any plugin you make, or any core component replacement (like DataMapper or Sequel) can access all the functionality that the Rails core components have access to and extend and enhance at will.More information: - The Great Decoupling"},{"title":"3.3 Active Model Abstraction","anchor":"#active-model-abstraction","code":[],"body":"Part of decoupling the core components was extracting all ties to Active Record from Action Pack. This has now been completed. All new ORM plugins now just need to implement Active Model interfaces to work seamlessly with Action Pack.More information: - Make Any Ruby Object Feel Like ActiveRecord"},{"title":"3.4 Controller Abstraction","anchor":"#controller-abstraction","code":[],"body":"Another big part of decoupling the core components was creating a base superclass that is separated from the notions of HTTP in order to handle rendering of views, etc. This creation of AbstractController allowed ActionController and ActionMailer to be greatly simplified with common code removed from all these libraries and put into Abstract Controller.More Information: - Rails Edge Architecture"},{"title":"3.5 Arel Integration","anchor":"#arel-integration","code":[],"body":"Arel (or Active Relation) has been taken on as the underpinnings of Active Record and is now required for Rails. Arel provides an SQL abstraction that simplifies out Active Record and provides the underpinnings for the relation functionality in Active Record.More information: - Why I wrote Arel"},{"title":"3.6 Mail Extraction","anchor":"#mail-extraction","code":[],"body":"Action Mailer ever since its beginnings has had monkey patches, pre parsers and even delivery and receiver agents, all in addition to having TMail vendored in the source tree. Version 3 changes that with all email message related functionality abstracted out to the Mail gem. This again reduces code duplication and helps create definable boundaries between Action Mailer and the email parser.More information: - New Action Mailer API in Rails 3"},{"title":"4 Documentation","anchor":"#documentation","code":[],"body":"The documentation in the Rails tree is being updated with all the API changes, additionally, the Rails Edge Guides are being updated one by one to reflect the changes in Rails 3.0. The guides at guides.rubyonrails.org however will continue to contain only the stable version of Rails (at this point, version 2.3.5, until 3.0 is released).More Information: - Rails Documentation Projects"},{"title":"5 Internationalization","anchor":"#internationalization","code":[],"body":"A large amount of work has been done with I18n support in Rails 3, including the latest I18n gem supplying many speed improvements.More Information: - Rails 3 I18n changes"},{"title":"6 Railties","anchor":"#railties","code":[],"body":"With the decoupling of the main Rails frameworks, Railties got a huge overhaul so as to make linking up frameworks, engines, or plugins as painless and extensible as possible:Railties generators got a huge amount of attention in Rails 3.0, basically:Also, the views generated by Railties generators had some overhaul:Finally a couple of enhancements were added to the rake tasks:Railties now deprecates:PLUGIN/rails/tasks, and PLUGIN/tasks are no longer loaded all tasks now must be in PLUGIN/lib/tasks.More information:"},{"code":[],"body":"There have been significant internal and external changes in Action Pack.","title":"7 Action Pack","anchor":"#action-pack"},{"title":"7.1 Abstract Controller","anchor":"#abstract-controller","code":[],"body":"Abstract Controller pulls out the generic parts of Action Controller into a reusable module that any library can use to render templates, render partials, helpers, translations, logging, any part of the request response cycle. This abstraction allowed ActionMailer::Base to now just inherit from AbstractController and just wrap the Rails DSL onto the Mail gem.It also provided an opportunity to clean up Action Controller, abstracting out what could to simplify the code.Note however that Abstract Controller is not a user facing API, you will not run into it in your day to day use of Rails.More Information: - Rails Edge Architecture"},{"title":"7.2 Action Controller","anchor":"#action-controller","code":[],"body":"Deprecations:More Information:"},{"code":[],"body":"Action Dispatch is new in Rails 3.0 and provides a new, cleaner implementation for routing.DeprecationsMore Information:\n* The Rails 3 Router: Rack it Up\n* Revamped Routes in Rails 3\n* Generic Actions in Rails 3","title":"7.3 Action Dispatch","anchor":"#action-dispatch"},{"title":"7.4 Action View","anchor":"#action-view","code":[],"body":""},{"title":"7.4.1 Unobtrusive JavaScript","anchor":"#unobtrusive-javascript","code":["\nform_for @post, :remote => true\n\nform_for @post, :remote => true\n\nCopy\n","\n<form action=\"http://host.com\" id=\"create-post\" method=\"post\" data-remote=\"true\">\n\n<form action=\"http://host.com\" id=\"create-post\" method=\"post\" data-remote=\"true\">\n\nCopy\n"],"body":"Major re-write was done in the Action View helpers, implementing Unobtrusive JavaScript (UJS) hooks and removing the old inline AJAX commands. This enables Rails to use any compliant UJS driver to implement the UJS hooks in the helpers.What this means is that all previous remote_<method> helpers have been removed from Rails core and put into the Prototype Legacy Helper. To get UJS hooks into your HTML, you now pass :remote => true instead. For example:Produces:"},{"code":["\n<%= form_for @post do |f| %>\n  ...\n<% end %>\n\n<%= form_for @post do |f| %>\n  ...\n<% end %>\n\nCopy\n"],"body":"Helpers like form_for or div_for that insert content from a block use <%= now:Your own helpers of that kind are expected to return a string, rather than appending to the output buffer by hand.Helpers that do something else, like cache or content_for, are not affected by this change, they need &lt;% as before.","title":"7.4.2 Helpers with Blocks","anchor":"#helpers-with-blocks"},{"title":"7.4.3 Other Changes","anchor":"#other-changes","code":[],"body":""},{"code":[],"body":"Active Model is new in Rails 3.0. It provides an abstraction layer for any ORM libraries to use to interact with Rails by implementing an Active Model interface.","title":"8 Active Model","anchor":"#active-model"},{"title":"8.1 ORM Abstraction and Action Pack Interface","anchor":"#orm-abstraction-and-action-pack-interface","code":[],"body":"Part of decoupling the core components was extracting all ties to Active Record from Action Pack. This has now been completed. All new ORM plugins now just need to implement Active Model interfaces to work seamlessly with Action Pack.More Information: - Make Any Ruby Object Feel Like ActiveRecord"},{"title":"8.2 Validations","anchor":"#validations","code":["\nclass TitleValidator < ActiveModel::EachValidator\n  Titles = ['Mr.', 'Mrs.', 'Dr.']\n  def validate_each(record, attribute, value)\n    unless Titles.include?(value)\n      record.errors[attribute] << 'must be a valid title'\n    end\n  end\nend\n\nclass TitleValidator < ActiveModel::EachValidator\n  Titles = ['Mr.', 'Mrs.', 'Dr.']\n  def validate_each(record, attribute, value)\n    unless Titles.include?(value)\n      record.errors[attribute] << 'must be a valid title'\n    end\n  end\nend\n\nCopy\n","\nclass Person\n  include ActiveModel::Validations\n  attr_accessor :title\n  validates :title, :presence => true, :title => true\nend\n\n# Or for Active Record\n\nclass Person < ActiveRecord::Base\n  validates :title, :presence => true, :title => true\nend\n\nclass Person\n  include ActiveModel::Validations\n  attr_accessor :title\n  validates :title, :presence => true, :title => true\nend\n\n# Or for Active Record\n\nclass Person < ActiveRecord::Base\n  validates :title, :presence => true, :title => true\nend\n\nCopy\n","\nUser.validators\nUser.validators_on(:login)\n\nUser.validators\nUser.validators_on(:login)\n\nCopy\n"],"body":"Validations have been moved from Active Record into Active Model, providing an interface to validations that works across ORM libraries in Rails 3.You can also pass in a validator object, which you can then reuse between objects that use Active Model:There's also support for introspection:More Information:"},{"code":[],"body":"Active Record received a lot of attention in Rails 3.0, including abstraction into Active Model, a full update to the Query interface using Arel, validation updates, and many enhancements and fixes. All of the Rails 2.x API will be usable through a compatibility layer that will be supported until version 3.1.","title":"9 Active Record","anchor":"#active-record"},{"title":"9.1 Query Interface","anchor":"#query-interface","code":[],"body":"Active Record, through the use of Arel, now returns relations on its core methods. The existing API in Rails 2.3.x is still supported and will not be deprecated until Rails 3.1 and not removed until Rails 3.2, however, the new API provides the following new methods that all return relations allowing them to be chained together:More Information:"},{"code":[],"body":"","title":"9.2 Enhancements","anchor":"#enhancements"},{"code":[],"body":"Additionally, many fixes in the Active Record branch:As well as the following deprecations:","title":"9.3 Patches and Deprecations","anchor":"#patches-and-deprecations"},{"title":"10 Active Resource","anchor":"#active-resource","code":[],"body":"Active Resource was also extracted out to Active Model allowing you to use Active Resource objects with Action Pack seamlessly.Deprecations:"},{"code":[],"body":"A large effort was made in Active Support to make it cherry pickable, that is, you no longer have to require the entire Active Support library to get pieces of it. This allows the various core components of Rails to run slimmer.These are the main changes in Active Support:The following methods have been removed because they are now available in Ruby 1.8.7 and 1.9.The security patch for REXML remains in Active Support because early patch-levels of Ruby 1.8.7 still need it. Active Support knows whether it has to apply it or not.The following methods have been removed because they are no longer used in the framework:","title":"11 Active Support","anchor":"#active-support"},{"code":[],"body":"Action Mailer has been given a new API with TMail being replaced out with the new Mail as the email library. Action Mailer itself has been given an almost complete re-write with pretty much every line of code touched. The result is that Action Mailer now simply inherits from Abstract Controller and wraps the Mail gem in a Rails DSL. This reduces the amount of code and duplication of other libraries in Action Mailer considerably.Deprecations:More Information:","title":"12 Action Mailer","anchor":"#action-mailer"},{"code":[],"body":"See the full list of contributors to Rails for the many people who spent many hours making Rails 3. Kudos to all of them.Rails 3.0 Release Notes were compiled by Mikel Lindsaar.","title":"13 Credits","anchor":"#credits"}]